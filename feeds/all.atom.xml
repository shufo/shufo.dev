<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>shufo blog</title><link href="http://shufo.github.io/" rel="alternate"></link><link href="http://shufo.github.io/feeds/all.atom.xml" rel="self"></link><id>http://shufo.github.io/</id><updated>2016-11-28T20:00:00+09:00</updated><entry><title>MacBook Proを捨ててThinkpad X220を買った</title><link href="http://shufo.github.io/alternative_to_mac.html" rel="alternate"></link><published>2016-11-28T20:00:00+09:00</published><updated>2016-11-28T20:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2016-11-28:alternative_to_mac.html</id><summary type="html">&lt;p&gt;関連: &lt;a href="http://d.hatena.ne.jp/joker1007/20161125/1480069437"&gt;MacBook Proを捨ててThinkpad T460sを買ってgentooを入れた - joker1007の日記&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正確にいうとMBP Late 2016を買おうと思っていたのだけど結局Thinkpad X220を買った話です&lt;/p&gt;
&lt;p&gt;今年10月の&lt;a href="http://www.apple.com/apple-events/october-2016/"&gt;例のイベント&lt;/a&gt;で発表されたMBPは本当に楽しみにしていたし、MBP費用も貯めていたのだけど&lt;br&gt;
やっぱり欲しくなくなってしまった理由としてAppleがもう開発者の方向を向いてないかもしれない、というのをあのイベントを見て強く感じたからです。&lt;br&gt;
Appleの方向性に共感していたら買ったかもしれないけどTouchBarの方向性はちょっと支持出来なかったので…&lt;/p&gt;
&lt;p&gt;あと最近Docker for Windowsを久しぶりに使ったらmount周りもちゃんと動いたのでWindows環境でも自分の場合は普段の開発にほとんど問題なくなったというのもあります。
自分で作ったアプリは全てDockerizeするDockerオタクなのでこういうときはさすがに恩恵を感じます。
Linuxデスクトップを導入することも考えたけどドライバ周りや普段使い、会社での相互運用性を考えると常用するには少しハードルが高いなと思いWindowsにしています。&lt;/p&gt;
&lt;h2&gt;ThinkPad X220&lt;/h2&gt;
&lt;h3&gt;スペック&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Core i5-2660M&lt;/li&gt;
&lt;li&gt;Mem: 4G&lt;/li&gt;
&lt;li&gt;Disk: HDD 480GB&lt;/li&gt;
&lt;li&gt;ディスプレイ解像度: 1366x768&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MBPとの比較&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ESCがデカい&lt;/li&gt;
&lt;li&gt;キーボードが最高&lt;/li&gt;
&lt;li&gt;トラックポイントはいいぞ&lt;/li&gt;
&lt;li&gt;2～3万で買える&lt;/li&gt;
&lt;li&gt;バッテリ持ちは悪い&lt;/li&gt;
&lt;li&gt;1.5kgぐらいあるので若干重い&lt;/li&gt;
&lt;li&gt;パーツが大量に出回って分解も簡単なので直しやすい&lt;/li&gt;
&lt;li&gt;&lt;del&gt;スタバでMacを威嚇出来る&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ThinkPad X220は2011年発売のモデルで、アイソレーションキーボードになる前のクラシック型のキーボードとしては最後のold ThinkPadです。
Sandy Bridge世代のCPUと高い拡張性で2016年現在でもパーツの換装を行えば十分使用可能ながら、企業からのリース品が大量に出回って中古市場で2～3万でとこなれて来てるので購入するには丁度いい頃だと思います。&lt;br&gt;
Sandy Bridgeと最新のSkylake世代のCPUを比較しても性能差は&lt;a href="http://www.cpubenchmark.net/compare.php?cmp%5B%5D=2556&amp;amp;cmp%5B%5D=812"&gt;ほぼない&lt;/a&gt;のでCPUバウンドな処理を行わなければSSDとメモリ換装で最新ノートPCと比べてもほぼ遜色ないんじゃないでしょうか。&lt;br&gt;
さすがにPCIe-NVMeディスクを搭載出来るような機種にはSATA SSDに換装してもディスクI/Oで劣るけれども割り切って使うにはありだと思います。&lt;/p&gt;
&lt;p&gt;今回は英字キーボードが国内の中古市場には見つからなかったのでeBayから輸入しましたが
日本語キーボードでよければ国内の中古市場にも十分流通してるのでそちらの方が早いと思います。&lt;/p&gt;
&lt;h3&gt;注文&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2050601.m570.l1313.TR0.TRC0.H0.XX220.TRS0&amp;amp;_nkw=X220&amp;amp;_sacat=0"&gt;eBay&lt;/a&gt;からThinkPad X220を検索しそこそこ状態のよさそうな品かつリース品を綺麗にしたようなものをDyminという業者から購入。&lt;/p&gt;
&lt;p&gt;X220にはタッチパネルモデルもあるみたいだけど無駄に重くなるので普通のモデルにした。&lt;/p&gt;
&lt;h3&gt;配送から届くまで&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注文後1日: 業者から発送&lt;/li&gt;
&lt;li&gt;4日: eBayのGlobal集荷センターに到着(ここから長い)&lt;/li&gt;
&lt;li&gt;5～14日: 海外配送&lt;/li&gt;
&lt;li&gt;14～15日: 国内配送&lt;/li&gt;
&lt;li&gt;16日: 到着&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パーツも結構流通してるっぽいので国内中古市場で買った日本語キーボード版を英字キーボードに換装したほうが早かったかなと思いました。&lt;/p&gt;
&lt;h3&gt;到着&lt;/h3&gt;
&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="ja" dir="ltr"&gt;MacBook Pro届いた &lt;a href="https://t.co/A3lKMTUrYT"&gt;pic.twitter.com/A3lKMTUrYT&lt;/a&gt;&lt;/p&gt;&amp;mdash; shufo (@shufo_) &lt;a href="https://twitter.com/shufo_/status/802768934432743424"&gt;November 27, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;(ThinkPad X220です)&lt;/p&gt;
&lt;p&gt;海外発送の送料込でちょうど3万程でした。&lt;br&gt;
全体的に使用感はほとんどなく綺麗だったけどキーボードには気にならないレベルだけどわずかに使用感あり。
ThinkPadを買うのは初めてですがこの時代のold ThinkPadは雰囲気があっていいですね。個人的にはキーボードは薄い方が好きですがちゃんとした深さがあるので無駄にガチャガチャやりたくなります。&lt;/p&gt;
&lt;h3&gt;SSD・メモリ換装&lt;/h3&gt;
&lt;p&gt;SSDとメモリを以下に換装。
パーツ費用含めても全体で大体5万くらいでした。&lt;br&gt;
換装済みの中古品もあるけど高くつく割には容量が少なかったりするので手間をかけられるなら自分で換装した方が安く高スペックに出来ます。&lt;/p&gt;
&lt;h4&gt;SSD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Crusial MX300 525GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交換手順参照: &lt;a href="http://003sh.ou-net.com/blog/?p=1114"&gt;ThinkPad x220 SSD交換(Apacer/SanDisk) \| 003SH 解体新書&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;メモリ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Transcend PC3L-12800 DDR3L 1600 8GB×2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交換手順参照: &lt;a href="http://kimamatech.blog.fc2.com/blog-entry-49.html"&gt;ThinkPad X220 増強作戦 その１ ： 1万円でメモリを16GBに増設 - きままテック&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;MBPの代替としてThinkPad X220を買った。&lt;br&gt;
モバイル出来るUnixとしてMacは好きなのだけど最近のAppleの方向性からロックインが強くなることの懸念も含めてノートPCから変えてみました。(まだiPhoneは使ってる)&lt;/p&gt;
&lt;p&gt;最近のWindows開発環境としてはbabun + Docker for Windowsがあれば個人的に困ることはほぼなくなって来たのであとはWSLのbashの完成度がより高まればいよいよWindowsでも十分だなと思います。&lt;br&gt;
Linuxデスクトップは&lt;a href="https://elementary.io/ja/"&gt;elementary OS&lt;/a&gt;が気になっているのでmSATA SSDを追加してデュアルブートにでもしてみようかなと思います。&lt;/p&gt;
&lt;h2&gt;他候補&lt;/h2&gt;
&lt;p&gt;MBPオルタナティブのノートPCとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.razerzone.com/gaming-systems/razer-blade-stealth"&gt;Razer Blade Stealth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dell.com/jp/p/xps-13-9360-laptop/pd"&gt;Dell XPS 13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がスペックと価格のバランスがよかったので検討していたのだけど自分のノートPCの使用頻度に対してはオーバースペックすぎたので候補から外れました。&lt;/p&gt;
&lt;h2&gt;追記 2016-12-01&lt;/h2&gt;
&lt;p&gt;到着後Windows7からWindows10 Proにアップグレードしバッテリーのファームウェアをアップグレードしようとしたらバッテリーが死にました…
ファームウェアをアップデートする前はバッテリーを認識していたので恐らくファームウェアの書き換えに失敗したようです。&lt;/p&gt;
&lt;h3&gt;バッテリー追加&lt;/h3&gt;
&lt;p&gt;結局以下の互換バッテリーをAmazonでポチりました&lt;br&gt;
元は9セルでX220本体からバッテリーがはみ出していたのが筐体の枠にちょうど収まりました&lt;br&gt;
公式じゃないですけど今のとこ問題ないです&lt;br&gt;
安いし物理的に取り外しし易いからバッテリーが心配な時は何本か持ち歩くってのもありですね&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="a/wiq4p"&gt;&lt;a href="//imgur.com/wiq4p"&gt;&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://amzn.asia/bjrtGpW"&gt;WorldPlus バッテリー LENOVO ThinkPad X230 X230i X220 X220i X220s 対応 6セル&lt;/a&gt;&lt;/p&gt;</summary><category term="Mac"></category><category term="PC"></category></entry><entry><title>Pelican + codeanywhere + Github Pagesでシンクライアントなブログ作成</title><link href="http://shufo.github.io/site_building.html" rel="alternate"></link><published>2015-11-23T13:00:00+09:00</published><updated>2015-11-23T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-11-23:site_building.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;このブログは&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で書いているけどいわゆるサイトジェネレータにありがちな問題なのがいちいち開発環境を開いたりするのが面倒というのがある。&lt;br&gt;
WebUI管理画面をサイトジェネレータ自体が持っている&lt;a href="http://hubpress.io/"&gt;HubPress&lt;/a&gt;は気軽に記事を投稿出来るもののGithub APIを使うためGithub Pages専用アプリという色が強く他の環境に移す場合を考慮して使ってはいない。&lt;br&gt;
2015年11月現在主なサイトジェネレータは&lt;a href="https://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt;でGitHub Starの多い順で&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, &lt;a href="http://octopress.org/"&gt;OctoPress&lt;/a&gt;, &lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt;, &lt;a href="http://gohugo.io/"&gt;Hugo&lt;/a&gt;, &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;がよく使われている。&lt;br&gt;
それぞれWebベースの管理画面はないもののシンプルな構成で一度生成してしまえば特定のランタイムやDBに依存しないで静的コンテンツを配信出来る。&lt;/p&gt;
&lt;h2&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特定のマシン(PC, Mac, タブレット)に依存しないサイトジェネレータ環境の構築&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やったこと&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で静的コンテンツの生成、&lt;a href="https://codeanywhere.com/"&gt;codeanywhere&lt;/a&gt;でWebベースでのファイルの編集とサイトジェネレータ用ランタイムの構築、GitHub Pagesでサイトの公開を行った。&lt;/p&gt;
&lt;h2&gt;Pelican とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/pelican.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt;はPython製の静的サイトジェネレータでMarkdown形式で記事を書くことが出来る。&lt;/p&gt;
&lt;p&gt;主な機能としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記事の作成&lt;/li&gt;
&lt;li&gt;RSS フィードの作成&lt;/li&gt;
&lt;li&gt;テーマ機能&lt;/li&gt;
&lt;li&gt;プラグイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;があり、ここら辺は類似のサイトジェネレータと特に変わりなし。&lt;/p&gt;
&lt;h2&gt;Github Pages とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/githubpages.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; で静的なページをホスティングすることが出来るサービス。
独自ドメインの割当も出来る。&lt;/p&gt;
&lt;h2&gt;codeanywhere とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codeanywhere.com/"&gt;codeanywhere&lt;/a&gt;は Web上でコードの編集や実行が出来るクラウドIDE。&lt;br&gt;
プロジェクトごとにコンテナが作成されランタイム等は自由にインストール出来る。&lt;br&gt;
ちなみにこの記事もcodeanywhereで作成から公開まで行っている。&lt;/p&gt;
&lt;p&gt;主な機能としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub, BitBucketからのコードの取得・編集&lt;/li&gt;
&lt;li&gt;コンテナ内での任意のコマンドの実行&lt;/li&gt;
&lt;li&gt;FTPアップロード&lt;/li&gt;
&lt;li&gt;SSH接続&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がある。今回はPython製ツールを使うのでコンテナのテンプレートにPythonを使いプロジェクトを作成してみる。&lt;/p&gt;
&lt;h2&gt;やってみる&lt;/h2&gt;
&lt;p&gt;まず&lt;a href="https://github.com/new"&gt;GitHub&lt;/a&gt;で「&lt;code&gt;&lt;a href="http://ユーザ名.github.io"&gt;ユーザ名.github.io&lt;/a&gt;&lt;/code&gt;」という名前で空のリポジトリを作る。
自分の場合GitHubユーザ名は&lt;code&gt;shufo&lt;/code&gt;なので&lt;code&gt;&lt;a href="http://shufo.github.io"&gt;shufo.github.io&lt;/a&gt;&lt;/code&gt;を作成。&lt;/p&gt;
&lt;p&gt;作成出来たらcodeanywhereの&lt;a href="https://codeanywhere.com/dashboard#project"&gt;プロジェクトページ&lt;/a&gt;から適当に新規プロジェクトを作成する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;先ほど作成したユーザ名.github.ioを選び、コンテナのテンプレートとしてpythonを選択する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nextボタンをクリックししばらく待つとプロジェクト編集画面が開きファイルを編集出来るようになるので&lt;br&gt;
左のファイルツリーからレポジトリ名を右クリックし「SSH Terminal」をクリックする。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ターミナルが開くのでPelicanのインストールをする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pelican Markdown mdx_linkify mdx_del_ins ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にサイトの初期化。設定するパラメータを色々質問されるので必要に応じてyまたはnを押して進める。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Please answer the following questions so this script can generate the files                                                                                                                                                                                                           
needed by Pelican.                                                                                                                                                                                                                                                                    


&amp;gt; Where do you want to create your new web site? [.]                                                                                                                                                                                                                                  
&amp;gt; What will be the title of this web site? test                                                                                                                                                                                                                                       
&amp;gt; Who will be the author of this web site? shufo                                                                                                                                                                                                                                      
&amp;gt; What will be the default language of this web site? [en] ja                                                                                                                                                                                                                         
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) y                                                                                                                                                                                                             
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://shufo.github.io                                                                                                                                                                                              
&amp;gt; Do you want to enable article pagination? (Y/n) y                                                                                                                                                                                                                                   
&amp;gt; How many articles per page do you want? [10]                                                                                                                                                                                                                                        
&amp;gt; What is your time zone? [Europe/Paris] Asia/Tokyo                                                                                                                                                                                                                                   
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y                                                                                                                                                                                           
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) y                                                                                                                                                                                   
&amp;gt; Do you want to upload your website using FTP? (y/N) n                                                                                                                                                                                                                               
&amp;gt; Do you want to upload your website using SSH? (y/N) n                                                                                                                                                                                                                               
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n                                                                                                                                                                                                                           
&amp;gt; Do you want to upload your website using S3? (y/N) n                                                                                                                                                                                                                                
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n                                                                                                                                                                                                             
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y                                                                                                                                                                                                                      
&amp;gt; Is this your personal page (username.github.io)? (y/N) y                                                                                                                                                                                                                            
Done. Your new project is available at /home/cabox/workspace
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初期化が完了したので記事を書いていく。&lt;code&gt;content&lt;/code&gt;ディレクトリ以下に拡張子を&lt;code&gt;.md&lt;/code&gt;で保存したファイルが記事の対象となる。
基本的な記事のフォーマットは以下の様になる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codeanywhere&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="err"&gt;でブラウザのみでブログ構築&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;site_building&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shufo&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codeanywhere&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="err"&gt;での非環境依存なブログ構築&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="err"&gt;とは&lt;/span&gt;
&lt;span class="err"&gt;以下本文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーマを適用。テーマは公式の&lt;a href="https://github.com/getpelican/pelican-themes"&gt;テーマ一覧&lt;/a&gt;から適当に。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir pelican-themes
git clone https://github.com/lucachr/pelican-mg.git pelican-themes/pelican-mg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelicanconf.pyを編集。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;#39;./pelican-themes/pelican-mg&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;記事の出力とサーバの起動を実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./develop_server.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;確認用のサーバURLは画面左のファイルツリーのリポジトリを右クリックし「Info」から表示出来る。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ファイルビューに環境情報が表示される。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere5.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先ほど起動したHTTPサーバはデフォルトで8000番でListenするので&lt;/p&gt;
&lt;p&gt;&lt;a href="http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com:8000"&gt;http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com:8000&lt;/a&gt; をブラウザで開いてみる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;確認出来た。&lt;/p&gt;
&lt;p&gt;記事に問題がなければ公開を実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このコマンドを実行すると&lt;code&gt;ghp-import&lt;/code&gt;で&lt;code&gt;output&lt;/code&gt;ディレクトリの内容が&lt;code&gt;master&lt;/code&gt;ブランチにコミットされ、同時に&lt;code&gt;master&lt;/code&gt;ブランチがGitHubへpushされ公開される。&lt;br&gt;
pushから反映までは10分ほど時間かかるのでしばらく待ち反映されたのを確認出来たら完了。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;PelicanとcodeanywhereとGitHub Pagesで意識低めのブログ構築をした。&lt;br&gt;
ローカルの環境に依存しないためいつでも気が向いたときに書けるというのがブログ作成に当たっては大きいメリットだと思う。&lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>マルチホストdocker環境でのBlueGreenなデプロイメント</title><link href="http://shufo.github.io/weave_swarm_compose.html" rel="alternate"></link><published>2015-03-19T13:00:00+09:00</published><updated>2015-03-19T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-03-19:weave_swarm_compose.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;dockerをそれなりに扱おうと思うと直面するのがマルチホスト環境でのdockerの構成。&lt;br&gt;
大抵シングルホストのプリミティブな環境では問題無かったL3/L4の扱い、IPアドレス、ポート等のメタデータのリソース管理が問題になってくる。&lt;br&gt;
前者に関しては、ルーティングコンテナ経由でのパケット交換、cgroup/namespaced、Open vSwtichなどでSDNを実装、 &lt;br&gt;
L3/L4を抽象化し仮想的に１つのネットワークとして扱えるようにすることで解決をしようという動きがある。
代表的なソリューションとしては&lt;a href="https://github.com/socketplane/socketplane"&gt;socketplane&lt;/a&gt;, &lt;a href="https://github.com/zettio/weave"&gt;weave&lt;/a&gt;, &lt;a href="https://github.com/jpetazzo/pipework"&gt;pipework&lt;/a&gt;, &lt;a href="https://github.com/coreos/flannel"&gt;flannel&lt;/a&gt;, Open vSwitch等のソリューションがある。  &lt;/p&gt;
&lt;p&gt;後者に関して分散Key Valueストアにコンテナのメタデータを登録し必要に応じてクラスタの構成情報を読み出す&lt;br&gt;
ことで解決しようとする動きがある。
代表的なソリューションとしては&lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt;、&lt;a href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt;、&lt;a href="http://zookeeper.apache.org/"&gt;zookeeper&lt;/a&gt;等がある。  &lt;/p&gt;
&lt;h2&gt;マルチホストdocker環境で辛いところ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;L3/L4管理&lt;/li&gt;
&lt;li&gt;コンテナの配置スケジューリング&lt;/li&gt;
&lt;li&gt;マルチホストでのメタデータ管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;L3/L4の自動管理&lt;/li&gt;
&lt;li&gt;スケジューリングの自動化&lt;/li&gt;
&lt;li&gt;コンテナライフサイクル管理の自動化&lt;/li&gt;
&lt;li&gt;configのdynamicな書き換え&lt;/li&gt;
&lt;li&gt;BlueGreenなデプロイメント&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やったこと&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;weave&lt;/code&gt;でホストごとに存在するdockerのプライベートネットワークをL3レベルで抽象化、複数のホストにまたがるdockerネットワークを一つのネットワークとして扱えるようにし、&lt;code&gt;Consul&lt;/code&gt;/&lt;code&gt;consul-template&lt;/code&gt;/&lt;code&gt;registrator&lt;/code&gt;でメタデータの管理/configの自動書き換え及びBlueGreenなクラスタの切り替え、またコンテナのスケジューリング/ライフサイクル管理に&lt;code&gt;docker-swarm&lt;/code&gt;/&lt;code&gt;docker-compose&lt;/code&gt;を使用しクラスタ全体を透過的に管理出来るようにした。&lt;br&gt;
それぞれの構成要素は単体で落ちても他の構成要素には影響しないものとし、ホスト障害があってもクラスタ全体としては可用性を存続出来るようにする。
なお前提として各構成要素は全てコンテナのためOSは便宜的に&lt;code&gt;CoreOS&lt;/code&gt;を使用しているがホストでdockerさえ動作すればどんな環境でも動作するようになっている。&lt;/p&gt;
&lt;h3&gt;構成イメージ&lt;/h3&gt;
&lt;p&gt;&lt;img alt="docker-weave-swarm" src="/images/docker-weave-swarm.gif" title="構成"&gt;&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; (Tested on 557.2.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; (Tested on 1.4.1)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zettio/weave"&gt;Weave&lt;/a&gt; (Tested on 0.9.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/swarm/"&gt;docker-swarm&lt;/a&gt; (Tested on 0.1.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/compose"&gt;docker-compose&lt;/a&gt; (Tested on 1.1.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt; (Tested on 0.5.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hashicorp/consul-template"&gt;Consul-template&lt;/a&gt; (Tested on 0.7.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gliderlabs/registrator"&gt;registrator&lt;/a&gt; (Tested on v5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Weave&lt;/h2&gt;
&lt;p&gt;dockerネットワークの抽象化には&lt;a href="https://github.com/zettio/weave"&gt;Weave&lt;/a&gt;を使う。&lt;br&gt;
Weaveは各ホストに存在するローカルなdockerネットワークを抽象化し、１つのネットワークとして扱うことを可能にする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/install-weave.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docker.service
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Install Weave
&lt;span class="nv"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://zettio.github.io/weave/
&lt;span class="nv"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docker.service

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;oneshot
&lt;span class="nv"&gt;RemainAfterExit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/wget -N -P /opt/bin &lt;span class="se"&gt;\&lt;/span&gt;
    https://raw.github.com/zettio/weave/master/weave 
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/chmod +x /opt/bin/weave
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/docker pull zettio/weave:latest
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/echo Wave Installed
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weave用ブリッジインターフェースUnitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/network/10-weave.network
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Match]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;weave*&lt;/span&gt;

&lt;span class="k"&gt;[Network]&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10.0.0.1/8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/network/10-weave.netdev
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[NetDev]&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;weave&lt;/span&gt;
&lt;span class="na"&gt;Kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weave service用Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/weave.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;install-weave.service&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Weave Network&lt;/span&gt;
&lt;span class="na"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://zettio.github.io/weave/&lt;/span&gt;
&lt;span class="na"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;install-weave.service&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/bin/weave launch&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/docker attach weave&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ネットワーク再起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart systemd-networkd
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weaveインストール・起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start install-weave.service
sudo systemctl start weave.service
sudo /opt/bin/weave create-bridge
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Docker&lt;/h2&gt;
&lt;p&gt;docker用の管理ポートを開ける。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/docker-tcp.socket
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Docker Socket for the API&lt;/span&gt;

&lt;span class="k"&gt;[Socket]&lt;/span&gt;
&lt;span class="na"&gt;ListenStream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2375&lt;/span&gt;
&lt;span class="na"&gt;BindIPv6Only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;both&lt;/span&gt;
&lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;docker.service&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sockets.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dockerのデフォルトブリッジをweaveし、dockerから透過的にweaveネットワークを扱えるようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /usr/lib/systemd/system/docker.service /etc/systemd/system/
sudo vim /etc/systemd/system/docker.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Environment=DOCKER_OPTS=&amp;#39;--bridge=weave --fixed-cidr=&amp;quot;10.0.0.0/8&amp;quot; --insecure-registry=&amp;quot;0.0.0.0/0&amp;quot;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;socketを起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl enable docker-tcp.socket
sudo systemctl stop docker
sudo systemctl start docker-tcp.socket
sudo systemctl start docker
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;適宜iptables等でListenする相手を制限。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Accept a manage node&lt;/span&gt;
sudo iptables -A INPUT -s 10.0.0.1 -m tcp -p tcp --dport &lt;span class="m"&gt;2375&lt;/span&gt; -j ACCEPT
&lt;span class="c1"&gt;# Drop other nodes&lt;/span&gt;
sudo iptables -A INPUT -s 0.0.0.0/0 -m tcp -p tcp --dport &lt;span class="m"&gt;2375&lt;/span&gt; -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参照: &lt;a href="https://coreos.com/docs/launching-containers/building/customizing-docker/"&gt;https://coreos.com/docs/launching-containers/building/customizing-docker/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Swarm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラスタIDを取得&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm swarm create
6856663cdefdec325839a4b7e1de38e8
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm agentを起動(各ノード)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name swarm_agent swarm join --addr=&amp;lt;node_ip:2375&amp;gt; token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm managerを起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name swarm_manager -p &amp;lt;swarm_port&amp;gt;:2375 swarm manage token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm swarm list token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;終了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker kill swarm_agent
docker kill swarm_manager
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実行ファイルをDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;docker-compose.ymlにコンテナの定義を書く&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir nodes
cd nodes
vim docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;consul&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--name consul -server -bootstrap -ui-dir /ui -data-dir ./data&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;progrium/consul:latest&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8300&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8400&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8500&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8600/udp&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_consul_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;net&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;registrator&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-internal consul://127.0.0.1:8500&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sttts/registrator:latest&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;volumes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/run/docker.sock:/tmp/docker.sock&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_registrator_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;net&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;haproxy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;shayashibara/docker-consul-template-haproxy&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_haproxy_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;consul:consul&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apache&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SERVICE_TAGS=production&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm経由でComposeを実行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose scale &lt;span class="nv"&gt;consul&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;registrator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;haproxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose ps
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Consul / consul-template&lt;/h2&gt;
&lt;p&gt;Consulでコンテナのメタデータを管理し、Consul-templateでHAProxy配下のbackendを切り替える。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shayashibara/docker-consul-template-haproxy&lt;/code&gt;で起動するhaproxy用のconsul-templateのテンプレート。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;global&lt;/span&gt;
&lt;span class="x"&gt;  log 127.0.0.1 local0&lt;/span&gt;
&lt;span class="x"&gt;  log 127.0.0.1 local1 notice&lt;/span&gt;
&lt;span class="x"&gt;  user haproxy&lt;/span&gt;
&lt;span class="x"&gt;  group haproxy&lt;/span&gt;

&lt;span class="x"&gt;defaults&lt;/span&gt;
&lt;span class="x"&gt;  log global&lt;/span&gt;
&lt;span class="x"&gt;  mode http&lt;/span&gt;
&lt;span class="x"&gt;  option httplog&lt;/span&gt;
&lt;span class="x"&gt;  option dontlognull&lt;/span&gt;
&lt;span class="x"&gt;  balance roundrobin&lt;/span&gt;
&lt;span class="x"&gt;  timeout connect 5000&lt;/span&gt;
&lt;span class="x"&gt;  timeout client 50000&lt;/span&gt;
&lt;span class="x"&gt;  timeout server 50000&lt;/span&gt;

&lt;span class="x"&gt;listen stats&lt;/span&gt;
&lt;span class="x"&gt;  bind *:8001&lt;/span&gt;
&lt;span class="x"&gt;  option httpclose&lt;/span&gt;
&lt;span class="x"&gt;  option forwardfor&lt;/span&gt;
&lt;span class="x"&gt;  stats enable&lt;/span&gt;
&lt;span class="x"&gt;  stats uri /haproxy?stats&lt;/span&gt;
&lt;span class="x"&gt;  stats auth admin:123123q&lt;/span&gt;
&lt;span class="x"&gt;  stats realm HAProxy\ Statistics&lt;/span&gt;

&lt;span class="x"&gt;frontend web-app&lt;/span&gt;
&lt;span class="x"&gt;  bind *:80&lt;/span&gt;
&lt;span class="x"&gt;  default_backend &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;backend/current&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;backend default&lt;/span&gt;
&lt;span class="x"&gt;  server s1 localhost:8080&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;services&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apache-80&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;byTag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;backend &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; balance roundrobin&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;services&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; server &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.ID&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.Address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.Port&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gmr/consulate"&gt;consulate&lt;/a&gt;(Consulのpythonクライアント)で現在のクラスタのタグをsetし切り替える。&lt;br&gt;
要件によるけど任意のタイミングでBlueGreenなクラスタの切り替えを行いたかったのでこのような構成にした。&lt;br&gt;
実作業に落としこむ場合はJenkins等で切り替えをタスク化しWebUIから操作することになると思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install consulate
consulate --api-host 172.17.42.1:8500 kv set backend/current production
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker exec -it nodes_haproxy_1 cat /etc/haproxy/haproxy.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;クラスタの終了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose &lt;span class="nb"&gt;kill&lt;/span&gt;
&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose rm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;マルチホストDocker環境でBlueGreenなデプロイを実現するためweaveでL3の抽象化とConsulによる分散Key-ValueストアでL3/L4リソースの管理、consul-templateで設定ファイルの動的書き換え、docker-swarm/composeによるコンテナのスケジューリング、ライフサイクル管理、BlueGreenなクラスタの切り替えを行った。&lt;br&gt;
構成要素は多いものの各要素は疎結合でそれぞれ代替可能なツールが多い(weaveはpipeworkやflannel、Consulはetcdやzookeeper、consul-templateはconfd等ある)ので、要件に応じて構成要素は変えることが出来る。&lt;br&gt;
dokkuやflynn、deis等のマイクロPaaSやCloud-FoundryやOpenShift等のフルスタックPaaSは単体で上記ツールチェインのほとんどの機能を備えている一方ロックインされやすいという面もあるため今回は既存の技術の組み合わせのみで構成した。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.docker.com/2015/03/dockers-2nd-birthday-wishes-qa-with-solomon-hykes-founder-of-docker/"&gt;Docker誕生から２年&lt;/a&gt;を迎え牧歌的なシングルホストでのdon't recommend in productionな状態からプロダクションでのマルチホスト環境を見据えたオーケストレーションツール群も大分整理統合されてきた感がある。&lt;br&gt;
依然レポジトリの扱いやセキュリティ面等、実運用面で辛い箇所は残るものの徐々にプロダクション環境での現実的な解が見えてきたように思える。今年はdocker in productionの飛躍の年になることを願いたい。&lt;/p&gt;
&lt;h3&gt;解決していない課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;プライベートなイメージの扱い&lt;br&gt;
  OSイメージ + アプリケーションでそれなりの容量になる。&lt;br&gt;
  また何をするにもdocker-registry専用のプロトコルが必要なためイメージの配信方法の選択肢が少ない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ログの扱い&lt;br&gt;
  各コンテナが生成するログをどこに送るか。またログ送信の冗長性の担保をどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ステートフルなコンテナの扱い&lt;br&gt;
  主にRedis, MySQL, PostgreSQLといった状態を持ったアプリケーションをどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;セキュリティ面&lt;br&gt;
  dockerデーモン自体の脆弱性、コンテナの脆弱性、ホストOSの脆弱性をどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;課題解決への布石&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;プライベートなイメージの扱い&lt;br&gt;
  レポジトリ自体の冗長化、容量コスト等考えると&lt;a href="http://quay.io/"&gt;quay.io&lt;/a&gt;, &lt;a href="https://cloud.google.com/tools/container-registry/"&gt;Google Container Registry&lt;/a&gt;等のRegistry as a Serviceという選択肢もある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ログの扱い&lt;br&gt;
&lt;a href="https://github.com/gliderlabs/logspout"&gt;logsoutput&lt;/a&gt;, journalctl, fluentd等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ステートフルなコンテナの扱い&lt;br&gt;
  ホスト側にマウント、data volume container、または&lt;a href="https://clusterhq.com/"&gt;flocker&lt;/a&gt;、そもそもDockerizeしない等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;セキュリティ面&lt;br&gt;
  Docker層だけで対応するのは難しいのでDockerを乗せるIaaSレベルでのコントロール。
  ホスト側をなるべく薄く保つという意味でCoreOSやAtomic host等のコンテナ向け軽量OSやCoreOSの自動アップデート機能を使う。  &lt;br&gt;
  またCoreOSによるコンテナ実装の&lt;a href="https://github.com/coreos/rocket"&gt;Rocket&lt;/a&gt;からのセキュリティ面でのフィードバックを今後期待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sttts.github.io/docker/weave/mesos/2015/01/22/weave.html"&gt;Adventures with Weave and Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/zERobYTe/items/dd9b2365c93da2638221"&gt;docker - ELB+Swarm+Compose+Consul+Registratorで夢は叶うのか(1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeeet.com/writing/2014/05/14/logspout/"&gt;logspoutでDockerコンテナのログの集約・ルーティング | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="weave"></category><category term="swarm"></category><category term="compose"></category><category term="consul"></category></entry><entry><title>Hello world</title><link href="http://shufo.github.io/hello-world.html" rel="alternate"></link><published>2015-01-09T13:00:00+09:00</published><updated>2015-01-09T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-01-09:hello-world.html</id><summary type="html">&lt;p&gt;DevとOpsを行ったり来たりしているウェブ系エンジニアのブログです。&lt;br&gt;
&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で生成した静的サイトを&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;でホスティングしています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="意識の高い画像" src="/images/71.jpg" title="意識の高い画像"&gt;&lt;/p&gt;
&lt;p&gt;※このブログでの発言は個人の見解であり、所属する組織の公式の見解ではありません。&lt;/p&gt;</summary><category term="about"></category></entry></feed>