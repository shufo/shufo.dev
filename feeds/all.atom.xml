<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>shufo blog</title><link href="https://shufo.github.io/" rel="alternate"></link><link href="https://shufo.github.io/feeds/all.atom.xml" rel="self"></link><id>https://shufo.github.io/</id><updated>2019-01-26T00:00:00+09:00</updated><entry><title>Elixirにまつわる3つの神話</title><link href="https://shufo.github.io/elixir-myth.html" rel="alternate"></link><published>2019-01-26T00:00:00+09:00</published><updated>2019-01-26T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2019-01-26:/elixir-myth.html</id><summary type="html"></summary><content type="html">&lt;p&gt;ある言語を評価するとき伝聞で聞いた情報であの言語は ○○ だという評価をよくしてしまいがちだ。&lt;/p&gt;
&lt;p&gt;Elixir も他言語の例に漏れず、○○ 言語は ○○ だという言語神話がよく振りかざされるので一使用者の立場から誤解を恐れずその神話を解いてみたい&lt;/p&gt;
&lt;h3&gt;学習コストが高い&lt;/h3&gt;
&lt;p&gt;Elixir は学習コストがかかるという誤解をされることがある。&lt;/p&gt;
&lt;p&gt;おそらく、Elixir = 関数型 = なんか難しい概念出てきそうという発想だろう。その気持ちはよくわかる。だがちょっとまって欲しい。Elixir はとても覚えることの少ない言語だ。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@richardeng/how-to-measure-programming-language-complexity-afe4f7e75786"&gt;How to Measure Programming Language Complexity – Richard Kenneth Eng – Medium&lt;/a&gt; (どのようにプログラミング言語の複雑性を計測するか)&lt;/p&gt;
&lt;p&gt;上記の記事で Richard 氏が各プログラミング言語のキーワードと予約語を数えたところ Elixir は &lt;strong&gt;18&lt;/strong&gt; 個で Smalltalk に次いで最も予約語の少ない言語だった。&lt;/p&gt;
&lt;p&gt;シンプルさを哲学とする Golang でさえ 25 個、PHP では 67 個で約 4 倍もののキーワードが存在する。&lt;/p&gt;
&lt;p&gt;キーワードや予約語はプログラミングにおいて特別な意味を持っており、その文字によって予約語以外の文字と区別されるため学習する際にはほぼ覚えることが必須だ。&lt;/p&gt;
&lt;p&gt;もちろん予約語やキーワードの少なさだけで言語の複雑性が一意的に決まる訳ではないのでここではそれ以上踏み込まないが、究極的に覚えないといけないトークンの少なさはその言語がどういう言語でありたいかという思想を表している。&lt;/p&gt;
&lt;p&gt;後にも述べるが Elixir はマクロを使うことで制御構造でさえ変更可能な柔軟性がありつつも、究極的に覚えなければいけないのはこの 18 個の予約語だけというシンプルさを手にしている。&lt;/p&gt;
&lt;p&gt;要は Elixir は言語それ自体のコアはシンプルでありつつも高い拡張性を指向した言語であり、同時に出来るだけ初心者がとっつきやすい (easy な） 言語でありたいという思想をもった言語であるということだ。&lt;/p&gt;
&lt;p&gt;Smalltalk がハガキ一枚に収まる文法しか無いのと同様 Elixir もコア自体は恐らくハガキの表面と裏面で足りる程度の文法しかないだろう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://imgur.com/BUf4nbo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;だが時に過剰なシンプルさは現実の複雑な問題を解くためには大量の boilerplate を必要とするためある程度の抽象度は必要だ。それこそシンプルでさえよければアセンブリ言語で書けばいいだろうがそれは現実的ではない。そのために高級言語が存在する。&lt;/p&gt;
&lt;p&gt;Rich Hickey が &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made Easy&lt;/a&gt; のスライドで語ったように Simple である場合と Easy である場合では以下のような出力の違いが出る。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/T9TVQIA.png" style="width: 70%"&gt;&lt;/p&gt;
&lt;p&gt;Easy であるものは当初はスピードが出るものの時が経つにつれて段々と出力が落ち、逆に Simple であるものは当初は出力が出ないものの時が経つにつれて組み合わせの力で出力が増すということだ。&lt;/p&gt;
&lt;p&gt;プログラミング言語の歴史はこの Easy さと Simple さへの反省の繰り返しで漸進的に進化してきた。&lt;/p&gt;
&lt;p&gt;Elixir は Easy であることにも慎重に配慮されており、Ruby 系列の認知容易性の高い文法、REPL、ビルトインの mix を中心としたエコシステムが優れた開発体験を提供してくれる。&lt;/p&gt;
&lt;p&gt;Easy というのは時にバイアスになり、Simple でないことを隠蔽してしまうため一見して Easy というものにも注意は必要だが、 Elixir は言語のコアは Simple でありつつ表面上は Easy であるため、比較的最初から高い生産性を維持していくことが出来る。図にすると以下のような感じだ。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/UvY0dPN.png" style="width: 70%"&gt;&lt;/p&gt;
&lt;p&gt;実際に自分が人に Elixir を教えた経験では他言語業務経験者なら 2 週間ほど、業務未経験者でも 1 ヶ月程でもう立派な Elixir のコードを書けるようになったことを覚えている。&lt;/p&gt;
&lt;p&gt;自分が Elixir のことを気に入っているのは結局のところこういったバランス感覚であり、Simple 極振りでもないけどかといって Easy に寄りすぎてもいないとかそういうところだと思う。要するにトレードオフなのだけれど、不確実なプロジェクトに対していきなり Simple 極振りも出来ない、かといって Easy にも寄り過ぎたくないというところでプラグマティックな選択肢としての Elixir が現れる。&lt;/p&gt;
&lt;h3&gt;Erlang のラッパー&lt;/h3&gt;
&lt;p&gt;Elixir って Erlang のラッパーでしょ？という言説をたまに目にする。念頭にあるのは CoffeeScript のようなシンタックスシュガーなものかもしれない。だがこれは間違いだ。&lt;/p&gt;
&lt;p&gt;どちらかというと Ruby の薄皮をかぶった BEAM ベースの Lisp と言っていいかもしれない。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;ElixirってほとんどLispです。Lispの柔軟性を損なわずにアルゴル系のシンタックスです。Elixirには高速WEBを満足する並列処理と言う大義名分があります。大っぴらにElixirを使うことができます。これはLisp使いの夢の実現ではないのかなぁ。&lt;/p&gt;&amp;mdash; LAL(Light AI Lab) (@LAL6809) &lt;a href="https://twitter.com/LAL6809/status/1081165168950665216?ref_src=twsrc%5Etfw"&gt;2019年1月4日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Lisp がマクロで多くのことを実現するように Elixir もマクロによって多くのことを実現している。&lt;/p&gt;
&lt;p&gt;例えば Elixir には&lt;code&gt;defmacro/2&lt;/code&gt;というマクロを作成するマクロがあるがこれも実は defmacro で定義されている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmacro&lt;/span&gt; &lt;span class="kd"&gt;defmacro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;\\&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:defmacro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;__CALLER__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;じゃあ defmacro を定義する defmacro はどこで定義されているんだよとなるがこれは言語の bootstrap 時に定義されている。&lt;/p&gt;
&lt;p&gt;このように Elixir ではコア機能の多くを Lisp のようにマクロで実現することでコア自体はマイクロでありつつも言語自体の大きな拡張性を手にしている。&lt;/p&gt;
&lt;p&gt;単純にラッパーと言いきれないのはこういった拡張性で、Erlang に一対一で対応すること以上のことが拡張性で可能になっている。&lt;/p&gt;
&lt;p&gt;しかしマクロは言語構造さえ動的に変えられるほど強力な反面一歩間違えば怪我をする諸刃の剣だ。&lt;/p&gt;
&lt;p&gt;Elixir がうまいのはプログラマにマクロを使っているということをほとんど意識させない点で、&lt;code&gt;def&lt;/code&gt;のような基本的な文法でさえマクロなのに公式サイトのイントロダクションでは一切その説明は出てこない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmacro&lt;/span&gt; &lt;span class="kd"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;\\&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:def&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;__CALLER__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のような簡単な Hello world でさえ&lt;code&gt;defmodule&lt;/code&gt;と&lt;code&gt;def&lt;/code&gt;というマクロを使っている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一見 Ruby 寄りの命令型言語のように見えてバックは Erlang を由来とする BEAM ベースの非純粋関数型言語であり Lisp 並にマクロをフル活用している。Ruby のように見えるのは本当に表層的な部分だけで、内実は BEAM のゴリゴリの並行システムと Ruby も影響を受けた Lisp 並の高い拡張性が同居している。&lt;/p&gt;
&lt;p&gt;この拡張性により特定のドメインに囚われない、目的に合わせた幅広い利用が可能になっている。例えば &lt;a href="https://github.com/nerves-project/nerves"&gt;Nerves&lt;/a&gt; によるIoT組み込みプロジェクトから、&lt;a href="https://lonestarelixir.com/2019/speakers/21"&gt;GPGPUによる並列科学計算&lt;/a&gt;、もちろん Erlang の性能を活かした稼働率99.9999999%の高可用性システム、&lt;a href="https://medium.com/margobank/why-elixir-546427542c"&gt;銀行システム&lt;/a&gt;、&lt;a href="https://github.com/omisego/ewallet"&gt;仮想通貨&lt;/a&gt;、メディアサーバ、&lt;a href="https://blog.discordapp.com/scaling-elixir-f9b8e1e7c29b"&gt;Discordの同時500万接続を支える&lt;/a&gt;シグナリングサーバなどなど。&lt;/p&gt;
&lt;p&gt;Elixir の&lt;a href="https://elixir-lang.org/blog/2013/08/08/elixir-design-goals/"&gt;デザインゴール&lt;/a&gt;にも掲げられているが Ruby 的文法はあくまで作者が Ruby 出身ということで追加されたプロダクトとしてのデザインで言語デザイン上のゴールではない。&lt;/p&gt;
&lt;p&gt;あくまで言語としてのゴールは Erlang との互換性、そしてここがただのラッパーではないものになっている理由だが、マクロシステムをベースとした高い拡張性と生産性だ。&lt;/p&gt;
&lt;h3&gt;Erlang の知識が必要&lt;/h3&gt;
&lt;p&gt;Elixir は &lt;a href="https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine)"&gt;BEAM&lt;/a&gt; 上で作られているので Erlang の知識が必要というような言説を見ることがある。&lt;/p&gt;
&lt;p&gt;これは半分合っているが、半分間違っていると言っていいかもしれない。&lt;/p&gt;
&lt;p&gt;ここで Erlang の知識といっているのは OTP や Erlang 特有の知識のことで関数名や Erlang の文法などのことだ。&lt;/p&gt;
&lt;p&gt;半分合っているというのは実際自分は 3 年程 Elixir を使っているが OTP の知識が必要になったのはライブラリを作る時や、ロングランニングプロセスで定期的なタスクを実行するプロセスを作るなどした時くらいだ。&lt;/p&gt;
&lt;p&gt;Erlang は Elixir が依って立つ偉大な巨人だがその実態は慎重に抽象化されている。&lt;/p&gt;
&lt;p&gt;gen_server などの behaviour は Agent モジュールで抽象化出来るし、一時的に別プロセスが欲しくなったら Task モジュールを使うことが出来る。GenStage などのbehaviourも &lt;a href="https://qiita.com/shufo/items/59d1c3b0baac6751777f"&gt;Flow&lt;/a&gt; で抽象化出来る。&lt;/p&gt;
&lt;p&gt;あくまで BEAM 上で動作する軽量プロセスという概念は知る必要はあるが、そのプロセス同士がどのように連携するかまでは普通に使っているうちではあまり知る必要はないように抽象化したライブラリが充実しているといった方が正確か。&lt;/p&gt;
&lt;p&gt;もちろん作りたいものが何になるかにもよるがおそらく Elixir で最もユースケースの多い Phoenix をベースにした Web 周りの領域では踏み込まない限りは Erlang の知識が必要になることはあまりない。&lt;/p&gt;
&lt;p&gt;ただ Elixir が内実としてプロセス同士のメッセージングパッシングで動いていることを知ると実際の動作がイメージしやすい。言語としてのゴールは Erlang との互換性を保ちつつ並行システムを別のツールセットとして組むことなので学習するとしてもまずは別のツールセットとしての Elixir を学んでから Erlang を学ぶことをおすすめしたい。&lt;/p&gt;</content><category term="Programming"></category><category term="Elixir"></category></entry><entry><title>仕事用 PC を Linux デスクトップにしてから 2 年経ってよかったと思う点 3 つ</title><link href="https://shufo.github.io/linux-desktop-after-2-years.html" rel="alternate"></link><published>2019-01-05T00:00:00+09:00</published><updated>2019-01-05T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2019-01-05:/linux-desktop-after-2-years.html</id><summary type="html">&lt;p&gt;Linux デスクトップにしてから 2 年程経ったので&lt;/p&gt;</summary><content type="html">&lt;p&gt;というわけで仕事用の PC を Linux デスクトップにしてから 2 年程経ったので改めてその感想などを書いてみる&lt;/p&gt;
&lt;p&gt;ちなみに OS は&lt;a href="https://elementary.io/"&gt;elementary OS&lt;/a&gt;を入れている&lt;/p&gt;
&lt;h3&gt;elementary OS&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="DbKiPNf"&gt;&lt;a href="//imgur.com/DbKiPNf"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;elementary OS は Ubuntu ベースのディストリビューションで最近&lt;a href="https://distrowatch.com/"&gt;DistroWatch&lt;/a&gt;でも Linux Mint に次いで人気のディストリビューションになっている&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="DLIE28m"&gt;&lt;a href="//imgur.com/DLIE28m"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;elementary OS を一言で説明すると名前の通り elementary（初心者）向けの OS だ&lt;/p&gt;
&lt;p&gt;というのは elementary OS の設計思想はどちらかというと Mac に近く、デフォルトでカスタマイズ出来る余地が少なくなっているのだ。Linux で最初にやることといったらデスクトップ環境を KDE や Gnome から選んで〜みたいなこともなく Pantheon という elementary OS のために設計されたデスクトップ環境の元で一貫した UI が提供される。&lt;/p&gt;
&lt;p&gt;Mac が割と万人におすすめ出来るのはそういった選択の余地の少なさで、アフォーダンスを限定することで説明しなくても誰でも使える点だ。iOS も同じ思想で老人でも子供でも初見で使えるようになっている（最近は怪しいけど）&lt;/p&gt;
&lt;p&gt;elementary OS でも同様にユーザに見せる UI を慎重に選んでいる。プログラミングにも通じることだけど、ユーザに見せる API のインターフェースをいかにシンプルにして複雑なバックグラウンドを隠蔽するかは良いソフトウェアを書くためには欠かせない点だ。 UI もソフトウェアと同じくインターフェースをいかに洗練させるかが使い安さに直結するということを(Linux ディストリ界隈では珍しく)作者はよく分かっている。&lt;/p&gt;
&lt;p&gt;ちゃんと情報を見たいとなると CUI を使わないといけない辺り Mac に影響をかなり受けているように思われる。逆に突っ込んだことをしなければほとんど GUI で完結するので普段使いにもおすすめ出来る。（実際普段使い用の PC にも入れて使っているが特に問題ない）&lt;/p&gt;
&lt;p&gt;ちなみに初心者向けといってもベースは Ubuntu LTS で apt コマンドもちゃんと使えるので上級者が使っても全然問題ない&lt;/p&gt;
&lt;p&gt;前置きが長くなってしまったが以下の 3 つの点が主によかった&lt;/p&gt;
&lt;h2&gt;よかった点&lt;/h2&gt;
&lt;h3&gt;Docker をネイティブで使える&lt;/h3&gt;
&lt;p&gt;Docker をネイティブで使えるという点については自分がサーバ周りのエンジニアということもありとても重要。
実際本番環境で動かすコンテナ環境なども Linux OS ベースのためローカルと本番で動作原理が異なることがないというのは大きい。もちろん CI を噛ました上でというのはあるがそれでも CI 環境とローカル環境で動作が同じ OS を使えるので、OS の違いで変なハマり方をするというのがとても少なくなった。&lt;/p&gt;
&lt;h3&gt;環境構築が楽&lt;/h3&gt;
&lt;p&gt;環境構築という点でもソフトウェアエンジニアにとってはメリットが大きい。
日々色々なツールを評価したり作ったりする中でインストール方法や Usage などは Linux 向けに書かれていることが多い。
Mac や Windows 向けのインストール方法が書かれていることもあるがやはり実際に本番環境などで動かすのはほぼ Linux 環境である以上まず Linux 向けのインストール方法は動いて Mac や Windows 向けのインストール方法がメンテされていなくて動かない、という事も少なくない。&lt;/p&gt;
&lt;p&gt;Windows で一時期ちゃんと&lt;a href="https://qiita.com/shufo/items/355514ba4177bc8ab335"&gt;開発環境を構築していた&lt;/a&gt;こともあったけど、本気で使うにはそれなりの努力が必要なのとやはり WSL や POSIX 環境がどうしても一枚層を噛ましている結果ネイティブの Linux に比べてファイルシステムが絡む操作の動作が遅いのが辛かった&lt;/p&gt;
&lt;h3&gt;GNU コマンドが使える&lt;/h3&gt;
&lt;p&gt;Mac の場合 GNU コマンドを入れることも出来るがデフォルトで入っているのは BSD 版のコマンドなので &lt;code&gt;tar&lt;/code&gt; コマンドや &lt;code&gt;sed&lt;/code&gt; コマンドなど微妙にオプションが GNU 版と異なる&lt;/p&gt;
&lt;p&gt;困るのがローカルでこのコマンドで問題ないな！とか思って本番環境で実行するとオプションが異なって実行出来ないみたいなことが起こる。大抵はエラーになるだろうけど Bash スクリプトなど途中でコマンドを挟んで意図したとおりのコマンドが実行されなかったりすると心臓が止まる。&lt;/p&gt;
&lt;p&gt;Linux デスクトップではローカルで動作するなら本番でも大体動作するという再現性がある程度保証出来るので精神衛生的にもよい。&lt;/p&gt;
&lt;h2&gt;困った点&lt;/h2&gt;
&lt;p&gt;逆に Linux を使う上で困った点を挙げてみる&lt;/p&gt;
&lt;h3&gt;GUI の MySQL クライアントの定番がない&lt;/h3&gt;
&lt;p&gt;これを使っておけば OK というような GUI クライアントがあまりない。
無いなら作るというのが Linux コミュニティにおける基本態度なので文句はあまり言えないが…
Windows なら HeidiSQL、Mac なら SequelPro といった定番クライアントがない。&lt;/p&gt;
&lt;p&gt;なので Wine を入れて HeidiSQL を動かしている。そこそこまともに動いているがたまにコネクションが途切れてフリーズしたりやはりネイティブでの動作に比べて少しもっさりするのが残念。
CUI で操作しろということだと思うけど常に CUI だと疲れてる時のオペミスが怖い（UPDATE 文で WHERE 忘れたりとか）のでオペミス防止であえて GUI 使ってるとこもあるのでここは重要。&lt;/p&gt;
&lt;p&gt;※ 2019-01-26追記&lt;/p&gt;
&lt;p&gt;しばらく&lt;a href="https://dbeaver.com"&gt;DBeaver&lt;/a&gt;がメモリリークバグでまともに使えなかったが修正したら普通に使えるようになったので今ではDBeaverをメインで使っている&lt;/p&gt;
&lt;p&gt;2019-01-26現在現在最新のDBeaverをelementary OSで動かすにはdbeaver.iniでGTKのバージョンを直接指定する行を先頭に足す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vim /usr/share/dbeaver/dbeaver.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下の2行を先頭に足す&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--launcher.GTK_version 
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最終的にこんな感じになる&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ini:dbeaver.ini
--launcher.GTK_version 
2
-startup
plugins/org.eclipse.equinox.launcher_1.5.100.v20180827-1352.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.800.v20180827-1352
-vmargs
-XX:+IgnoreUnrecognizedVMOptions
--add-modules=ALL-SYSTEM
-Xms64m
-Xmx1024m&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Office がない&lt;/h3&gt;
&lt;p&gt;めったに使わないけど官公庁系のデータを見たい時とか xls 形式でしか配布してないとかたまーにある。
そういう時や Windows でしかどうしても使えないソフトがある場合は Windows をインストールしてある PC へ &lt;a href="https://symless.com/synergy"&gt;Synergy&lt;/a&gt; で繋いでいつでも操作出来るようにしている。Synergy は神。&lt;/p&gt;
&lt;h3&gt;サポートされていないアプリがある&lt;/h3&gt;
&lt;p&gt;例えば &lt;a href="https://zoom.us/"&gt;Zoom&lt;/a&gt; など Linux 版だけ少し開発が遅く、Windows で使える機能を使えないなどやはりサポートが弱いということがある&lt;/p&gt;
&lt;p&gt;Electron ベースのアプリ（Slack, VSCode など）は基本的にクロスプラットフォームで動作に変わりはないけれどそれぞれのプラットフォームのネイティブ API をディープに使うようなアプリだとクロスプラットフォームも難しいのでやはりまだ厳しい点はあるのかなという印象&lt;/p&gt;
&lt;p&gt;結局普段どのように開発しているかというと Windows PC と Linux デスクトップをそれぞれ隣り合わせたディスプレイに別々に画面出力し &lt;a href="https://symless.com/synergy"&gt;Synergy&lt;/a&gt; でシームレスに OS を跨いで操作出来るようにして、Linux で出来ないことや Windows の方が早い時は Windows で操作したり逆に Linux の方が早い時は Linux で操作したり補い合うことでそれぞれ苦手なところを補完している。&lt;/p&gt;
&lt;p&gt;ちなみに Linux デスクトップ用のディスプレイは &lt;a href="https://www.philips.com.ph/c-p/BDM4350UC_00/brilliance-4k-ultra-hd-lcd-display"&gt;Philips の 42 インチモニタ&lt;/a&gt; 1 枚でデュアルモニタにする必要をなくしている。elementary OS は HiDPI 環境でも割とまともに動く部類なので特に凝った設定も必要なかった。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;デスクトップ Linux にして良かった点と困った点を見てみた&lt;/p&gt;
&lt;p&gt;現状ではまだ足りない点もあるけどサーバ系エンジニアにとっては少なくともやる価値は十分あるというのが現時点での感想だ&lt;/p&gt;
&lt;p&gt;ネイティブアプリ開発とかフロント開発とかなら正直 Mac で足りるかなという気もするけど今の Mac が気に入らないとか新しい環境を試してみたいなら脱出するいいタイミングだと思う。OS のアップデートに煩わされることが少なくなる。(無いとはいっていない)&lt;/p&gt;
&lt;p&gt;それぞれの OS の苦手な点を補えるように Windows もしくは Mac も用意して &lt;a href="https://symless.com/synergy"&gt;Synergy&lt;/a&gt; などのインプットデバイス共有ツールで適宜 OS を使い分けるという方法が Linux デスクトップを使う上ではベストかもしれない&lt;/p&gt;</content><category term="Linux"></category></entry><entry><title>Nuxt.js で作る Web ベースの Elixir Logger バックエンド</title><link href="https://shufo.github.io/build-web-based-elixir-logger-backend-with-nuxtjs.html" rel="alternate"></link><published>2018-11-15T00:00:00+09:00</published><updated>2018-11-15T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-11-15:/build-web-based-elixir-logger-backend-with-nuxtjs.html</id><summary type="html">&lt;p&gt;Nuxt.js で Web ベースの SPA な Elixir の Logger バックエンドを作った&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nuxt.js で Web ベースの SPA な Elixir の Logger バックエンドを作った&lt;/p&gt;
&lt;p&gt;GitHub: &lt;a href="https://github.com/shufo/log_viewer"&gt;Log Viewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="WPAhlCS - Imgur.png" src="https://qiita-image-store.s3.amazonaws.com/0/47983/671695d3-0a82-b11d-76a3-c2061856e9b2.png"&gt;&lt;/p&gt;
&lt;p&gt;使用した技術としては &lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt;, Websocket, Cowboy, Logger, &lt;a href="https://vuetifyjs.com/ja/"&gt;Vuetify.js&lt;/a&gt;, &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; など&lt;/p&gt;
&lt;p&gt;簡単に説明するとこの Logger backend は Web 上に リアルタイムに Elixir のログを表示してくれる&lt;/p&gt;
&lt;p&gt;なぜ Web にログを表示したいのか？という疑問ももっともだがまずそういうライブラリがなかったから作ったという以上の理由は今のところ正直特に無い。無ければ作る！それまでの話よ！（格言）&lt;/p&gt;
&lt;p&gt;機能としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;検索ワード ＆ Log レベルでログのフィルタリング&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;メタデータの表示によりログを仕込んだ場所や他 PID などのメタ情報の確認&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax Highlighted されたログ&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などがある&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" src="https://i.imgur.com/0qj93i4.gif"&gt;&lt;/p&gt;
&lt;p&gt;利用用途としては主にローカルでのログの確認やリモートの開発環境のログ確認だが、やろうと思えばちょっとした本番環境のログの確認も出来るだろう。
ただし Web ベースのためそれなりにリアルタイムでのレンダリングは重くなってしまうため、ログ流量の多い環境での利用はおすすめしない。
またこのライブラリに認証の仕組み自体はないためリモート環境で使用する際は別途 &lt;a href="https://github.com/ueberauth/guardian"&gt;guardian&lt;/a&gt;, &lt;a href="https://github.com/ueberauth/ueberauth"&gt;ueberauth&lt;/a&gt; などでルートに認証をかけることが必要になるだろう。&lt;/p&gt;
&lt;p&gt;以降ではこのライブラリを作る際に使った技術などについて所感やなぜそれを使ったかなどについて触れてみる&lt;/p&gt;
&lt;h3&gt;Nuxt.js&lt;/h3&gt;
&lt;p&gt;Nuxt.js は今回初めて使ったが開発体験としてはとてもよかった&lt;/p&gt;
&lt;p&gt;まず使ってすぐ分かるメリットとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小中規模 Vue.js のベストプラクティス構成&lt;/li&gt;
&lt;li&gt;設計で迷いが出にくい&lt;/li&gt;
&lt;li&gt;ドキュメントがしっかり書かれている&lt;/li&gt;
&lt;li&gt;サブモジュールがオプトイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というようなところがある。&lt;/p&gt;
&lt;p&gt;Vue.js は最小でペラ一の HTML に埋め込むことも、 SPA + SSR でサイト全体を構成するようなそれなりの規模の構成も可能なため設計の自由度は高いのだがその分強制力がなく、自由に設計すると一貫性のないコードになってしまうという問題があった。
そこで Nuxt が Vue.js のフレームワークとして規約を提供してくれたおかげで統一された設計のもとプロジェクトをスケールすることが出来るようになった&lt;/p&gt;
&lt;p&gt;正直そこまで規模が大きくなければプレーン Vue.js でも問題ないとはいえるが、これは後付けになるがそれでもなぜ Nuxt がよかったのかというと、Vuex や Vue-router が&lt;strong&gt;オプトイン&lt;/strong&gt;として組み込まれていることが大きかった。&lt;/p&gt;
&lt;p&gt;自分は最初この SPA のアプリを作った際まず Vuex や Vue-router の使い方を知らなかった。
が、特に問題なく状態管理が必要になれるレベルまで作りこめていけたのは Vuex などがあくまでオプトインで必要に応じて使えるようになっていたからであり、Vuex に関する&lt;strong&gt;ドメイン知識を必要としなかった&lt;/strong&gt;ためである。&lt;/p&gt;
&lt;p&gt;まず PoC をする段階で Vuex の使用が必須であれば挫折したかもしれないが、PoC の段階では状態を全て直接.vue ファイルに保持していた。
そのおかげで Vuex に状態を dispatch せずに PoC に集中することが出来た。&lt;/p&gt;
&lt;p&gt;その上で理論的に全て動作することが確証出来た段階で改めて状態ストアの Vuex で状態を一元的に Immutable に管理することでアプリを堅牢化することが出来た。&lt;/p&gt;
&lt;p&gt;この小さく作って育てるという流れはまさに Vue.js 作者の Evan You が提唱するところの &lt;a href="https://qiita.com/mikakane/items/3bd6af69259f5af6fecb"&gt;&lt;strong&gt;Progressive Framework&lt;/strong&gt;&lt;/a&gt; でありオーナーの異なる Nuxt.js でも Progressive Framework の思想が実現されていることに Evan You のコミュニティ運営の手腕を見た気がする。&lt;/p&gt;
&lt;p&gt;Vue.js エコシステムが優れているのはエコシステム全体で Evan You の思想を実現するようサポートされていることであり、こういったエコシステムは React とはまた少し違う文化でどちらかというと PHP 的な文化であると個人的には思った。&lt;/p&gt;
&lt;p&gt;PHP は元々プログラミング言語としてというよりは単なるスクリプトとして生まれ、HTML の中に直接埋め込めるという形になり、更にオブジェクト指向が強化され現在の形に至るが、そういった最初からビッグバンで完璧な秩序が出来上がるというよりかは時代とそのニーズに合わせて言語自体が成長するという歴史に Progressive Framework である Vue.js と近いものを感じる。&lt;/p&gt;
&lt;p&gt;Vue.js もテンプレート言語のように最初は一枚の .vue ファイルの中にスクリプト、テンプレート、スタイルを定義してスコープを完結することが出来る。当然最初のうちはこれで問題がなくてもプロジェクトが成長するにつれて状態を一元的に管理するストアが欲しくなり、再利用可能な部品でコンポーネント化が進むが、この過程が PHP の歴史との親和性を感じた。&lt;/p&gt;
&lt;p&gt;Laravel が Vue.js を&lt;a href="https://github.com/laravel/laravel/blob/de1f472d767236713870e424a87bcf2ab4ca80cf/package.json#L20"&gt;採用している&lt;/a&gt;のも偶然ではないかもしれない。&lt;/p&gt;
&lt;h3&gt;Custom Logger backend and Websocket (Cowboy)&lt;/h3&gt;
&lt;p&gt;Elixir は標準で&lt;code&gt;Logger&lt;/code&gt;というロギング用のモジュールがあり、これにカスタムのロギングモジュールを提供することで&lt;code&gt;Logger.info("foo")&lt;/code&gt;などでログを出す際、任意の処理を hook することが出来る&lt;/p&gt;
&lt;p&gt;そこで今回は Web にログを出力するために Websocket 経由でログを送信するカスタムの Logger backend を&lt;a href="https://github.com/shufo/log_viewer/blob/master/lib/log_viewer/logger.ex"&gt;作成した&lt;/a&gt;。
仕組みとしてはページを表示したクライアントへサーバより Websocket 経由でログを送るという簡単なものだ。&lt;/p&gt;
&lt;p&gt;なぜ Websocket 経由にしたかというと、ログファイルを直接読み取る方法もあるが、近年のソフトウェア開発環境ではコンテナベースで開発することも多くログは標準出力に出力するだけでファイルとして状態を保持しないことも多いため、ブラウザを持つクライアントならどこからでも表示可能にするためこの方法にした。&lt;/p&gt;
&lt;p&gt;Websocket の実装には&lt;a href="https://github.com/ninenines/cowboy"&gt;Cowboy&lt;/a&gt;のビルトイン Websocket サーバを使用。&lt;/p&gt;
&lt;p&gt;詳しい実装方法については以下に記事を書いた。&lt;/p&gt;
&lt;p&gt;参照: &lt;a href="https://qiita.com/shufo/items/6ad1c2d51bca5a2e5f49"&gt;Elixir で Phoenix を使わずに Websocket サーバの実装 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Vuetify, Chart.js&lt;/h3&gt;
&lt;p&gt;UI については当初 bootstrap を検討していたが、&lt;a href="https://github.com/nuxt-community/awesome-nuxt"&gt;awesome-nuxt&lt;/a&gt;を眺めていたところ、Official プロジェクトの中に &lt;a href="https://vuetifyjs.com/ja/"&gt;Vuetify&lt;/a&gt; を発見し、Material デザインが可能ということで検討リストに加えてみた。&lt;a href="https://github.com/jgthms/bulma"&gt;Bulma&lt;/a&gt; も検討していたがこの中では Vuetify がもっともアプリらしいアプリのデザインになることと、どちらかというと融通の効く bootstrap や Bulma のスタイルを使うよりかはユーザ知識の再利用が可能な Material デザインの方が機能性を求められるログビューワとしての UX としては優れているだろうという判断で Vuetify にした。&lt;/p&gt;
&lt;p&gt;結果としては Material デザインなのでほぼスタイルのカスタムの余地はなくブロックの組み合わせでアプリを構築していく形になるのだが、既にユーザが Google 周りのサービスを使う上で学習した知識を再利用出来るので操作に迷うということは少なくなったかと思う。&lt;/p&gt;
&lt;p&gt;逆にオリジナルのスタイルを適用したいとなるとマテリアルデザインの思想からは外れるので別の方法を検討した方がいいかもしれないが、管理画面やコンソールなど機能性を求められる箇所に関してはとても用途に合ってると思う。&lt;/p&gt;
&lt;p&gt;プラス α 要素で Chart.js でログの量をリアルタイムにチャートに反映させるということもやってみたが、Vue.js のコンポーネントシステムがよく出来ているため、グラフに関する状態をコンポーネント内に分離した上で安全に扱えた。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;それぞれ利用した技術について簡単に触れてみた。
Vue.js は以前から軽く触れていたため今回 Nuxt は正直評価してみたい半分で使ってみたが結果としては収穫があってよかった。&lt;/p&gt;
&lt;p&gt;最初からその技術を目的として調査すると挫折しやすいけどライブラリ開発ドリブンで必要性に応じて理解を深めるのが学習の最短の手順だなと改めて思った。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;今回使用した環境は以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elixir 1.7&lt;/li&gt;
&lt;li&gt;Vue.js 2.5.17&lt;/li&gt;
&lt;li&gt;Nuxt.js 2.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shufo/log_viewer"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Elixir"></category><category term="Nuxt.js"></category></entry><entry><title>Electron + TypeScript + Vue.js でソーシャルメディアデトックスアプリを作ってみた</title><link href="https://shufo.github.io/built-app-with-electron-vuejs-typescript.html" rel="alternate"></link><published>2018-09-16T00:00:00+09:00</published><updated>2018-09-16T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-09-16:/built-app-with-electron-vuejs-typescript.html</id><summary type="html">&lt;p&gt;Electron + TypeScript + Vue.js でアプリを作った話&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近ちょっと SNS 断ちをしていてついでにというか勉強がてら自分用に Electron + TypeScript + Vue.js でソーシャルメディアデトックスアプリを&lt;a href="https://github.com/shufo/aspida"&gt;作ってみた&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡単に説明するとアプリでスイッチをオンにすると対象のサイトにアクセス出来なくなるというもの。&lt;/p&gt;
&lt;p&gt;以下の GIF アニメを見てもらえればなんとなくどういうアプリかは分かると思う。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/shufo/aspida/wiki/assets/description.gif"&gt;&lt;/p&gt;
&lt;p&gt;コードのコンパイル待ちだったり CI 待ちのちょっとした空き時間についアクセスしてスクロール中毒に陥ってしまうことを防ぎたくて作った。
実際ソーシャルメディアを根本的に絶つにはマシンを破壊するか回線を切るくらいしかないと思うけど、そこまで出来ない人用。&lt;/p&gt;
&lt;p&gt;仕組み的には対象のサイトのホスト名を hosts ファイルに書き込んで IP アドレス &lt;code&gt;0.0.0.0&lt;/code&gt; で名前解決させてアクセス出来なくさせるという簡単なもの。
hosts ファイルに直接書き込むのでブラウザ以外にも CLI や専用のクライアントもブロック出来る。&lt;/p&gt;
&lt;p&gt;DNS キャッシュが効いてる状態で名前解決時にキャッシュを参照してるとアクセス出来てしまう場合があるが Chrome の場合は&lt;code&gt;chrome://net-internals/#dns&lt;/code&gt;を開いてから&lt;code&gt;cleat host cache&lt;/code&gt;でキャッシュを削除すれば名前解決時に hosts ファイルを参照するようになる&lt;/p&gt;
&lt;h3&gt;Electron&lt;/h3&gt;
&lt;p&gt;テンプレートとして&lt;a href="https://github.com/SimulatedGREG/electron-vue"&gt;electron-vue&lt;/a&gt;をベースに作成した。&lt;/p&gt;
&lt;p&gt;Electron は初めて使ったがクロスプラットフォームでバイナリを出力出来るのはやはり便利だった。ただ各プラットフォームごとにファイルシステムのアクセス制御の仕組みが違ったりするので書き込みに管理者権限の必要な hosts ファイルの権限チェックのためプラットフォーム固有の知識が必要になったりして少し苦労した。&lt;/p&gt;
&lt;p&gt;例えば Windows は ACL でアクセス制御しているので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;W_OK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で書き込みが可能かチェックしてもファイルが存在する限りは必ず成功する。&lt;/p&gt;
&lt;p&gt;一方 Linux は Electron を起動させているユーザで対象のパーミッションを正しくチェックする。
なのでプラットフォームが Windows の場合のみ ACL を変えるコマンドを投げるようにした。&lt;/p&gt;
&lt;p&gt;あと他にも色々ハマりどころがあったので忘れないように覚え書きしておく。&lt;/p&gt;
&lt;h4&gt;ハマったところ&lt;/h4&gt;
&lt;h5&gt;静的ファイルの扱い&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt; で起動する開発モードと &lt;code&gt;npm run build&lt;/code&gt; で出力する production 用のバイナリでは起動時のディレクトリ構造が異なるので &lt;code&gt;__static&lt;/code&gt; 変数を参照して静的ファイル用のディレクトリ(&lt;code&gt;static&lt;/code&gt;)へのパスを取得しないといけない。
ちなみに TypeScript でデフォルトだと global の&lt;code&gt;__static&lt;/code&gt;を解決出来ないので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;__static&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を宣言して解決させた。&lt;/p&gt;
&lt;h3&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;以前から使ってみたかったけど中々使う機会がなかったのでせっかくなので使ってみた。&lt;/p&gt;
&lt;p&gt;VSCode + TypeScript の開発体験、いわゆる DX（&lt;strong&gt;D&lt;/strong&gt;eveloper e&lt;strong&gt;X&lt;/strong&gt;perience）は噂通り素晴らしかった。コンパイル前からエディタでほぼリアルタイムで型エラーを出力してくれるし精度も高い。補完も強力でほぼ取りこぼしもない。エディタ自体が TypeScript で作られているだけあって完成度は折り紙つき。&lt;/p&gt;
&lt;p&gt;ただ TypeScript 特有のクセみたいなものはあって Vue.js でコンポーネント内で&lt;code&gt;this&lt;/code&gt;が解決されなかったりしてコンパイルエラーになるので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;someMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とキャストして型の解決が必要だったり多少 workaround 的な作業が必要になる箇所が何箇所かあった。&lt;/p&gt;
&lt;p&gt;あと TypeScript に対応していない npm モジュールもうまく解決出来ないこともあった。&lt;/p&gt;
&lt;p&gt;TypeScript 特有の問題というわけではないが主に外部のライブラリと組み合わせたときに TypeScript を考慮していない部分で問題が発生しているように思えたので、TypeScript 外の npm モジュールを組み合わせるときは予め相性をチェックする作業が必要になりそうだった。&lt;/p&gt;
&lt;p&gt;そういった意味で TypeScript を使う際は型が正しく通るように変更するオーバーヘッドが発生する可能性があるのでプロトタイプというよりは正式版としてかっちり作るのに向いているのかなと思った。&lt;/p&gt;
&lt;p&gt;ネイティブ JS なら npm ライブラリもほぼ問題なく使えるし TypeScript に対応していないライブラリで型の問題が発生するということもないのでプロトタイプとして JS で書いてから問題なさそうだったら TypeScript に変換するというのもありといえばありかもしれない。&lt;/p&gt;
&lt;p&gt;JS はテストを書くにも E2E がなかなか安定しなかったりで苦労するのでネイティブ JS で一度書いてから TypeScript に変換し型である程度の一貫性を保証することで品質を担保するという考え方も出来るかもしれない。&lt;/p&gt;
&lt;h3&gt;Vue.js&lt;/h3&gt;
&lt;p&gt;以前からちょくちょく片手間フロントエンドマンとして仕事で使ったりしていたのでなんとなくは知っていたが
TypeScript で書いたことはなかったので組み合わせた時どんな感じなのかという確認の意味も込めて使ってみた。&lt;/p&gt;
&lt;p&gt;結果としては&lt;a href="https://jp.vuejs.org/v2/guide/typescript.html"&gt;Vue.js 2.5 で TypeScript に正式に対応&lt;/a&gt;したこともありほぼほぼ問題はなかった。&lt;/p&gt;
&lt;p&gt;ちゃんとコンパイラが怒るところは怒ってくれるのでとりあえずコンパイルが通れば大体動くという安心感がある。
Electron 用のアプリ作成フレームワークとして見ても特に問題はなく普段 Web で動かすのと同じように書けた。
Web と異なるのはファイルシステムに直接アクセスしてローカルのファイルを参照したりするくらいで（それが一番のメリットかもしれないが）少し修正すれば Web にもコードを再利用出来そうだった。&lt;/p&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;p&gt;Electron + TypeScript + Vue.js でデスクトップアプリケーションを作った。
内容が簡単な割りに結構ハマったりしたものの、 TypeScript の体験はかなりよかったので結果オーライ。（オーライ）&lt;/p&gt;
&lt;p&gt;Repo: &lt;a href="https://github.com/shufo/aspida"&gt;https://github.com/shufo/aspida&lt;/a&gt;&lt;/p&gt;</content><category term="Electron"></category><category term="Vue.js"></category><category term="TypeScript"></category></entry><entry><title>陣馬山から高尾山まで縦走してきた</title><link href="https://shufo.github.io/jinba-to-takao.html" rel="alternate"></link><published>2018-08-25T00:00:00+09:00</published><updated>2018-08-25T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-08-25:/jinba-to-takao.html</id><summary type="html">&lt;p&gt;登山初心者が陣馬山から高尾山まで縦走した話&lt;/p&gt;</summary><content type="html">&lt;p&gt;超初心者だけど頑張って登ってきた&lt;/p&gt;
&lt;p&gt;登山経験は小学生の頃に遠足で高尾山登ったくらい。
たぶん約 20 年ぶりくらいの登山。&lt;/p&gt;
&lt;p&gt;なんでまた登山をしたくなったかというと先日キャンプを 3 日ほどやる機会があり本格的な登山ではないけどアウトドア熱が高まってしまったためである。&lt;/p&gt;
&lt;p&gt;いい機会だし趣味にしたいなーということで何かいい感じの山はないかと探したところ
陣馬山〜高尾山は初心者でも縦走しやすく高尾山よりはハードとネットに感想があったのででここに決定。&lt;/p&gt;
&lt;p&gt;陣馬山は高尾山系のさらに奥地にある山で高尾山から少し足を伸ばした先にあるのだけど
陣馬山の方が標高が高く、高尾山からはひたすら登りで少しきついなというのと帰りが高尾山口駅の方がアクセスがよく帰りに簡単に温泉に寄れる（ここ重要）ので陣馬山から高尾山に向かうルートにした。&lt;/p&gt;
&lt;p&gt;装備は色々登山系の雑誌とか見たり参考にしたけど言うても高尾山の周りはかなり整備されているのでほとんど普段着に近い服装で行ったけどあまり問題はなかった。
ちゃんとした装備はトレラン用の靴、水分補給用に BCAA を溶かしたスポドリ、ハイドレーションシステムにスポドリを入れて合計 1 リットルほどの水分。
あと行動食で梅タブレットとグミくらい。
服はヘインズのコットンの T シャツにパタゴニアのバギーショーツ。ザックはジムに行く時用のナイキのジムバッグ。普段着すぎる。&lt;/p&gt;
&lt;p&gt;休日で茶屋が開いていたので食事はほとんど茶屋で済ませることが出来てよかった。行動中の水分補給だけ出来れば真夏でも食事は茶屋で済ませば大体大丈夫そうな感じだった。&lt;/p&gt;
&lt;h3&gt;【高尾山駅〜陣馬高原下】&lt;/h3&gt;
&lt;p&gt;高尾駅北口から 7:35 のバスに乗り終点の陣馬高原下まで移動。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/nGhMrxQ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;バス停を出て右に向かう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/Qx7JJhT.jpg"&gt;&lt;/p&gt;
&lt;p&gt;標識があるので右の道の陣馬山に向かう. ここから陣馬街道でしばらく舗装路&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/XDfZXtq.jpg"&gt;&lt;/p&gt;
&lt;p&gt;20 分ほど歩く&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/UsQOc1T.jpg"&gt;&lt;/p&gt;
&lt;p&gt;小さい陣馬山新ハイキングコース登山口がぽつんとあるのでここから登山開始。ぼーっとしてたら見逃しそう。&lt;/p&gt;
&lt;h3&gt;【陣場山〜景信山】&lt;/h3&gt;
&lt;p&gt;陣馬山の登りは急な坂が延々と続き真夏の低い山だからか気温も高くすぐに汗が吹き出した。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/y7NRww1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;水平距離 3 km ぐらいで高度を 500 m くらいかせぐので平均１０度くらいの斜面が延々と続く。
登ってる途中で何で休日の朝っぱらからこんなきつい斜面登ってるんだろうという疑問が湧くけど気にしない。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/hmTRBtd.jpg"&gt;&lt;/p&gt;
&lt;p&gt;木漏れ日が綺麗だけどきつくて体力が雑魚なので見る余裕がない。&lt;/p&gt;
&lt;p&gt;コットンの T シャツはずぶ濡れになったので化繊の T シャツにすればよかったなと反省。
帰りに極楽湯に寄った時におみやげの T シャツを買ってそれに着替えて帰った。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/j6cpmVV.jpg"&gt;&lt;/p&gt;
&lt;p&gt;少し開けて平坦な道が出てくると頂上までもう少し&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/UgrX6It.jpg"&gt;&lt;/p&gt;
&lt;p&gt;頂上の小屋がちらっと見えて来た時の安心感&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/gO53Wi9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;そして約１時間ほどで陣馬山頂上到着&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/isPJw6f.jpg"&gt;&lt;/p&gt;
&lt;p&gt;頂上は爽やかな高原という感じで風が吹いていて最高&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/u207nbd.jpg"&gt;&lt;/p&gt;
&lt;p&gt;頂上のシンボル&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/HadRaV3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;陣馬山は神奈川と東京の境にあるが神奈川県側に入っている&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/lnmIb2m.jpg"&gt;&lt;/p&gt;
&lt;p&gt;少し休憩して景信山へ向かう。
トレラン勢がこんな時間でも走っていて体力お化けっぷりにびびる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/MXW2l6p.jpg"&gt;&lt;/p&gt;
&lt;p&gt;この区間は開けた場所が少なかったのであまり写真は取っていないけど下りが多く５.7 km ほど続く。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/S0aH6F0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;途中明王峠など挟みつつ 11 時 20 分頃景信山到着。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/VXU6EHV.jpg"&gt;&lt;/p&gt;
&lt;p&gt;東京都に向かって開けた場所になっていて都下を一望出来る。ここも気持ちがいい。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/XSRWBTJ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;昼食で名物のなめこを使ったなめこうどんとアイスコーヒーをキメる。平日は分からないけど休日は茶屋が開いているので食事も 1 時間置きくらいには取れるのがこのコースの良い所。&lt;/p&gt;
&lt;h3&gt;【景信山〜高尾山】&lt;/h3&gt;
&lt;p&gt;40 分ほど休憩して 12 時くらいに景信山を出発&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/cGcePyK.jpg"&gt;&lt;/p&gt;
&lt;p&gt;高尾山方面へ向かう。&lt;/p&gt;
&lt;p&gt;景信山から高尾山までは比率としては下りが多いもののけっこうアップダウンが多かった。
長く歩くので体力的にいちばんしんどかったのはこのあたりだった。
高尾山山頂手前の巻き道を経由しない登りは心が折れて帰りたくなった。登山中につらくなると帰りたくなる現象に名前をつけたい。&lt;/p&gt;
&lt;p&gt;この辺りは時間的に日が登って来て暑いので休み休み行くといいかもしれない。&lt;/p&gt;
&lt;p&gt;あとこの区間まで来ると高尾山から足を伸ばしてきた人もだんだん多くなってくる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/gR479ff.jpg"&gt;&lt;/p&gt;
&lt;p&gt;そして高尾山到着。休日なので人がいっぱい。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/D9R33Rq.jpg"&gt;&lt;/p&gt;
&lt;p&gt;微妙に雲がかってるので富士山 is どこ。&lt;/p&gt;
&lt;h3&gt;【高尾山】&lt;/h3&gt;
&lt;p&gt;1 号路以外は割と自然な風景も多いとのことでせっかくなので俺はこの道を選ぶぜということで 6 号路で下山。
ひたすら下りで特にきついところもなくスイスイと 60 分ほどで下山。&lt;/p&gt;
&lt;p&gt;15 時 30 頃高尾山口駅に到着。&lt;/p&gt;
&lt;p&gt;休憩入れて合計 7 時間 20 分程ほどかかった。
標準コースタイム（休憩含まず）が 6 時間半らしいので大体標準くらいだった。&lt;/p&gt;
&lt;h3&gt;【&lt;a href="http://www.takaosan-onsen.jp/"&gt;極楽湯&lt;/a&gt;】&lt;/h3&gt;
&lt;p&gt;そして登山のあとの楽しみといえば！&lt;/p&gt;
&lt;p&gt;そう、サウナです（？）&lt;/p&gt;
&lt;p&gt;むしろここに行くために登山したといっても過言ではない。
サウナーなので温泉自体は割とどうでもよかったけど 1000 円で 5 種類の温泉やサウナを楽しめたので十分だった。都内なら 2000 円くらいする。&lt;/p&gt;
&lt;p&gt;疲れた体にサウナを 3 セットこなしてばっちり整った。
高温サウナはスパ銭特有のスタジアムサウナでテレビ付き。体感けっこう熱めで湿度は欲を言えばもう少し欲しかった。
休憩用のイスからは高尾山の自然が見えて外気浴がめちゃくちゃ整う。
人は多かったものの水風呂もそこまでぬるくならずキレがよくサウナの出口すぐに冷水機があるのもよかった。
かけ水はぬるいので水シャワーで汗を流した方がいいかもしれない。&lt;/p&gt;
&lt;p&gt;全体的に人が多くあまり落ち着くような雰囲気ではないので風呂上がりに軽く食事を済ませたらすぐ退散。
駅に隣接しているという抜群のロケーションが素晴らしいのでまた高尾山行ったら帰りに寄りたい。&lt;/p&gt;
&lt;h3&gt;【感想】&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;噂通り陣場山〜高尾山縦走は初心者に良い登山路だった&lt;/li&gt;
&lt;li&gt;危険な箇所がない&lt;/li&gt;
&lt;li&gt;困った時に途中で降りるエスケープルートが豊富&lt;/li&gt;
&lt;li&gt;休憩箇所と食料補充箇所も多い&lt;/li&gt;
&lt;li&gt;また違う季節に登ってみたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;【反省点】&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;YAMAP のスタートボタン押し忘れて行動ログ取れてなかった&lt;/li&gt;
&lt;li&gt;靴の違和感を感じたらすぐ靴紐調整し直した方がよかった（靴ずれしてた）&lt;/li&gt;
&lt;li&gt;温泉入った後用に着替えの T シャツと靴下持って行けばよかった&lt;/li&gt;
&lt;li&gt;行動食は事前に開封して別の食べやすい容器に入れておけばよかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;【装備】&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adidas TERREX TRACEROCKER&lt;/li&gt;
&lt;li&gt;SHIMANO(シマノ) - ドリンクボトルクリア&lt;/li&gt;
&lt;li&gt;プラティパス(Platypus) / 225601&lt;/li&gt;
&lt;li&gt;プラティパス(Platypus) / DRINK TUBE KIT&lt;/li&gt;
&lt;li&gt;パタゴニア(patagonia) / Baggies Shorts&lt;/li&gt;
&lt;li&gt;ナイキ - ブラジリアジムサック&lt;/li&gt;
&lt;li&gt;ARC'TERYX - ALPHA SL JACKET&lt;/li&gt;
&lt;li&gt;Huawei Honor Band 3&lt;/li&gt;
&lt;/ul&gt;</content><category term="trekking"></category></entry><entry><title>DJ 入門した話</title><link href="https://shufo.github.io/soundsandbox-at-white-space-lab.html" rel="alternate"></link><published>2018-07-07T00:00:00+09:00</published><updated>2018-07-07T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-07-07:/soundsandbox-at-white-space-lab.html</id><summary type="html">&lt;p&gt;DJ 入門してきた話と Sound Sandbox vol.1 の感想&lt;/p&gt;</summary><content type="html">&lt;p&gt;2018 07/06, &lt;a href="https://soundsandbox.tokyo/"&gt;SoundSandbox&lt;/a&gt; vol.1 @ &lt;a href="https://dj-bar-space.jimdo.com/"&gt;White Space Lab&lt;/a&gt; に DJ としておじゃましてきた。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://soundsandbox.tokyo/events/vol1/"&gt;&lt;img alt="Sandbox" src="https://i.imgur.com/Hh8z8q3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;会社の同僚氏の&lt;a href="https://twitter.com/pinkylab"&gt;@pinkylab&lt;/a&gt;さんに誘われて 「磯野〜、DJ やろうぜ！」ということで&lt;strong&gt;初&lt;/strong&gt; DJ として行ってみた。なんと自分こういうとこで DJ やったことないのである。よく誘ったな。&lt;/p&gt;
&lt;p&gt;元はといえば会社の飲み会で渋谷のバーみたいなところに行った時に DJ スペースがあって、そこで DJ やってみてよという社長の無茶振りでなんか適当にかけたときに pinkylab さんと一緒にやったのでそれがきっかけかもしれない。&lt;/p&gt;
&lt;p&gt;普段は(比較的)真面目に働いている pinkylab さんが器用に DJ をしていておもしろかったのを覚えている。&lt;/p&gt;
&lt;p&gt;そんな感じで初 DJ をやった感想、どういう感じで DJ をしたか、DJ の準備をしたときのことなど書いてみる。&lt;/p&gt;
&lt;h3&gt;箱とイベント&lt;/h3&gt;
&lt;p&gt;まず普段は Vision とか Womb とか大きな箱で興味のある外タレが来た時くらいにしか聞く側としてしか箱に行かず、こういったローカルコミュニティの温度感が伝わるようなイベントや箱に行くというのも今まで無く、大きな箱やイベントでは気づけないような良い点にも気づけて新鮮だった。&lt;/p&gt;
&lt;p&gt;大箱と小箱どちらにもよさがあるけど、こういったローカルで全員と顔を合わせることが出来る距離にいるとまず熱量の伝わりやすさが違う。
音と距離が近いというのもあるけど、顔を突き合わせることで DJ が今考えていることやオーディエンスが考えていることも伝わりやすい。&lt;/p&gt;
&lt;p&gt;あまりに伝わりやすいのでなんかミキサーの操作とかに困ってると、オーディエンス（DJ）から助け舟が来たりするぐらいだ。あなたが神か。&lt;/p&gt;
&lt;p&gt;まぁそんな感じで DJ 側としてイベントに参加するというのは初めてだったけど&lt;strong&gt;実家のような安心感&lt;/strong&gt;で楽しく DJ することが出来た。助けて頂いた皆さんありがとうございます。&lt;/p&gt;
&lt;h3&gt;DJ 準備&lt;/h3&gt;
&lt;p&gt;イベントの条件としては&lt;/p&gt;
&lt;p&gt;ジャンル: オールジャンル&lt;br&gt;
持ち時間: 45 分&lt;/p&gt;
&lt;p&gt;で比較的何でも OK な感じだったのと、初 DJ ということでどんな DJ をするのか周りも分からないので自分の人となりが分かるような DJ にしようと思った。&lt;/p&gt;
&lt;p&gt;なので自分の&lt;strong&gt;これ好き!&lt;/strong&gt;が伝わればいいと思い、普段自分がほんとにこれいいなぁと思うものを選んだ。&lt;/p&gt;
&lt;p&gt;ちなみに自分の DJ 初心者ぶりを説明すると家にはターンテーブルとミキサーしかないので&lt;strong&gt;Sync ボタンって何？&lt;/strong&gt;みたいなそんなレベルである&lt;/p&gt;
&lt;p&gt;以下準備してた時の考えとかをメモ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自分が最近好きなもの: ソウル、ファンク、和物とかのレアグルーブ系&lt;/li&gt;
&lt;li&gt;他の DJ の方の雰囲気的に A-POP 系の方がいいのかも？&lt;/li&gt;
&lt;li&gt;でもその辺りのジャンル詳しくない&lt;/li&gt;
&lt;li&gt;正直詳しくないジャンルをかけるよりはもう自分の好きなジャンルで行こう&lt;/li&gt;
&lt;li&gt;ソウルとかファンクとか和物で繋いだことないので練習しておきたい&lt;/li&gt;
&lt;li&gt;とりあえず最初は山下達郎を流す(&lt;a href="https://shufo.github.io/yamashita-tatsuro-live-at-nhk-hall.html"&gt;最近ライブ行った&lt;/a&gt;影響)&lt;/li&gt;
&lt;li&gt;次は洋楽でメロウなファンクとかソウル、踊れるレアグルーブ系を流れで&lt;/li&gt;
&lt;li&gt;その後は和物アニソンクラシックから和物の流れに切り替え&lt;/li&gt;
&lt;li&gt;段々時代を登って行って和物クラシックで締め&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じでソウルとかファンク、和物中心のセットになった。&lt;/p&gt;
&lt;p&gt;ちなみにほぼ曲と曲を繋がないで１曲終わったら次の曲をすぐ流す感じにした。
ソウル、ファンク、和物などのレアグルーブは正直無理に繋ぐよりは本当にいい音楽も多いので最初から最後まで聞いてもらいたくて流した。（&lt;strike&gt;という繋ぐ練習時間が取れなかったエクスキューズ&lt;/strike&gt;）&lt;/p&gt;
&lt;h3&gt;セットリスト&lt;/h3&gt;
&lt;p&gt;途中は流れで流したので記憶が曖昧だけど大体こんな感じ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sparkle - 山下達郎
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/a7d9OV2bu5k" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;Silent Screamer - 山下達郎
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CgVOklnovPQ" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;You Can Win - Bileo
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZoAATtUmvUs" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;Monica - Chauffeur
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/DzJmkss6wH4" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;These Are the Good Times - Pop sicles
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-gm6qZcy3aw" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;Dang Dang 気になる - 中村由真
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LmMiaXfdr8s" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;NINETEEN 19 - 長江健次&lt;/li&gt;
&lt;li&gt;Summer Touches You - 東北新幹線
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1irtgCQWR7M" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;Distance - 宇多田ヒカル
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/jI5N4dStkv0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;li&gt;Automatic - 宇多田ヒカル
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/-9DxpPiE458" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうして見るとほんと自分の好きなのしか流してなくて DJ とは（哲学）みたいな感じになる&lt;/p&gt;
&lt;h3&gt;他感想等&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最初はレコードを取り込んで CDJ でやる予定だったけど、実際取り込む時間がほぼ取れず&lt;/li&gt;
&lt;li&gt;結局ヴァイナルを持っていってプレイした&lt;/li&gt;
&lt;li&gt;無理に取り込むよりは、期待した音は出てたので結果的によかったかも&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dj-bar-space.jimdo.com/xone92/"&gt;XONE のミキサー&lt;/a&gt;使うの初めてだったけどフィルターのかかり方とかパイオニアに比べるとゆるやかでおもしろかった&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dj-bar-space.jimdo.com/hamburger/"&gt;ハンバーガー&lt;/a&gt;がクソ美味&lt;/li&gt;
&lt;li&gt;DJ はやらずに VJ とか&lt;a href="https://photos.google.com/share/AF1QipO5l8GmBciCbwUud7HeP7fi1uloiWhY7VVSCq0W-nb6ei_LHr-ZB4EWBQV6l-Dh5w?key=WXJMaWdldUJMRVplaHl1MWE2VlhjXzFVU0lyc2pR"&gt;写真&lt;/a&gt;とか色々なやり方でイベントにコントリビュートしている方もいてそういうのはすごいいいなぁと思った&lt;/li&gt;
&lt;li&gt;VJ がいることで視覚としての音楽体験にも説得力が出るし&lt;/li&gt;
&lt;li&gt;クラブ写真家がいることでその VJ を切り取った一瞬が思い出になる&lt;/li&gt;
&lt;li&gt;自分たちでイベントを作っていくみたいな一体感があって、自分も DJ やらないにしてもそういった形でコミュニティにコントリビュートしていくってのはやってみたいなって思った&lt;/li&gt;
&lt;/ul&gt;</content><category term="Music"></category><category term="DJ"></category></entry><entry><title>山下達郎 @ NHK ホールに行った</title><link href="https://shufo.github.io/yamashita-tatsuro-live-at-nhk-hall.html" rel="alternate"></link><published>2018-06-28T00:00:00+09:00</published><updated>2018-06-28T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-06-28:/yamashita-tatsuro-live-at-nhk-hall.html</id><summary type="html">&lt;p&gt;山下達郎のコンサートに行った話&lt;/p&gt;</summary><content type="html">&lt;p&gt;山下達郎のコンサートに行った。今回が初めて。&lt;/p&gt;
&lt;p&gt;2018 6/28 NHK ホール、会場の前に行くともう大分人が集まっていた。
年齢層は 40 代〜50 代が多め、20 代、30 代はちらほらという感じ。
NHK ホールに音楽を聞きに行くというのもそういえば初めてな気がする。&lt;/p&gt;
&lt;p&gt;NHK ホールは普段は紅白や N 響のコンサートなどで使われるが、ライブ会場としても使われていてベテランのアーティストが演奏していたりする。&lt;/p&gt;
&lt;p&gt;自分が山下達郎を聴き始めたのは割と最近で、和モノの 80 年代 AOR の再発物を聞くようになってから山下達郎もよく聞くようになった。
たまにレコード屋に行っては中古のレコード棚から「や」行を探し、少しずつ集めていた。&lt;/p&gt;
&lt;p&gt;山下達郎のレコードを買って毎回思うのは、驚くほど音がいいということ。80 年代にプレスされたレコードとは思えないほど音の抜けがよくて達郎を聞いている間だけ耳の通りがよくなる気がするくらいだった。&lt;/p&gt;
&lt;p&gt;そして 80 年代に全盛期を誇っていたアーティストが今でも活動しているということ自体がある意味驚きなのだけど、一番驚いたのは山下達郎が今もなお全盛期だったことだ。&lt;/p&gt;
&lt;p&gt;経験豊かなアーティストが加齢や喉の酷使で以前通りの声が出ないのはよくあることなので、自分も少し覚悟をして聞きにいったのだけどその心配は不要だった。&lt;/p&gt;
&lt;p&gt;1 曲目、Sparkle の第一声が NHK ホールを響かせた時 80 年代の風が吹いた。&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gQ9pmFMc5oM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;「声が戻って来ている。35 歳ぐらい」&lt;/p&gt;
&lt;p&gt;と曲の合間の MC で語っていたのは本当で、何度と無くレコードで聞いたあの声がまさに響いていた。目を瞑ったら音源をそのまま流しているんじゃないかと思うぐらいまったく変わっていないあの声だ。&lt;/p&gt;
&lt;p&gt;この感動はちょっと文字では伝えきれないけど、山下達郎のような声を自分の音楽のアイデンティティとしているようなアーティストが全盛期の輝きを取り戻しているというのは、比較的維持することが可能な演奏技術よりよほど心に来るものがある。声というのは非可逆なもので、才能ある素晴らしい歌手が全盛期の声を取り戻せないのを何人も見てきただけに。&lt;/p&gt;
&lt;p&gt;近年 &lt;a href="https://mag.japaaan.com/archives/38459"&gt;Future Funk&lt;/a&gt; や &lt;a href="https://ja.wikipedia.org/wiki/%E3%83%B4%E3%82%A7%E3%82%A4%E3%83%91%E3%83%BC%E3%82%A6%E3%82%A7%E3%82%A4%E3%83%B4"&gt;Vaporwave&lt;/a&gt; 等の流行もあって久しいけど、その界隈からはサンプリング元として神のような扱いを受けている山下達郎が現役バリバリでいらっしゃるので行ったことない界隈の人はマジで一回行ってほしい。&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/GQ98QCAxL2k" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;山下達郎ももちろんだけどバンドメンバーも全員一流だった。
今まで結構な数のライブを見てきたけど、全員が全員うまいというのはなかなかない。
全員山下達郎の慧眼にかなったメンバーだから当たり前といえば当たり前だ。バックコーラスにしれっと国分友里恵がいるのもすごい。&lt;/p&gt;
&lt;p&gt;あと NHK ホールの会場としてのよさも大きかった。席は残念ながら３階席の後方だったけど、ハイハットの一刻みの強弱が手に取るように聞こえ、どれか一つの楽器が潰れることなく全てがはっきりと聞こえるライブは初めてだった。山下達郎のセッティングも完璧なんだろう。&lt;a href="https://www.facebook.com/senseofwonder.nambahiroyuki/photos/a.111919385824088.1073741828.101448030204557/426140074402016/?type=3"&gt;リハーサルに 1 ヶ月かけて&lt;/a&gt;、&lt;a href="http://www.enpitu.ne.jp/usr6/bin/day?id=60769&amp;amp;pg=20051017"&gt;レポートで 10 枚事細かにダメ出し&lt;/a&gt;するような完璧主義者が NHK ホールの全席の音響をチェックしていないはずがない。&lt;/p&gt;
&lt;p&gt;MC も完全に音楽オタクという感じでよかった。ベロシティとか ProTools とか、スタジオミュージシャンに譜面渡して演奏してもらうのが大変だった話とか、好きなルーツ洋楽アーティストの単語とかポンポン飛び出てくる。本当に音楽が好きなんだなぁという感じで（オタク特有の早口で）楽しそうに話されるので永遠に聞いていたくなる。&lt;/p&gt;
&lt;p&gt;Japanese Funk とかシティポップと最近はジャンル付けもされて海外でも再評価の著しい山下達郎だけど、日本語とか英語とかこだわらず自分の信じる良い音をやり続けた結果みんなハッピーになるというとてもいい話を実体験出来るライブなので、みんな一生に一回は山下達郎行きましょうという気持ちになった一夜だった。&lt;/p&gt;</content><category term="Music"></category></entry><entry><title>最近読んだ本</title><link href="https://shufo.github.io/books-recent-read.html" rel="alternate"></link><published>2018-05-25T00:00:00+09:00</published><updated>2018-05-25T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-05-25:/books-recent-read.html</id><summary type="html">&lt;p&gt;銃・病原菌・鉄、サピエンス全史、遺伝子-親密なる人類史&lt;/p&gt;</summary><content type="html">&lt;p&gt;Kindle Oasis 最高（挨拶）&lt;/p&gt;
&lt;p&gt;最近 Kindle で読書した本が溜まってきたので感想を書いておく。細かい感想はまた別で書くかもしれないけどとりあえず簡単な全体的な感想を。&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://amzn.asia/gn2FdkE"&gt;銃・病原菌・鉄&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/82We192.png" style="width: 300px; margin-left: 10px"&gt;&lt;/p&gt;
&lt;p&gt;「&lt;a href="http://book.asahi.com/reviews/column/column.html?page=1&amp;amp;id=1399"&gt;ゼロ年代の 50 冊&lt;/a&gt;」のベスト 1 にも選出された 1 冊。&lt;/p&gt;
&lt;p&gt;大学生に勧める本のランキングにも入ることが多い。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;なぜヨーロッパ周辺の文明とそれ以外の文明で文字や社会システム、科学等の発展に差が生まれたのか。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本書では、著者の友人のニューギニア人のヤリが持ったこの疑問に答えていく。&lt;/p&gt;
&lt;p&gt;端的にいってしまえば&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;つまり、究極的には、ヨーロッパ人とアフリカ人は、異なる大陸で暮らしていたので、異なる歴史をたどったということなのである。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということになるがそこで著者は「なぜ」異なる歴史を辿ったのか、そこに必然性はあったのかということについて狩猟採集から食糧生産への歴史、地理的条件、生態系、地政学的な話まで学際的に踏み込んで根本的な原因を探ろうとしていく。&lt;/p&gt;
&lt;p&gt;この本のいいところはそういった科学的な誠実さであり、ありがちな歴史の解説や仮説の立て逃げだけでなく、仮説 → 検証のプロセスを繰り返すことで究極的な歴史の原因を探ろうとする点にある。&lt;/p&gt;
&lt;p&gt;検証結果に対して検証の妥当性を検討し、検証結果から新たに生まれた疑問に対してはまた仮説を立てて検証し、科学的誠実さをもって歴史を紐解いていく。こういった科学的態度が大学生に勧めたい理由なんだろうなと思った。&lt;/p&gt;
&lt;p&gt;１万２千年にも上る歴史をジェットコースターのように駆け抜けていくだけあって、ところどころ仮説や検証の甘さはあるものの概ね納得感のある検証になっている。&lt;/p&gt;
&lt;p&gt;ともすればその地域に「今」住んでいる人の属性をもって我々はなんらかの必然性を推測してしまうが、歴史を知ることによってその偶然性を知ることが出来る。このことは次に挙げるサピエンス全史でも説かれているテーマだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;たいていの社会政治的ヒエラルキーは、論理的基盤や生物学的基盤を欠いており、偶然の出来事を神話で支えて永続させたものにほかならない。歴史を学ぶ重要な理由の一つもそこにある。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全体としてかなり淡々とした文章でウェットさはほとんどないけど、主観を廃した科学的手続きの一環だと思うと納得が行く。&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://amzn.asia/4n52nWU"&gt;サピエンス全史&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ppoDIAh.png" style="width: 300px; margin-left: 10px"&gt;&lt;/p&gt;
&lt;p&gt;上巻だけしか読んでないがそこまでの感想。&lt;/p&gt;
&lt;p&gt;銃病原菌鉄とセットで紹介されていることが多かったので興味を持って読んでみた。&lt;/p&gt;
&lt;p&gt;銃・病原菌・鉄から影響を受けていることを著者が公言しているだけあって、歴史をなぞる方法論は似たものを感じる。&lt;/p&gt;
&lt;p&gt;ただちょっと思っていたのと違ったのはこれはどちらかというとビジネスパーソン向けの警句集みたいなところがあって、仮説 → 検証の科学的手続きはそこまで重視されていない。&lt;/p&gt;
&lt;p&gt;著者の主張自体には面白いところがあるものの、テーマが多岐に渡るため個々の主張に対しては細かい論証などはあまりなく断定的な物言いになっている。&lt;/p&gt;
&lt;p&gt;だからといってこの本が提起する問題の価値が薄まるわけではないけど、個別のテーマについてはそれぞれちゃんと個別のテーマの本を読んだ方がよさそう。&lt;/p&gt;
&lt;p&gt;下巻はまだちょっと読むか分らない。&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://amzn.asia/9C0V7X1"&gt;遺伝子-親密なる人類史&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/lLGVjcC.png" style="width: 300px; margin-left: 10px"&gt;  &lt;/p&gt;
&lt;p&gt;これもまだ上巻しか読んでないがそこまでの感想。&lt;/p&gt;
&lt;p&gt;これはこの３冊の中では最もウェットな文章ではっきりいってエモい。&lt;/p&gt;
&lt;p&gt;ところどころ著者自身のバックグラウンドも絡んだエモい表現と真面目に歴史を語るパートの対比が心地よく、良く出来た小説を読んでるような気分になる。&lt;/p&gt;
&lt;p&gt;遺伝学の歴史を１９世紀から現在まで辿るというものだが、遺伝というと高校の授業でメンデルのえんどう豆の話が出たな〜ぐらいの認識だったけど、この本を読むとメンデルの偉大さに気づく。メンデルの法則だけの一発屋かと思っててごめん。同時代のダーウィンが目立ちすぎというのもあるけどそれ以上の偉人だ。&lt;/p&gt;
&lt;p&gt;前半はダーウィンとメンデル中心にした遺伝学の創始物語、ゴールトンと優生学、各国における優生学の利用、後半は DNA の二重らせん構造の発見、クローニング、遺伝子の科学的操作といった話が中心になる。&lt;/p&gt;
&lt;p&gt;前半では忌まわしき優生学と統計学の研究の関連についての話があったが、改めて科学倫理の重要さを痛感した。今では考えられないが極めて理性的な判断で断種などが行われていた時代が１００年もしない昔にあったということ。そして日本でも１９９６年まで優生保護法という名の断種法が存在し実際に断種が行われていたこと。&lt;/p&gt;
&lt;p&gt;優生学というのも何も狂人が始めたものでもないし、ナチスが勝手に考えだしたものでもない。今では機械学習にも利用されている統計学の平均への回帰や相関係数という概念を発明したゴールトンが提唱したのだ。&lt;/p&gt;
&lt;p&gt;その後は歴史が知る通りナチスのホロコースト政策によって多数のユダヤ人が優生学の名の下に犠牲になった。理性が簡単に大量殺戮へ結びつくということをはからずしも理性が自ら証明してしまった。&lt;/p&gt;
&lt;p&gt;本書の後半では遂に人類の遺伝子まで操作出来る段階になるがそこでは過去の反省を元に倫理が強く求められ、アシロマ会議では研究の一時停止まで求められるようになる。&lt;/p&gt;
&lt;p&gt;遺伝関連の本は初めてだったため正直内容は難しかった。が、人類のアイデンティティさえ変えてしまうことさえ可能なとてつもなく大きな力を手にしていく歴史を見ていく様はスリリングで一気に読めてしまった。&lt;/p&gt;
&lt;p&gt;下巻も読んでみたい。&lt;/p&gt;</content><category term="Book"></category><category term="Review"></category></entry><entry><title>和食とはなにか 旨みの文化をさぐる を読んだ</title><link href="https://shufo.github.io/book-review-washoku-toha-nanika.html" rel="alternate"></link><published>2018-04-28T00:00:00+09:00</published><updated>2018-04-28T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-04-28:/book-review-washoku-toha-nanika.html</id><summary type="html">&lt;p&gt;原田信男著「和食とはなにか 旨みの文化をさぐる」を読んだ&lt;/p&gt;</summary><content type="html">&lt;p&gt;原田信男著、&lt;a href="http://amzn.asia/3458K92"&gt;和食とはなにか 旨みの文化をさぐる&lt;/a&gt;を読んだ&lt;/p&gt;
&lt;p&gt;最近なんか文化史とか人類史とか歴史物にハマってる。その一連の流れでこの本も読んだ。&lt;/p&gt;
&lt;p&gt;本書では古代の狩猟採集民が狩りから農耕生活へと移った 1 万年前から現在に至るまでの和食の文化史を紹介している。&lt;/p&gt;
&lt;p&gt;日本食を紹介というと安易な日本食礼賛のようなものが思い浮かぶけど本書はあくまで日本食の文化史を辿るもので、どういった必然性あるいは偶然性を経て和食が形成されているのかを紹介している。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5&gt;&lt;em&gt;あくまでも米は、アジアモンスーンという季節風が吹いて、雨季にたくさんの雨をもたらせてくれる地域での栽培が適していることになる。つまり米には大量の水が必要であるから、その水に 棲む魚とセットになった食文化が展開することになる。&lt;/em&gt;&lt;/h5&gt;
&lt;/blockquote&gt;
&lt;p&gt;おおまかに言えばアジアモンスーン地帯に適した稲作地帯と海と山に囲まれた地形、中国が近いことによる精進料理の輸入が和食にとって決定的な出来事で、偶然日本という緯度での気候に稲作文化が適していて、偶然海と山が多いことによる水資源の豊富さが和食という特色を生み出したことになる。&lt;/p&gt;
&lt;p&gt;ジャレド・ダイアモンドが「&lt;a href="http://amzn.asia/cCd1Vzl"&gt;銃・病原菌・鉄&lt;/a&gt;」で農耕民族が狩猟採集民を滅ぼしたことを示したように、食の歴史はその社会が辿った歴史そのものであり、普段あまりにも日常行為な「食」に意識を向けるということは歴史を意識することでもあり、その偶然性を意識することでもある。&lt;/p&gt;
&lt;p&gt;もし、日本の緯度があと 5 度ずれていたら、もし中国が近くになかったら、もし天武天皇が肉食禁止令を発しなかったら、もし山や河が身近になかったら今の和食というものは存在しなかったかもしれない。&lt;/p&gt;
&lt;p&gt;なぜ日本の主食は米なのか。なぜ醤油を使うのか。なぜ味噌を使うのか。なぜ生で刺身を食べるのか。普段当たり前のようにやっていることだからこそ意識しにくく、疑問にも思わないことは案外歴史を知ると答えが載っている。&lt;/p&gt;
&lt;p&gt;目の前にある食事を慢然と口に運んでいることを思い出させてくれる本だった。&lt;/p&gt;
&lt;p&gt;オーガもこう言っている。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/YeShSrI.png" style="width: 80%; margin-left: 0"&gt;&lt;/p&gt;
&lt;p&gt;たまにまともなことを言うだけで面白い男。&lt;/p&gt;
&lt;p&gt;まぁそれは置いといて普段当たり前に食べている和食だからこそ知っておきたい和食の「なぜ」への解答が大体そろっているような本なので和食好きは読んでおいて損はないかもしれない。&lt;/p&gt;</content><category term="Book"></category><category term="Review"></category></entry><entry><title>経済成長という呪い―欲望と進歩の人類史を読んだ</title><link href="https://shufo.github.io/book-review-le-monde-est-clos-et-let-desir-infini.html" rel="alternate"></link><published>2018-04-23T00:00:00+09:00</published><updated>2018-04-23T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-04-23:/book-review-le-monde-est-clos-et-let-desir-infini.html</id><summary type="html">&lt;p&gt;ダニエル・コーエン著「経済成長という呪い―欲望と進歩の人類史」を読んだ&lt;/p&gt;</summary><content type="html">&lt;p&gt;ダニエル・コーエン著「&lt;a href="http://amzn.asia/brEF6ti"&gt;経済成長という呪い―欲望と進歩の人類史&lt;/a&gt;」を読んだ&lt;/p&gt;
&lt;p&gt;最近 NHK で放送されて話題を呼んだ&lt;a href="https://www.youtube.com/watch?v=5p_Lm5M_wdA"&gt;欲望の資本主義&lt;/a&gt;でもインタビューされていたフランスの経済学者ダニエル・コーエンによる書籍。文化人類学、社会学、経済学などの知見を用いて資本主義に伴う経済成長の限界を解説している。&lt;/p&gt;
&lt;p&gt;簡単にまとめると、現状の資本主義の経済成長モデルは限界だから転換が必要ということらしい。&lt;/p&gt;
&lt;p&gt;ピケティの 21 世紀の資本論が示すようにアメリカでは経済成長の大部分が上位 10％の懐に収まり、90%の市民が購買力の上昇とは無関係だった。また中国での穏健なグローバリゼーションも国内の全ての国民に同レベルの生活を保証するには世界の資源が圧倒的に足りないという。何しろ１０億人だ。１０億人がほぼ同じ経済レベルに達するには何十もの国がいきなり先進国と同等の生活レベルになるようなものだ。現在の生活でも二酸化炭素などの環境への被害が深刻なことからこれ以上の経済成長には環境問題による上限が存在する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.weblio.jp/content/%E3%82%A2%E3%83%B3%E3%83%88%E3%83%AD%E3%83%9D%E3%82%BB%E3%83%B3"&gt;人新世&lt;/a&gt;(アントロポセン）の時代において、環境への影響は無視できずこれを解決しない限り無限の経済成長は難しいという。&lt;/p&gt;
&lt;p&gt;また IT 技術は労働を集約しはするものの労働を増やしはしない。これが理由で一部に富が集中しそれ以外は IT で置き換えられないような低賃金労働へ労働力が集中するため給与が上がらず格差が広がり賃金上昇の停滞を招いたと、多くの経済学者が認める。そして賃金上昇の停滞がイノベーションを停滞させ、全体での経済成長への停滞となっている、というのが本書の大筋での主張。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;グーグル、フェイスブック、ツイッターの三社を合わせても、今日のどの自動車メーカーよりも雇用者数が少ないのだ。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;四三％ の経済学者は、アメリカにおける賃金停滞の原因は、情報およびコミュニケーションに関する新たなテクノロジーにあると認める（三〇％ の経済学者は、そうかもしれないと述べる）。ブリニョルフソンとマカフィーが指摘するように、経済学者たちは「知られたくない真実」を（自分たち自身に）隠している。すなわち、全員が技術進歩の恩恵を受けるという保証などないのだ。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;実際テクノロジー産業に関わるものとしては実感としてよく分かる。IT は基本的に労働を減らす産業だから IT が進化すればするほど労働力が必要無くなる。かといって働かなくてよくなるわけでもなく、IT が労働力を奪う工場や銀行などから飲食業などへ労働力が流出し、賃金の低下を招く。IT テクノロジーは生産性を高めるが 18 世紀の産業革命のように工場といったような新しい職場を生み出しはしない。&lt;/p&gt;
&lt;p&gt;18 世紀の産業革命ではペストによる人口の大幅な減少により労働者の数が大幅に減り労働者の賃金が上昇し、購買力が増えたことで需要が生まれイノベーションが生まれ、都市の工場で働く中流階級が生まれた。あくまで人口減がイノベーションの原因であり、技術革新により賃金が上がったわけではない。&lt;/p&gt;
&lt;p&gt;IT から新しい職が産まれるのが困難な理由が情報技術が根本的にエントロピーを下げることで不確実性に対処する技術であることだとしたら、IT を推し進めていく限りこの雇用を生みだしていかない方向は不可避なように思える。AI や IT で置き換えることが難しい産業に積極的に投資していくか、BI で介入していくしかなさそうな気もする。&lt;/p&gt;
&lt;p&gt;またグローバル化で均質化した社会が差異を求めて難民排斥や人種差別の原因になったと分析する。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分断され続ける傾向のある世の中では、情報とコミュニケーションのテクノロジーが罠を仕掛ける。これらのテクノロジーにより、社会には調和が訪れ、他者と隔たりや差別なく、誰もが自由にコミュニケーションできる、アクセス・フリーでフラットな世界が誕生すると喧伝されてきた。実際には、コミュニケーションのコストが低下したため、仲間同士でしか交流しない隠れた世界がいくつもできあがったにすぎない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;ルネ・ジラールは、「差異の消失の危機」を分析した。彼は、次のように説いた。「どんな人間も自分が他者とは『ことなる』とは感じることなく、また『差異』を正当かつ必然的とは考えていないような、そんな文化はありえない。（……）&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;双子の存在は、差異の消失という暴力を想起させる、深刻な危機の予兆だと思われていたのだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;スケープゴートの犠牲者は、社会に平和を再びもたらすのである。このようにして、なぜこうした奇妙な紆余曲折を経て、寛容と自己の開花に専心すると思われたポスト工業社会の中核に、人種差別や外国人排斥が再燃したのかがわかる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原始社会では双子は不吉の予兆とされたり現代でもドッペルゲンガーは不吉の象徴とされたり、根本的に人間は差異を求めるものなのかもしれない。生物学的に求めているのか、社会学的なものなのかは分からないけど。SNS で効率よく均質化出来るようになった社会は差異を見つけ出したい人でいっぱいなのかもしれない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;状況への「馴化」と、常に適応しながらも期待値自体を下回るのではないかという心配の二つを組み合わせると、不快な結論が得られる。すなわち、われわれは常に不足という心配に悩まされ続けるのだ。どんなに注意しても、不足の心配は人間の心を常に苛む。人間が欲求から逃れるために豊かになっても、その新たな状態がすぐに新たな基準になり、すべては振り出しに戻るのである。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;民主主義と資本主義に付き添うポスト工業社会の進歩という名の啓蒙思想が経済成長を呪いのように支配していることを示し、精神構造の転換が必要なことを示して本書籍は終わる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;経済成長には三つの宗教的な構造があると記した。一つめは、経済成長は宗教として機能することだ。つまり、経済成長に関係しない考察は、すべて不敬として退けられるのだ。二つめは、経済成長は、「休みなく、そして情け容赦なく」であることだ。つまり、経済成長の示す論理は突き詰めなければならないのだ。三つめは、異議を唱えると、異端者として糾弾されることだ。つまり、富を生み出すための独創的な努力を惜しむ者は、呪われた者なのだ。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;現代社会は、経済成長なしでも持続できるのか。現代社会の職場が個人に課す重圧や個人の妬みを考慮すれば、正直に答えるとノーだ。経済は再び成長するだろうか。歴史を振り返り、環境問題という将来的な制約を考慮すれば、これも期待できない。ようするに、西洋社会は、怒りと暴力にまみれるという結論は避けがたいように思える。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;企業内、人々の間、国家間において、社会的なつながりを穏やかなものにするには、われわれは競争と妬みの文化を超越しなければならない。人々の精神構造はこれまでに何度も変化したが、それは政令によってではない。個人の熱い思いと社会的な欲求が同じ目的に向かって一致すれば、人々の精神構造は変化する。われわれは、まさにそのような瞬間にあるのだ&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;個人的には最近の Facebook に関する一連の流れが一つのきっかけになれればと思っている。自分がインターネット企業の商品であることを自覚し、オルタナティブを選択していく勇気を１人１人が持てば全体としてインターネットの多様性は保てる。そこに何か可能性があるのではと思っている。あってほしいなぁ。あれ。&lt;/p&gt;
&lt;p&gt;全体的には 2015 年以降での一般向けの啓蒙書という感じになっていてページ数も短めで割とあっさりよめるので最近の資本主義終末論など知りたい場合はいいかもしれない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;経営者は従業員に対し、「自主的になれ、自ら進んで行動しろ」と命令しながらも、事務手続きを増やし、ソフトウェアによる労務管理を強化し、従業員に自主的に行動するのを禁じている……。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;はい&lt;/p&gt;</content><category term="Book"></category><category term="Review"></category></entry><entry><title>Visual Studio Live Share (Preview) を使ってみた</title><link href="https://shufo.github.io/visual-studio-live-share.html" rel="alternate"></link><published>2018-04-19T00:00:00+09:00</published><updated>2018-04-19T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-04-19:/visual-studio-live-share.html</id><summary type="html">&lt;p&gt;ローカルサーバ共有便利&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://code.visualstudio.com/visual-studio-live-share"&gt;Visual Studio Live Share&lt;/a&gt; のプレビュー版の Invitation が届いていたので使ってみた&lt;/p&gt;
&lt;h3&gt;環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VSCode 1.22.2&lt;/li&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;Ubuntu 16.04 (Elementary OS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/liveshare/quickstart/share?utm_source=hs_email&amp;amp;utm_medium=email&amp;amp;utm_content=62213452&amp;amp;_hsenc=p2ANqtz--m9WZrFIPTxaPK0eTQ3uE4z6Yd7V-bkVsRtSa9amDCZtBMIExhOfl1uhzG27uu73HL3SzfjyrTI9fPcwC7zmN_dFaW7w&amp;amp;_hsmi=62213452"&gt;インストールガイド&lt;/a&gt;を参考に進める&lt;/p&gt;
&lt;p&gt;Windows 環境の場合は &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share 専用の拡張&lt;/a&gt;を入れれば即使えるが、Linux は追加でパッケージのインストールが必要。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libunwind8 \
liblttng-ust0 \
libcurl3 \
libssl1.0.0 \
libuuid1 \
libkrb5-3 \
zlib1g \
libicu55 \
gnome-keyring
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux 環境の場合は Live Share 拡張をインストールするとインストール手順が出るのでそれに従って進める。&lt;/p&gt;
&lt;h3&gt;所感&lt;/h3&gt;
&lt;p&gt;接続性はほぼ問題なし。エディタで現在開いているファイルや、ファイル作成もリアルタイムで行われる。&lt;/p&gt;
&lt;p&gt;ここまでは割とよくありがちなエディタ共有なので特に目立ったところはない。&lt;/p&gt;
&lt;p&gt;ポイントとしてはエディタの操作も共有されるため VSCode のブレークポイントも共有されるのでデバッグも同時に出来るところか。&lt;/p&gt;
&lt;h3&gt;ローカルサーバ共有&lt;/h3&gt;
&lt;p&gt;個人的にこれ便利だなと思ったのがローカルサーバ共有機能で、ホスト側で「Share Local Server」からポート番号を &lt;code&gt;80&lt;/code&gt; など指定すると、ホスト側のローカルのポートがクライアント側にフォワーディングされる&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" src="https://i.imgur.com/Y34EUM9.png"&gt;&lt;/p&gt;
&lt;p&gt;つまり、何が出来るかというとホスト側で 80 番で Web サーバを立ち上げて共有するとゲスト側のブラウザでも &lt;code&gt;localhost:80&lt;/code&gt; で動作確認出来る。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.teleconsole.com/"&gt;Teleconsole&lt;/a&gt;などのツールでポートフォワーディングは出来るが別のツールとなってしまうため VSCode でポートフォワーディングを完結出来るのは大きい。&lt;/p&gt;
&lt;h3&gt;ターミナル&lt;/h3&gt;
&lt;p&gt;コマンドは基本ホスト側からしか叩けない。基本的に主導権はホストでゲストは編集をサポートする役を想定しているのかもしれない。ペアプロなどで同時に編集する場合ホスト側からだけしかコマンド叩けないとゲスト側にコマンドについての知識がある場合ややこしくなる。なので基本的にはペアプロなどする場合はホスト側がメインで作業する側でゲストがサポート役ということになる。&lt;/p&gt;
&lt;p&gt;出来ればターミナル共有なども出来るとうれしい。&lt;/p&gt;
&lt;h3&gt;他困った点など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux → Windows だと IME の入力が確定するまで Windows 側に反映されないので入力しているかどうか分からない問題がある&lt;/li&gt;
&lt;li&gt;Windows → Linux だと IME の確定を待たずにリアルタイムで共有される&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="VSCode"></category></entry><entry><title>Kindle Oasis (2017)を買った</title><link href="https://shufo.github.io/kindle-oasis.html" rel="alternate"></link><published>2018-04-16T00:00:00+09:00</published><updated>2018-04-16T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-04-16:/kindle-oasis.html</id><summary type="html">&lt;p&gt;目立った隙はない。バッテリー以外は…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://amzn.asia/dHGDiPp"&gt;Kindle Oasis (2017)&lt;/a&gt; を買った&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.imgur.com/95T3k5Q.jpg"&gt;&lt;/p&gt;
&lt;p&gt;WiFi + 広告無しモデルで￥ 34k と Kindle シリーズの中ではハイエンドという位置づけになっているだけあって、筐体の金属のディティール等は満足度が高い。以前持っていた Kindle Paperwhite 初代と比べるとページ送りはかなり早くなっていてここはほぼ使っていてストレスを感じないレベルになっていた。あと物理ボタンがやっぱ楽で片手で持ちながら ﾎﾟﾁﾎﾟﾁ ページをめくれるのが素晴らしい。&lt;/p&gt;
&lt;p&gt;ただバッテリーの持ちが悪いというのはレビュー等でも&lt;a href="https://www.amazon.co.jp/gp/customer-reviews/R37D2V3PWJFQQC/ref=cm_cr_getr_d_rvw_ttl?ie=UTF8&amp;amp;ASIN=B06XDFJJRS"&gt;指摘されている&lt;/a&gt;通りで 1 日中使うとほぼ空になってしまうように感じる。
&lt;a href="https://www.reddit.com/r/kindle/comments/7bdg4w/2017_oasis_battery_life_not_what_i_was_expecting/dphauz0/"&gt;本のインデックスの作成でバッテリーを消費する&lt;/a&gt;というコメントもあり詳細は分からないけどそこまでバッテリーに期待しない方がよさそう。自分の使い方だとバッテリーが切れたら切れたで休みどころになるのと充電は 1 時間もすればフルになるので休憩タイムと割り切っている。&lt;/p&gt;
&lt;p&gt;防水性能は期待したとおりでシャワーが当たるくらいなら特に問題ない。画面に水滴がつくとレンズのようになり、それはそれで見辛いというのはあるが手で払えばまぁ問題ない。風呂にいれるとディスプレイ内部が結露するというレビューもあったけど動作範囲の温度が 0 度〜35 度くらいなので湯に直接浸けるとかしなければたぶん大丈夫だと思う。とはいえやっぱディスプレイについた水滴の処理が面倒なので今後水場では使わなさそうなので今思えば防水機能はいらないかもしれない。&lt;/p&gt;
&lt;p&gt;あと筐体背部はアルミニウムになっていて少し滑りやすい。ので、&lt;a href="https://item.rakuten.co.jp/asktrading/bkr17/"&gt;バンカーリング&lt;/a&gt;をつけておくと安定しそうなので後でつけてみたい。&lt;/p&gt;
&lt;p&gt;ディスプレイサイズは 7 インチで活字を読むサイズとしてはちょうどいい感じ。ただ漫画を読むにしては見開きのページなどが 1 ページに分割されてしまったりして（ページ下部に見開き表示用のポップアップがあるが）、せっかくの漫画の演出が台無しになってしまう場面もあるので個人的にはあまり使いたくない。見開きでオチを入れてくる場面でえーっとここは見開きだからポップアップをタップして…とかなるので興醒めになってしまうのだ。漫画は &lt;a href="https://read.amazon.co.jp/"&gt;Kindle Cloud Reader&lt;/a&gt; で PC の大きい画面で見たほうが楽しい。&lt;/p&gt;
&lt;p&gt;あとここしばらくはスマホの Kindle で電子書籍を読んでたけどやっぱ文字の質感が E-Ink は全然違う。質感で読書体験が変わるというとオカルトじみていると思われるかもしれないけど。スマホほど超高解像度ではないしむしろジャギってるぐらいだけど電気泳動方式でインクが実際に並べ替えられているアナログなところに読書のリアルさを感じる。アナログレコードに音楽のリアルさを感じるのに近いかもしれない。&lt;/p&gt;
&lt;p&gt;ちなみに上下を感知するセンサーが付いているので右手でも左手でも片手で持てるようになっていて寝返っても問題ないのは嬉しかった。&lt;/p&gt;
&lt;p&gt;明るさ自動調整はけっこうアバウトですごい明るくなったり、すこし傾けたら暗くなったりあまり精度はよくない印象。結局手動で調整している。&lt;/p&gt;
&lt;p&gt;まとめるとバッテリー以外は特に目立った隙もないし、読書体験を良くするためという目的なら満足度は高いと思う。&lt;/p&gt;
&lt;p&gt;★4.5 (最高 ★5)&lt;/p&gt;</content><category term="Gadget"></category><category term="Book"></category></entry><entry><title>エンジニアリング組織論への招待を読んだ</title><link href="https://shufo.github.io/book-review-engineering-organization.html" rel="alternate"></link><published>2018-04-15T00:00:00+09:00</published><updated>2018-04-15T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-04-15:/book-review-engineering-organization.html</id><summary type="html">&lt;p&gt;感想&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.amazon.co.jp/dp/B079TLW41L/"&gt;エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング&lt;/a&gt;を読んだので紹介とその感想を&lt;/p&gt;
&lt;p&gt;元々この著者の方は Qiita とかでもちょくちょく拝見していて&lt;a href="https://www.amazon.co.jp/dp/B00IR1HYGW/"&gt;アジャイルな見積りと計画づくり ～価値あるソフトウェアを育てる概念と技法～&lt;/a&gt;で紹介されていた SRSS 等の見積もり法を Qiita で&lt;a href="https://qiita.com/hirokidaichi/items/5a204a57a200569f755d#%E3%81%BE%E3%81%A8%E3%82%81"&gt;紹介されていた&lt;/a&gt;のがきっかけで知った。SRSS 法は、実際試した時にそこそこの精度で納期が収束したのでそういった方法に詳しい方なんだなーと思っていた。で、その方が組織論に関する本を出したのことでさっそく気になって買ってみた&lt;/p&gt;
&lt;p&gt;*&lt;/p&gt;
&lt;p&gt;Amazon の紹介欄より概要を引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「コミュニケーションにおける不確実性を減らすには？」「技術的負債を解消する方法とは？」「経営陣とエンジニア間の認識のずれを解消するには？」エンジニアリングにおける課題を解決する思考の整理方法やメンタリング手法を，さまざまな企業の技術組織アドバイザリーを務めている著者が解説。若手を戦力として育て上げ，成長する組織を設計・運営するためにおすすめの 1 冊です。&lt;/p&gt;
&lt;p&gt;（こんな方におすすめ）・開発チームの生産性を上げたいエンジニア・社内組織を改善したい経営者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;まずこの本は紹介にもある通り、開発チームの生産性を上げたいエンジニアから社内組織を改善したい経営者にも勧められる本とあるけど、技術書というよりは広い意味での組織論として読める書籍になっているので読者を限定しないで技術組織で活動している人なら誰でも読者の対象になりえる&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;「工学とは数学と自然科学を基礎とし、ときには人文社会科学の知見を用いて、公共の安全、健康、福祉のために有用な事物や快適な環境を構築することを目的とする学問である。」&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;広木 大地. エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング (Kindle の位置 No.299-301). 株式会社技術評論社. Kindle 版.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本書ではこの定義のとおり、ルーマンのシステム論や心の理論など人文社会科学や認知科学などの知識も援用して精神論には依拠しないあくまで科学的な立場から組織を捉え、エンジニアリングを行うことを推奨する&lt;/p&gt;
&lt;p&gt;また不確実性をいかに下げるかという全体として一貫した視点を通じてメンタリングや各種プラクティスを紹介している&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;エンジニアリングで重要なのは「どうしたら効率よく不確実性を減らしていける のか」 という考え方なのです。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;広木 大地. エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング (Kindle の位置 No.329-330). 株式会社技術評論社. Kindle 版.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「分からない」ということに対する根本的な不安を「不確実性」という言葉で言い表して、それにいかに対処するかというのが本書籍でのメインテーマになっている&lt;/p&gt;
&lt;p&gt;本書籍のよいところは結局のところ知り得ない他者の心を推察するということはしないで、あくまで他者の思考は推察出来ないという不可知論的な立場から科学的な手法を用いて問題解決をするというエンジニアリングを行うところで、そういう意味では真っ当な技術書でもある&lt;/p&gt;
&lt;p&gt;またこの本自体著者と読者がメンター（メンタリングする人）とメンティー（メンタリングを受ける人）のような関係になっていて、メンターとメンティーに存在する「情報の非対称性」を解消していくという構造になっていてメンタリングを受けている感覚になる&lt;/p&gt;
&lt;p&gt;実際自分もソフトウェアエンジニアによくありがちなコードに自分のアイデンティティを敷衍するということはよくやってしまいがちでそれに関する章は耳が痛いところも多かったけど、あらためて言語化して自分が目を逸らしていたところを可視化してもらえると安心感もあった。メンタリングがうまい人ってのはこういう人のことをいうんだろう。&lt;/p&gt;
&lt;p&gt;著者の広木さんが今まで Qiita 等で発表してきた情報を体系化したような書籍だったけど、既に内容を知ってる人には復習になるし知らない人にとってはアジャイルとか組織論とか各トピックへの入門的な情報にもなるのでとりあえず入門として買ってみるのもいいと思った&lt;/p&gt;
&lt;p&gt;下記リンク先で参考書籍等が紹介されているので、そこから各トピックを深堀りしてみるのも面白そう&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hirokidaichi/items/195d42ee056ea85a3150"&gt;エンジニアリング組織論への招待：リファレンスガイド第１章/第２章 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Review"></category></entry><entry><title>ニューヨーク旅行 + Panorama NYC Festival 2017 その３</title><link href="https://shufo.github.io/panorama-nyc-festival-2017-3.html" rel="alternate"></link><published>2018-01-16T00:00:00+09:00</published><updated>2018-01-16T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-01-16:/panorama-nyc-festival-2017-3.html</id><summary type="html">&lt;p&gt;去年の話&lt;/p&gt;</summary><content type="html">&lt;p&gt;もはや去年になってしまっていつ書き終わるのか分からないけど、Panorama NYC Festival 2017 &lt;a href="http://shufo.github.io/-panorama-nyc-festival-2017-2.html"&gt;1日目&lt;/a&gt;に続き2日目.&lt;/p&gt;
&lt;p&gt;前日は1時にホテルに帰ってシャワー浴びてもなんかアドレナリンが出ていたためか寝付きが悪く結局3時ぐらいに寝た割りには起床が早かった。
1日目なんとなく靴下履いていなかったから足の裏が水ぶくれやら皮がめくれてボロボロでさっそく先行き不安に。&lt;/p&gt;
&lt;p&gt;しばらくニュースとか見てぼーっとしていたら、10時頃になりハウスキーパーが入ってきたから身振りで1時間後に来てって伝えてとりあえずもう観光とフェスに行くことにしました。&lt;/p&gt;
&lt;p&gt;とりあえず近場にセントラルパークがあったので朝はそこに行きました。&lt;/p&gt;
&lt;iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d7838.830471446!2d-73.97753192816306!3d40.75581665750149!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e2!4m5!1s0x89c25902632db4a1%3A0x291a445cad85424a!2sClub+Quarters+Hotel%2C+Grand+Central%2C+East+45th+Street%2C+New+York%2C+NY%2C+United+States!3m2!1d40.753181!2d-73.97451199999999!4m5!1s0x89c2589a018531e3%3A0xb9df1f7387a94119!2sCentral+Park%2C+New+York%2C+NY%2C+United+States!3m2!1d40.7828647!2d-73.9653551!5e0!3m2!1sen!2sjp!4v1515913524449" width="600" height="450" frameborder="0" style="border:0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;ホテルからグランドセントラルの脇を通って5st近くまで行って北に行って徒歩で20分くらい。&lt;/p&gt;
&lt;p&gt;歩いている途中にセントパトリック大聖堂があった。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hzszhg.blu.livefilestore.com/y4meqdkT60TzgmcY9a2hS0qL2vpTqgKxVCxag2hKyGk8WBge9EvRTAtmVmpLToMmGx52VDtAjFdGvyNBPMTfb-g2ViClDJplbcN5cIdtAZSLFGqt9CiDjhNPl3LlJ3iOsLtx73RfxZ4gSpJS4IrihpTqWWtSwHrfQjMsB6CBleyRiEmPpZcykQml3rpX6UIyHEsAUipgjjUbrMFwE9fptJRaQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;5番街のブランドショップが軒を連ねる通りに急に現れるからビビるわ。でけえわ。&lt;/p&gt;
&lt;p&gt;例のタワー。武装警官がマシンガン片手に警護しててものものしさが半端ない。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hjszhg.bl3301.livefilestore.com/y4mUqOGMzP9WqXDapaMY-cuWB5unjb7MdNYkPXwb8NW1jUGyguBAHvr3ufkHERJrv3dW5APrIgn6WMH9gFYsdX72Uufv6t5qX4UzG9vW11z1H0DqEhX7V7jhOJfUcGxvbe5gY6MfK1MsmYWShIN-mPAlJwXG9yTlPEsUvDqaxhfFeUcDvRKPHce35xRRz_XjNfoYOJg8-aMjqbblAGFMc1ItQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;セントラルパーク近く。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ftszhg.bl3302.livefilestore.com/y4muXIoqEMOrfp79ya-TyFAKygZ9sWpK5ecA8dmDkcvU5gUIbrXc0g0-lYREkGR2rFDRDpmCzxdgSfFtindCEdOIZWL9drYsVPqDh4OqwLwLs2JSU-mWh1yGNL1G7GTdqi3HVPo3k7skS3_4t60YCDFBun4JhJWa3948J_UmTrsawPdjoVA4O6GseUDT3X9P_-diAaWj3M3bQbqAtf8DpU8pQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;5番外の入り口辺りからセントラルパークに入ります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://htqyqg.bl3302.livefilestore.com/y4mKE7fyJoPZl6ua7oD57NtbkgP66WxP2oJdwisPJtF4wzv2CvMDAJdvvDP_0Z-51P2rynKVLB5eUfuOpO3TrI1O9SSFvWhJY46zzHNyyuSDOQ_JciF88KPHVGpOosqvSHwoZRu_MKwpOHAuzz6BMwXy-Vy2PoZgsP5FQ62cObw0q4HhFYr3BxIA5hLxcyV4iVxNeN1TnENgt5id3zK9Z6JNQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;いちいち遊具が大きい。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hdqyqg.blu.livefilestore.com/y4m-QI03BHMQVVaa0CGAADLKfO530-9aTLPXeyCXNUnqZS0yUkSLmfQKf4JNijq8n86OUueigNRZzNUvY05KrKmBFA0U6CCFA7sqUreKmCjQcGMjHvUZCZA8oxlt89xxkM0TwImmZ0kqFFWQZhbK7cy41KMePPEH_ltlCGrXnrQ2-FiWBw-ZpZ24_q9LDre1RI5QRs9h5a9TTczgTQx4p8vhg?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;木々の間から見えるビル群が新宿御苑を彷彿とさせる。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gzqyqg.bl3302.livefilestore.com/y4m195o7ZB2ldVnzcHXUw9VAdxQRozcZdSUggQNdosOz8X2Dnnc3JHxCymylfRYrooEGwpoei5sHmZxoA3UwBCRZ9SccfJTimpsgNVHLKxdbGs1lAborFTBjdVjeOsExnTopOUCPs5sWH84LfG-IZg9qWbSPWqlEHU3IqqN7N0JHDHAL6hwNDl3XrfHCtZGyECV2ZI8hj4gCkyssfC8Tc_Uag?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;馬が優雅に公園内を闊歩している。ランニングコースが大盛況。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://eb9bzq.bl3302.livefilestore.com/y4mX9sL8GKLaSLb9Sm5h90jv5GxYAkh_wsPrm2dHfgM_iRVgiZJmYlz8gpLGShqf-5Ipf79xt_8k97279faP76TSKabWh0hVrs91HrWBt9jT-Gpx5FcglupiT6NYJeNQMd3v2TbT7zAwCIZSQ541orB9NyPpxnknEXZ7MZQb8k8M65n-37jVW08M6A6ePl2pWFnublbt_ZeB_0mVSQIz_n5Tw?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;何気ないけどベンチがとても多い。ベンチはニューヨーク市民の寄付で成り立っているらしく、一定以上の金額で寄付するとベンチに好きなメッセージを入れたバッジをつけることが出来るとか。公園内がめちゃくちゃ広いから歩き疲れたら座れる。尊い。&lt;/p&gt;
&lt;p&gt;ベンチの幅も広く最近ありがちなホームレス避けを意図したデザインになっておらず横にもなれそうなとこにベンチ愛を感じる。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ftslka.blu.livefilestore.com/y4mAzU83VG9yRmzmoF6tTTys-FFpMa8-6r_UJfCJ19o2jsYPJPE1kb3Vb0zVgndOyrRsegslFAyiORG-uu6v9mIlJpiiHvJOw4HH_hixrSCguEiQpg0WZJ8Ik3-X9cVZgsgirLPujt8fEUphBKtjpCsHkBwaMUo_VKhwk11_TR7A4u47uYuS95zpsfy4koyqyCL8Uxe6DvOTlNUBVOwko-L2Q?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;しばらく歩くとシープメドウに着きます。広い。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hjqyqg.bl3302.livefilestore.com/y4mkZr8Zifj7FtVsedYh9DxecZXqkZaEcCptOsH6Yp3g1yoncOtw6-DDDF3snNeBHX1GFOlXB0pkoBc0nf4YRiez9Z4cuJ2g8NcMrtu10ZAeHBSwlHCZsSPgLabiBG-vpR-ct08IvH-D8SvAh9kY_IjDRHAjM7_b_-AY3n7crOjWk4I_tg8PLpRtNP0qXTvp4w9q7o-JEgXeBCYiWvLvCPbbA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://fdqyqg.bl3302.livefilestore.com/y4mt4lII_4ip3wofXMzzj6Z_sh-XU1vPWJBdYdF9BP9JFD9B-ge-Iy1q87JoUN4GTAluqnTGOja9zavXwHswYgbOOlprar12b6yd9MMW4oWO3dKV_QfT9YS6gNNgZzYRN9D0Jk7gSNYfXLT0dxyVpDDVpRHUlThrMcV_Fubc9xuzjdmS376wwTy4nnADijjHUnLkYWubuCaZ6btsLSdrXx5yA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;ちょくちょく公園内で楽器を弾いている人がいてのどか。広い。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://itslka.bl3302.livefilestore.com/y4mFnlHtJk4OdeoLCQQR_HuXSlkv8wPN61xI_0ObU6UslL8W_6ZRziq3aGoefoeVpufLDappQAteuXfq-q8h81KKgLYGmKYZ1TR04z33MtOSB70_bAxOzKw2aorejVh5TgaHGSeRYux9NQOtLYaJAg-YpQgiYdiWhTBDbvFdW0r2_872hcJvbU6LPcO6sTRX1efg1cuHku1kiAeN9jnHOVzMA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;グレートローン。ここも広い。足を伸ばして地面に寝転んで休憩。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hzslka.bl3301.livefilestore.com/y4mRnKfLWDcIitjhkEJwyJpDuOIlwyRb0tBAf6XhtQcO2pMKxdl8LguTr0KPsplTli4AEnrOwurnC_6fwcJvJYzhc_EEo51BoISAtEntCkv02erLph-OHtHboVYZQlD5xdJPkFrpDDDlIUCm-IEA4ow3lKTusps9saR_msSjrZmicQFkEKZUDQqmgtgNvbl96tBlbwwdKRkU1Mbv2CXhJh_kw?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;セントラルパークの感想としてはほんと憩いの場って感じでよかった。広い道で散歩する人、ひたすら広い草原の広場で昼寝する人、日光浴する人、ランニングする人、サイクリングする人とそれぞれ思い思いの過ごし方をしていてニューヨークのど真ん中にタダで入れるこんな場所があるのが尊い。&lt;/p&gt;
&lt;p&gt;グレートローンまで行くと近くにメトロポリタン美術館があるので前日に取ったC3パスで寄ってゆきます。&lt;/p&gt;
&lt;p&gt;荷物検査を済ませて入場すると受付カウンターでC3パスのバーコードを見せてチケットに交換してもらいます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://htqkha.blu.livefilestore.com/y4mCOLPBH2wuUBsRtc-kJRlBy1BZFJVuwFaBL-Io2k2bk4ba_npYZ6SCFbsQkxJ5EGWFGvvtwS1kKgb7jdItqnFB18ZerIwSBOq-VHGxtVGHmPes9EhdKTbsYx6GLbHDW7rZEQY1VQOyIcRgFmPsX-Uk2wWzFyiYywAlLpkKoJA1m0PvaDweLSWgvvCm4nxd6U9pkr5AJ0I_kILUI7HtVOxAQ?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;今思えば最初は有名な場所だしC3パスあるし寄るかー程度だったけど何気にこの旅行で一番おもしろかったんじゃないか疑惑があります。事前に知識も仕入れず普段から美術館に行くような趣味もないけどなんとなく美術館のおもしろさが分かりました。&lt;/p&gt;
&lt;p&gt;まず世界3大美術館の一つに数えられるくらいあってとにかく広い。
あまりに広いから全部知ってるなんて状況はありえないわけでなんか行く先々に発見があります。RPGで新規エリアを常に開拓してる感じ。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gjqkha.bl3301.livefilestore.com/y4mw20jRWL3lg5FqNhV44FBlhRwMlk9bobIx2ikmh16C2Wz91rYGXQgzc6ypIYQDj3b2uYAa1R8oDw3Ofd2x1K-REc2svtLra4PNEwvHU1r83bVsgy9Ph6ycMIuKfX_ZD3VW4oGhDEUu7F2PwRz5MO76ssKV3Wj70bAYd1mug3G4o7R_n1EBrGZWq4Z0kJkoc7fUMe08NX_D9RpzOoiGWRi4w?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://idqkha.bl3302.livefilestore.com/y4mYEBbeOXYmyxj6rpJ5wOcx33GxSmVbZrNn_4iWMUVFC8CnCCItpOhurfD-asn3YyevnnIl57mOLGemcgYvKRfHTWPwFf6HAARTSszxQvNIKcf-Hzz5vqpdppI8v5mXGPsjrpYBjWJoaM-d8B6-1CPDzw_7YeJhZM5FNuvJKNvJ-A7ureZEB6xmX6udXWhicvUSim_1isORN-23Dv9NXPnfQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hzqkha.blu.livefilestore.com/y4m19jrfm24hzX1G8gLsH45BYBTuXyLHdRLhLuVSmBKgHLb91MrPUYTLxpAKbbxeLyAMqeSQwS3y4kyst3ZCbuYs6CLE1MfBgu9-hfIJeWxpdnvK1NFxCIaN8lUFkc5FDz0Az69HHtYLt50cmXOuw3Y9MnKzzwHJwMPG4DyN-HXF9NEkJy5ChXI9MGq7BIPkHTNhR02Dw9IdhzoDbXQrSDhig?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hjqkha.bl3302.livefilestore.com/y4mwkN9TofD0X90fz2J9WK6xgj1idJhXWGiSrkelW79fuE6fJaAIsKmHqFQMRB1aRAlTa4WLlAD6CHktxX9jAQML7irO7yWrzCd7PTnjpz3xwx4sToq5-4p25cKN68glscWfEmUE8abmVDBkPCJXAGpMTLo0NqApGBGZmuvNsL09Nfvj29WkgKlG5AoXz5y2ufBd6L2N7OIPtcyNZNJySGVHQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://erqvkg.bl3301.livefilestore.com/y4m_bh0xvYJwdW42r-skZNmG0PvIvYndtOGEeVEsURGo8sIZgbbUSF-F1-JYeJVmGug5EHNDJKaQiIy_e52c8YUc-k7mBR9kFVKwFrxR3PJvSCRDydCq3gxiK6zTza8Qtj6I9ZXyadSAVTnmZvLEl5B1f4wVDGOw7iUBLuqQ35qGjFaBMUgy_8Q8e9o_ekcot-kcNrR0c8a1iyfO8b391CFEg?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ebqvkg.bl3302.livefilestore.com/y4myDQT68KNS0gmw1xB2BR51GswpwAwSHfX0c0tinivR9mFfq9VsaIdw5da5Nmt8ef_YfSR0cGNkFylJUjttgGCCGdZdnjgXCIg0QsNglBQezYyDyiWP-DiPzhq0JfClsNzwR7yB1CApD0iCXUAsDFLgjBTC7NU-us6EyVoOmg2UTynvV_9raausydeNV2JAk8HphUFcB9M2QbP-Afwe5KWVg?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://grpfqq.blu.livefilestore.com/y4msDms51zxi9ie6oGvdFRV5u7xjK4fjkpTdg1KE9u9kMMB61dhoP7a-X82YKezDhLX9pFQ6SigVRZ_h6-Er8wXp982iS_J2f0paOhXGV9XIIl6T1XU19mTtltmxFmrJYkBIO8Kj-PCxKyz_aBvkFwbBvt7jwSyBJQ-ZDfBh3ei5KIlXZQlJlC6R4YJAUtgcRTHWih5Ep8W14uqrsyUPNkBPw?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gbpfqq.blu.livefilestore.com/y4msueENYw5B4lHO7zZ5GsVn2AXn7tDAI1rEpXqCUBttccktN5DPp1GqNgEhxi6ykLX_RXEIW5sbX8aU9Er7g6ODJI4z_flRMBkgyZy8PVRuc87_K9w0MI4hJK-kfgrHqIBV3xzwG2u_w-8EYugn7nxeh4BzTifuS0DupEPxAA0uO2-7rRsNPd1uUJOkEE8Otl9H33537vZjdjuo6la2KaLSw?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gl86hg.blu.livefilestore.com/y4mp9qAiivoXB4t9jmFjRXnDZWDil_flFakkg_BZ2sG31Wm4WUK-JR-GQCzyCpM5dXBQ8JF7IcW7bvebsd030pbNsMqeMd2OHS1r-qW1QTMzLvscFOkYdUPRJYKRYLDaoOXKPHJPY5Cc4XPKdM6gcy0G49V8CXM5qKQwdbxpF47JOBUZ17e4RRdyXcJBvlm75i4G4EGBNup6uo9l-xwM00Hqg?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hrpfqq.blu.livefilestore.com/y4mLyDG3tDyaKRvbvB0c7WnPktSLK2goycAEVcpPZeNBpvXkk227uB_jljE1db3ytCoPPrtz5UkYWrr8EOM-iHr1mXSNrx0zmIb2_qt9IJo9blkTF4MljQD1qniwb27HF2UGp_azMKz3EQspt2NClOCeB_rFPR6tgz73ncKbJAko-EMTM8SjFVCfx37jMX4MfEb2CNJCNQk5as35-bcbo5AIA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gl8enq.blu.livefilestore.com/y4mvD9eSQGExdDtiT5-_On4YOu9X0rNbU7cyE2n2ALtXJZkS-efG5Rneb3837uYSNEdW7TRE0hRcB464507eGFgO_GIlGzLip9Pkym1AKDV1b1E4nJ4ktEAeeks6fl3GxzffcA07Kj9KaitNQYfzoELX2rj1SJpWqyp2EXQhGelbyZzzWyt5FRXw6lnfD22JhFmXhm-BbDuqABcnJXHn4Bcvw?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://f78enq.blu.livefilestore.com/y4mXh-WxZrlvBHmbrR8F9BIHtMd6FmylJmiM6g5MOTHoT9SlqRvR7n_ZHNqRZ_frETJPOIJgvpa4dfue_w4kScNBhHd7rWLMo9QlpaySzHHR06kH8zV16DUNyG0QSF5YAE2Couv1JJl9gSm8Ruzd4z8RfDeuO_iqLDhlajlGPNiDKV-5rbFR9-hF6oGLGG7y1PS6XYH6xcoddALsjEVZEk3CQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gb8enq.blu.livefilestore.com/y4miCReXP6YcdP43xVNyMm8Yi8meo5kk_qlTzk4Z-Jzx6mmyOBZTha1SwMp-KO3QrLmwvl007BFEi1sBnnUk1DKleY4zZku7fkUNSSHIEywrlwB_1CXhwmwK1adRCD-aiCqa6ddh60UyBjn9ftqX2oztYuPnDfHD82_kA0f0u5s1qQ2ptpwVveRMTXHt-oSM5e79I3X334WHV6rMPZuV15wug?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hb8enq.blu.livefilestore.com/y4mNxkkMaRcGzKbHnGYYaIyTc01ijYTKe0ges-ljSQXyQsaKnHo5pWGtcV09nLkMlFoKlV4EekpUqFaMwlf4JfmWRm8Gf1ecdBvHNCycgbv7lBCvhL3uG_-ybHKHi5IOjBqAMR-1WWUKKy8klmg221IDyyGJ8QmmkQ3nUJmCSBAPyh2nVXozugZagRpdW7UHXPStDDYrVOGABVYjUlc5alXKw?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hl8enq.bl3301.livefilestore.com/y4mXfvb8iBFS_pOji95v_ArtqmOFLhza44aEIUy4kqKPIKXmEJzngWAV1hclvSbxJwxk2ze6abun4Tzqyo-EFCxX72keM1xliBM47pEci0Kl_iVPkeF6b0z-HiEkxRgtjvXB7Ed72q5ecX_i5Uuw51P1yZkRD_eZgizhW38PJmANHmA2ppntBCje8k_4ZKgjRYWVDUWZZFT4H2nXrK8fR8OFA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://eb8enq.bl3301.livefilestore.com/y4mXhFk7Q7couLVfNtw3ys-AomcgeBlKGVUAIvL7B0kaAwKvjSrKCOXjnFoFdgRHJ0H49WcZIZGp2RbTrUBaY1fNGshnG3Xabdxh6028x8eBDsQ-Tz024mnZvrFJ75I0dfH9lhSU3Uyy6bnBXp-QCnW5_vg8dcIC7nXt-YZLjs1Iuh-Raof9ymBfNNB_gyDtVIZSPEtgNsbJ1yTddrKWgl1cQ?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gr9bzq.bl3302.livefilestore.com/y4mewzRlrZPitooGBZGZYenZQIhJg_G8EdoRUdrZrMAeO5JrCdD1EJhz7uS9yVay8B2XwmDC0CnS9tJeL7HlolNpggk4rhkmxD1mUhwelIuB-CUac24pARAMkZW2C5cHZTC4N_cWNrcDcQ5G_1rTd9kJUbf0CGmzc7lu5VuhTk0VrUxGBeq5sBH-JPdFxjjdW_tFMU-sybdB9KLjw77I_5blw?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;（情報量が多すぎて頭がパンクする音）&lt;/p&gt;
&lt;p&gt;古代から現代アートまであらゆる時代の美術品が詰め込まれていてとにかく飽きない。ロックフェラー財団の財力途方もない。&lt;/p&gt;
&lt;p&gt;1日で周ったからかなり急ぎ足だったけどそれでも2, 3時間ぐらいは余裕でかかったし、全然見れてないエリアも多かった。普段美術館とかあまり興味ないけどあのレベルなら時間が許す限り見て見たかった。NY観光なら絶対行った方がいいレベル。&lt;/p&gt;
&lt;p&gt;見終わるともう午後になっていた。メトロポリタン美術館を出てフェスに向かおうとしたけど、IDを持ってくるの忘れてたのと朝から情報量多すぎてなんか頭が熱っぽくてフラフラしてきたので1回ホテルに戻りました。&lt;/p&gt;
&lt;p&gt;ホテルに戻ると疲れと頭が痛いのでロキソニン飲んで軽く横になったら18時頃になってた。少し寝たら大分回復したので再度Panoramaに行きます。
ランドール島に行く途中でマンハッタンから来たのか？みたいなことを通りすがりの人に聞かれたりほんとアメリカは知らない人にもバンバン声掛けるなぁと思った。&lt;/p&gt;
&lt;p&gt;昨日のリストバンドで入場した頃にはもう陽が傾きかけていた。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gb9bzq.bl3301.livefilestore.com/y4m-3nzPbSK0RfqT5saUa4YTfq9G1s9qNYQCbIFqdOWSgm5uoW1wcK6GFq2J3Ewj_JW_0PG0kWubegZkh5zsaljTw9ViXSD9STf-E17ULPG9x6TSnb8ePJAxaD0VGuL7WXLEZWor77zf6Ev_bhprZdz7eWOPoleOJHLHuE3Ol_s4y4ps4NN1t8fOy-iHngFBiRqSmZGa_rLwCStw2_P6KTSyQ?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;芝生の向こうに見えるビルと夕日のコントラストが美しい。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://f79bzq.blu.livefilestore.com/y4mphVXenH5QZbGLXEpPJTHz4p4Fje9BTJTH8blieJpD1PdrFBOS0X1zDZ-Fq3WEIxOcsgK7BXXUjCxLI6qyktr3ObNlwLeOCPfeox7pUrcieVMhm8MK2T7ZIkuNKjbvqwQaESTplkxknzfoJv7syHpDAH8kavvCT1y_28hjNli_augy2mSLMgWmq_8Y92S7P7QOT2IJ7iYBkDxdAXSdjBo2w?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;ちょうどChet Feckerが演奏していた。夕方辺りは風が吹いてきて気持ちいい。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hr9bzq.blu.livefilestore.com/y4mjGF19sUqCc7dJHe3z1VVoqnAxAc4pbeA8YGkSj_3t3YgLbiwxBY_-zz1DITGW8CmUAV7rDxRWDQQafzXqFPZ477OGKLLwQfgs3aQD3jp5qbyuVptX8n_9m8570VCX6stHk4UpQY4CRg6Chk14WqiqBiG_rP7QZTLaLEjcgAZ7oGZHugcoP_v98YScPN_4s_bYsIwTV5rcdyFJ_8hx2QQUw?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hb9bzq.bl3302.livefilestore.com/y4mHTQWuUisf7SWiquNOUyM1KOYj7CmxlorJyhV7hoCIJ88ypWa9n3bG8xrQA4NJAci5A16biZwFCwBG7xuUzqbQOyQuiFhbnBTi9koQFNW3xxPvXSSd7LWnzP4ziUQygGcpcOILwEnugnkkDC8ew3_JfuBbO36yqdVfnhOLwp-0Yn6hovzifLIdT6_KBFXDJC2YSrqLrdoOut5qfztPuSdJQ?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;そして楽しみにしていたNicolas Jaarを見るためParlorへ移動。&lt;/p&gt;
&lt;p&gt;感想としては想像していたのと全然違ったけど想像以上だった。最新作の&lt;a href="https://open.spotify.com/album/2EvZiOMBlC9b5hbjbZCjZv"&gt;Sirens&lt;/a&gt;を聞いた感じだとアンビエント的な感じでやるのかと思ったらゴリゴリ低音出してきて4つ打ちとかも流して完全にParlorがダンスフロアになっていた。&lt;/p&gt;
&lt;p&gt;ノイズの入れ方とかビートの入れ方が天才。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://er9bzq.blu.livefilestore.com/y4mPktVLBezatqKTlhrunEcSTYEWkA-e7vbwp4y5Z3ToAo7av8qFNLCFzMKm28N7AUQs9MxPMjMgf5fh_EOKo2zHxNCshDDFjTMF73JAw5oGIn9Mbgc4nyTwdLDHXLIYYoam-eneBIRZwcOJtstwxr1JX51WN2BXpQHTZXPQBOnDaYg1jQr2TVyJS16MemARTiJfogca12O8PrJlHygBSPrBg?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;終わったらメインのTame Impalaに移動。&lt;/p&gt;
&lt;p&gt;でも朝から動きっぱなしで疲れていたのと明日見たいのが多かったので半分くらい見て22時ぐらいで切り上げて帰宅。&lt;/p&gt;
&lt;p&gt;DJブースの周りはまだ踊ってる人が多い。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hbpm8a.bl3302.livefilestore.com/y4myhNTblxCdKO5uP7eSzBqHtTJqzIp3MniinpNkrupn-WiqqUyAfROoSSLNUdYuhUO2Y1sj4bN_C9oAlpz370snv-yL_OawVs6V2qj8hyIqAohVssbh809YfxmFSDdA6jWufH6jXvphAzBRE6QiJxr56cR8EG0twEzrk8M-dCwjmeuBnecCfqNmeh-U9D-ZxqPc-H6LhvOlpBZfZkYDIWMoA?width=4032&amp;height=3024&amp;cropmode=none" width="4032" height="3024" /&gt;&lt;/p&gt;
&lt;p&gt;昨日と同じくシャトルバスで125st近くまで運んでもらって6番線でグランドセントラルまで移動。&lt;/p&gt;
&lt;p&gt;レストランに入る気力がなかったので&lt;a href="https://www.yelp.com/menu/uma-temakeria-hand-rolled-sushi-new-york/item/uma-ritto"&gt;Uma ritto&lt;/a&gt;とかいう会場で売ってた巻き寿司を1パック買ってホテルに持ち帰って食した。久しぶりに日本食食べて安心。味噌汁が飲みたい。&lt;/p&gt;
&lt;p&gt;インスタ萎え。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://erpm8a.bl3302.livefilestore.com/y4mcO47uHbeg_Otu_td2oIGbBs24QEv4bP_85s3TbabTqPMhWgkpYEdm4kS5TD3Bq9PPvqo2EPoJYnV4Dh7ogbUtkoZme0RFkJ09rXEmuRPQ_SrcSDuOSunU8PpVZG9YOHvGPPsoK-kVuJ0FisrOso8iWDrzM28am3djcfCnUG_2AyvO59fiP4c_o1XWm4rsLKhJemRTAIL2BXc4XK_LaYFPA?width=3024&amp;height=4032&amp;cropmode=none" width="3024" height="4032" /&gt;&lt;/p&gt;
&lt;p&gt;Panorama 3日目へ続く…&lt;/p&gt;</content><category term="festival"></category><category term="vacation"></category></entry><entry><title>2017年にElixirを仕事で使った振り返り</title><link href="https://shufo.github.io/my-elixir-status-of-the-last-year.html" rel="alternate"></link><published>2018-01-12T00:00:00+09:00</published><updated>2018-01-12T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-01-12:/my-elixir-status-of-the-last-year.html</id><summary type="html">&lt;p&gt;1年と少しElixirを使った感想など&lt;/p&gt;</summary><content type="html">&lt;p&gt;少し遅くなったけど2017年にElixirを使った振り返りをしてみる。(&lt;s&gt;年末年始ダラダラしてて書くの遅れた&lt;/s&gt;
)&lt;/p&gt;
&lt;p&gt;以下のElixir環境まとめエントリーに触発されました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/melpon/items/1502c403b7b5f37e325f"&gt;Elixir のチームでの開発環境について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.m3tech.blog/entry/elixir-development-environment-2017"&gt;エムスリーでの Elixir 開発環境 ver.2017 #m3dev - エムスリーテックブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ndruger/items/f6bd35bb0aede78b827d"&gt;Elixir 開発環境 2017 in ACCESS - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elixirは2016年ごろから&lt;a href="https://qiita.com/shufo/items/9cfb7bfcecd363e0ea86"&gt;触っていた&lt;/a&gt;のだけど2016年後半から2017年は仕事としてもほぼフルタイムで使っていたため、使ってるうちによかった点や辛かった点、開発環境など振り返ってみる。&lt;/p&gt;
&lt;h2&gt;よかったところ&lt;/h2&gt;
&lt;h3&gt;堅牢性(robustness)&lt;/h3&gt;
&lt;p&gt;これは本当に頑強でErlang VMが直接的な原因でサーバが落ちたということは本番運用も含めて１年ぐらい稼働させてる中でなかったと思う。可用性nine nines(99.9999999%)はガチ。逆にやることなさすぎて暇になるやつ&lt;/p&gt;
&lt;h3&gt;エコシステム&lt;/h3&gt;
&lt;p&gt;ここ1, 2年で大分充実した。Hex.pmに登録されているパッケージの数は&lt;a href="https://medium.com/@cameronp/is-the-elixir-ecosystem-mature-enough-for-production-apps-79fbf9f2df31"&gt;2016年2月の段階で1455個&lt;/a&gt;だったのが2018年1月現在&lt;strong&gt;5702&lt;/strong&gt;個になった。約1年10ヶ月で約380%の増加。以前は主要なWebサービスでもAPIクライアントがないというようなこともあったけど最近はほぼないんじゃないんだろうか。&lt;/p&gt;
&lt;p&gt;また&lt;a href="http://phoenixframework.org/blog/phoenix-1-3-0-released"&gt;Phoenix 1.3&lt;/a&gt;がリリースされた. &lt;a href="https://qiita.com/shufo/items/f0c85a100728a39dde13"&gt;ディレクトリ構造が変わったりContextという概念の導入&lt;/a&gt;などもあり若干脱Railsっぽくなってきている。既存のディレクトリ構造のままアップデートも可能なのでそのままアップデートして新しい機能を使うもよし、Phoenix 1.3 styleで始めるもよし。&lt;/p&gt;
&lt;p&gt;以前言われていたほどパッケージが少ない問題はなくなってきていると思うのでそこが懸念点になる場合も今はあまりないと思う。&lt;/p&gt;
&lt;h3&gt;コミュニティ&lt;/h3&gt;
&lt;p&gt;ここ1年半ほどでゆるやかに成長してきた。&lt;/p&gt;
&lt;p&gt;以下のグラフはRedditの言語別subredditのsubscriber数の統計だが、恐らく同じようなパラダイムで領域もそこそこ被ってると思われるClojureやScalaと比較して後発ながら伸び率も悪くない。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" src="https://i.imgur.com/8cEXJbn.png"&gt;&lt;/p&gt;
&lt;p&gt;急に人口が増えたら増えたでバックグラウンドの違うステークホルダーが増えてコミュニティが混乱する気がするのでこのぐらいの伸び率でちょうどいいと思う。&lt;/p&gt;
&lt;h3&gt;生産性&lt;/h3&gt;
&lt;p&gt;最初はElixirを部分的に使って管理系の画面はPHPなどで作ろうかと考えていたけどPhoenixの生産性がほぼ他のFWと変わらなかったので結局管理系も含めて全てElixirで作っているぐらいには問題ない&lt;/p&gt;
&lt;h3&gt;楽しい&lt;/h3&gt;
&lt;p&gt;Elixirはたのしい（語彙力）&lt;/p&gt;
&lt;h2&gt;つらかったところ&lt;/h2&gt;
&lt;p&gt;逆に使っているうちにつらかった点など&lt;/p&gt;
&lt;h3&gt;コンパイル時間&lt;/h3&gt;
&lt;p&gt;通常Elixirはコンパイル時に変更のあったファイルのみ再コンパイルされるのだけど、変更のあったファイル以外にも依存のあるファイルが再コンパイルされる。小さなライブラリレベルでは問題ないのだけどPhoenixを利用したWeb系の開発ではファイル数も多くなってきてコンパイル時間が大きくなるのが地味に効いてくる。&lt;/p&gt;
&lt;p&gt;ちなみに再コンパイルの基準は&lt;code&gt;compile-time dependency&lt;/code&gt;が存在するかどうかで決まる。&lt;/p&gt;
&lt;p&gt;例えば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; を使用したとき&lt;/li&gt;
&lt;li&gt;Structを使用したとき&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;に&lt;code&gt;compile-time dependency&lt;/code&gt;が追加され再コンパイル対象が増える。&lt;/p&gt;
&lt;p&gt;Elixir 1.6で&lt;code&gt;mix xref graph --format stats&lt;/code&gt;でcompile-time dependencyの多いファイルを&lt;a href="https://github.com/elixir-lang/elixir/releases/tag/v1.6.0-rc.0"&gt;確認出来るようになる&lt;/a&gt;のでCIなどでチェックしてあげるといいと思います&lt;/p&gt;
&lt;p&gt;参照: &lt;a href="http://milhouseonsoftware.com/2016/08/11/understanding-elixir-recompilation/"&gt;Understanding Elixir's recompilation&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;他の言語を使った時&lt;/h3&gt;
&lt;p&gt;デメリットというかパターンマッチングがないと辛くなるようになってしまった(?)&lt;/p&gt;
&lt;h2&gt;開発環境&lt;/h2&gt;
&lt;h3&gt;コーディング規約&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/shufo/items/f5e3ccd4892288449ff9"&gt;Elixir 1.6のcode formatter&lt;/a&gt;を使っている。1.6.0-devの開発版に既に入っていたのでローカルとCIでのチェック用に1.6.0正式版に先行して導入したけど最高だったのでみんな使いましょう。コードレビューでコーディング規約に関する指摘をしなくてよくなるだけで大分脳の負荷が違います。&lt;/p&gt;
&lt;h3&gt;テスト&lt;/h3&gt;
&lt;p&gt;特に特別なことはしてないけどExUnitと&lt;a href="https://github.com/HashNuke/hound"&gt;hound&lt;/a&gt;でE2Eテストをしている&lt;/p&gt;
&lt;p&gt;PhantomJSをバックエンドにE2Eテストしているけど挙動が微妙にブラウザと違ったりdeprecatedになっているのでそろそろHeadless Chromeに置き換えたい&lt;/p&gt;
&lt;p&gt;カバレッジは取ってないけど体感大体8割くらいはテスト書いてる&lt;/p&gt;
&lt;h3&gt;デプロイ&lt;/h3&gt;
&lt;p&gt;ローカル: docker + docker-compose&lt;/p&gt;
&lt;p&gt;本番: ECS + Distributed Erlang&lt;/p&gt;
&lt;p&gt;たぶんElixirで一番悩むところがデプロイだと思うけど、&lt;a href="https://12factor.net/ja/dev-prod-parity"&gt;開発/本番一致&lt;/a&gt;の原則のためDockerでデプロイしている。&lt;a href="https://github.com/shufo/docker-phoenix"&gt;ベースイメージ&lt;/a&gt;はpublicでDockerHubに公開しローカルと本番で共通のベースイメージを使っている。&lt;/p&gt;
&lt;p&gt;CIはCircleCIでテスト、コンパイル、docker imageの作成とプライベートなDockerHubのリポジトリへのpush、ECSのタスク更新を行う。&lt;/p&gt;
&lt;p&gt;ちなみに&lt;a href="https://github.com/bitwalker/distillery"&gt;Distillery&lt;/a&gt;は使っていない。Dockerを使っている以上リリースのたびにプロセスが再起動されるので長期間に渡って起動されるようなプロセスもなくremote consoleを使ってプロセスのstateまで閲覧してデバッグしないといけないような状況も発生しづらくメリットも薄いと考えたからだ。OTP releaseは使わずコンパイル済みのソースを含めたイメージ内で&lt;code&gt;mix&lt;/code&gt;でサーバを起動している。今のところ起動中のプロセスのstateまで確認しないと分からないようなエッジケースには出会ったことはないが、そのようなケースになった時はremote console用にOTP releaseにしてみたい。&lt;/p&gt;
&lt;p&gt;あとしばらくPhoenixのChannelのPubSubのアダプターとしてRedisを使っていたが無駄に単一障害点や管理ポイントを増やしたくないので分散Erlangクラスタを組んで&lt;a href="https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.PG2.html"&gt;PG2&lt;/a&gt;をアダプターとして使っている。RedisをPubSubサーバとして使っていた頃は少しレイテンシがあったりRedisサーバの負荷によってはPubSubが不安定になったりしたけどPG2にしてからは全くそういうのがなくなった。&lt;/p&gt;
&lt;p&gt;余計な不確実性を持ち込まないという意味でも言語のランタイムレベルで問題を解決出来るというのは精神衛生的にも良い。&lt;/p&gt;
&lt;p&gt;コンテナ起動時にどのようにしてコンテナ内のプロセスをDistributed Erlang(Elixir)クラスタに参加させるかについては、&lt;code&gt;ERL_AFLAGS&lt;/code&gt;でVM間通信に使うポートを固定しコンテナ起動時のポートマッピングで固定したポートへのudp, tcpパケットを通している&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ERL_AFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-name app@&lt;/span&gt;&lt;span class="nv"&gt;$ERL_HOST&lt;/span&gt;&lt;span class="s2"&gt; \&lt;/span&gt;
&lt;span class="s2"&gt;  -setcookie &lt;/span&gt;&lt;span class="nv"&gt;$ERL_COOKIE&lt;/span&gt;&lt;span class="s2"&gt; \&lt;/span&gt;
&lt;span class="s2"&gt;  -kernel inet_dist_listen_min 4370 \&lt;/span&gt;
&lt;span class="s2"&gt;          inet_dist_listen_max 4370&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下はECS task definition。&lt;code&gt;4369&lt;/code&gt;はepmdが固定で使うポートで&lt;code&gt;4370&lt;/code&gt;はepmdが動的に割り当てるポートを固定で指定したもの。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;〜中略〜&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;portMappings&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;containerPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hostPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;containerPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hostPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;udp&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;containerPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hostPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;containerPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hostPort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;udp&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;〜中略〜&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サービスディスカバリは&lt;a href="https://github.com/mrluc/peerage"&gt;peerage&lt;/a&gt;でカスタムのディスカバリを作成しredisにexpire付きでEC2のmetadataから取得した自身のホストの(コンテナではない)プライベートIPアドレスを保存して定期的にホストの一覧を走査して取得している。&lt;/p&gt;
&lt;p&gt;なぜこうしているかというとEC2上ではmulticast udpが基本使えず（&lt;a href="https://www.weave.works"&gt;Weave&lt;/a&gt;などでoverlay networkを構築する方法もあるがオーバーヘッドが大きい）またgossipプロトコルを使うにもdockerコンテナのnetwork modeをhostにしなければならない→&lt;code&gt;network=host&lt;/code&gt;にするとlinkオプションが使えない→分離したnginxコンテナからlink出来ないという状態になるので、半自動的なクラスタリングはせずに地道にサービス一覧を取得し、それぞれのホストに対して定期的に&lt;code&gt;Node.connetct/1&lt;/code&gt;するようなディスカバリを書いている&lt;/p&gt;
&lt;p&gt;long-running processを作れたりHot Upgrade出来るところがBEAMの強みでもあるけどdockerを使うことでデプロイの度にコンテナは破棄されるのでその利点は失われることは覚悟しないといけない。とはいえ実際にその機能は切り札のようなものでHot Upgrade自体のテストやロールバック等も考えると大半の場合は無停止でのアップグレードなどはインフラを含めたアプリケーション全体のアーキテクチャで吸収した方がいいとは思うのでElixirは基本コンテナの起動・停止で影響の出るようなステートを保持しない方針でdockerでワンバイナリのように扱っている。&lt;/p&gt;
&lt;h2&gt;作ったパッケージ&lt;/h2&gt;
&lt;p&gt;分量が少ないので1年程使う中でお仕事的に必要になったり個人的な興味で作ったパッケージが&lt;a href="https://hex.pm/users/shufo"&gt;10個&lt;/a&gt;に達したので感想など&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/cdn"&gt;cdn&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Elixirで初めて作成したパッケージ。&lt;/p&gt;
&lt;p&gt;Laravelの&lt;a href="https://github.com/Vinelab/cdn"&gt;cdn&lt;/a&gt;というパッケージをportした。
S3に特定のディレクトリ（&lt;code&gt;priv/assets&lt;/code&gt;とか）を更新時や差分等を考慮してアップロード出来る。またCloudFrontから配布するためのパスを生成出来る 例: &lt;code&gt;cdn(static_path(conn, "/css/main.css"))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wiki/shufo/cdn/img/upload.gif"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ma2ge/items/0e19bf3f03078f589096"&gt;Hex.pmへのパッケージの公開の仕方&lt;/a&gt;を学ぶ&lt;/li&gt;
&lt;li&gt;&lt;a href="http://elixir-lang.github.io/getting-started/mix-otp/docs-tests-and-with.html"&gt;doctest&lt;/a&gt;便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/plug_rate_limit_redis"&gt;plug_rate_limit_redis&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;rate limitをredisをデータストアに&lt;a href="https://github.com/elixir-plug/plug"&gt;plug&lt;/a&gt;で実現するパッケージ&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="nc"&gt;RateLimit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;interval_seconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;max_requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;自作plugの作り方を学ぶ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/payjp-elixir"&gt;payjp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pay.jp/"&gt;PAY.JP&lt;/a&gt;のAPIクライアント。公式のクライアントライブラリがなかったので作成。
&lt;a href="https://github.com/code-corps/stripity_stripe"&gt;Stripe&lt;/a&gt;のクライアントを参考にした。&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="ss"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;An Elixir Test Account&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ss"&gt;app_attr1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xyz&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ss"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4242424242424242&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;exp_month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;exp_year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;cvc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Joe Test User&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nc"&gt;Payjp.Customers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;APIクライアントの作り方を学ぶ&lt;/li&gt;
&lt;li&gt;外部APIのテストには&lt;a href="https://github.com/parroty/exvcr"&gt;ExVCR&lt;/a&gt;を使うとリクエストを再現して実際叩かないようにしてくれるので便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/paidy-elixir"&gt;paidy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://paidy.com/"&gt;Paidy&lt;/a&gt;のAPIクライアント。同じく公式にクライアントライブラリがなかったので作成。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/ex_line_pay"&gt;ex_line_pay&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://line.me/en/pay"&gt;LINE PAY&lt;/a&gt;のAPIクライアント。同じく類似パッケージが(ry&lt;/p&gt;
&lt;p&gt;APIクライアントは一度ベースを作るとあとはエンドポイントとモジュールをちょっと調整すれば大体似通った作りになるので楽ですね。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/fcmex"&gt;fcmex&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://firebase.google.com/docs/cloud-messaging/"&gt;FCM&lt;/a&gt;(Firebase Cloud Messaging)のAPIクライアント&lt;/p&gt;
&lt;p&gt;FCM側にRate Limitがあり1リクエストあたり1000件までしかデバイスTokenを送信出来ないのと、短時間で大量のプッシュ通知を送信出来るように&lt;a href="https://hexdocs.pm/flow"&gt;Flow&lt;/a&gt;で流量を考慮しつつ並列度、CPU効率を考えて送信出来るようにした。&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/activity_log"&gt;activity_log&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ロギング周りの実装で&lt;a href="https://www.w3.org/TR/activitystreams-core/"&gt;Activity Streams&lt;/a&gt;風のスキーマを定義したくてDSLが欲しくなったのでmacroで実装。
EctoのSchema風にしたかったのでEctoを参考にしたりした。&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# スキーマ定義&lt;/span&gt;
&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;MyApp.Activity.Article&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;ActivityLog&lt;/span&gt;

  &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;actor&lt;/span&gt;  &lt;span class="ss"&gt;:user&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="ss"&gt;:article&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; created &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ログ出力&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="nc"&gt;MyApp.Activity.Article&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nc"&gt;Article.Actor&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nc"&gt;Article.Object&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;My article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;ActivityLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# outputs&lt;/span&gt;
&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;32.128&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;My article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;foo createed My article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;actor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;2017-10-15T20:29:32.128192Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@context&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;:&amp;quot;https://github.com/shufo/activity_log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="ss"&gt;:ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Macroの強力さと諸刃の剣さを理解&lt;/li&gt;
&lt;li&gt;でもやっぱDSL便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/plug_cache"&gt;plug_cache&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;特定のリクエストパスに対するレスポンスをキャッシュするplug。
ETSでインメモリでキャッシュを保存するからキャッシュサーバ等は不要。分散Erlangクラスタを組んでいる場合は分散キャッシュを使ってクラスタ全体で一意なキャッシュのinvalidationなども出来る。&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;MyApp.PageController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="nc"&gt;PlugCache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ETS便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/plug_maintenance"&gt;plug_maintenance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;メンテナンス状態を取得して&lt;code&gt;503 Service Not Available&lt;/code&gt;のHTTP Statusを返すplug&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/shufo/plug_robots"&gt;plug_robots&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;robots.txtを平文で返すplug。作った理由忘れたけどたぶんrobots.txtをapplicationサーバから返したいみたいな感じだったと思う&lt;/p&gt;
&lt;p&gt;と、こんな感じで微力ながらElixirコミュニティに何らかのContributionが出来ればと思ったのと必要性にかられて何個か作成したけど、やっぱり言語を学習するのになんらかのパッケージを作るのは一番の近道だなと。&lt;/p&gt;
&lt;h2&gt;お世話になってるパッケージ&lt;/h2&gt;
&lt;p&gt;普段お世話になってるパッケージ&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/elixir-ecto/ecto"&gt;ecto&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;みんな大好き. &lt;a href="https://blog.drewolson.org/composable-queries-ecto/"&gt;Composed Query&lt;/a&gt;として書くと再利用性も高くシンプルな書き方が出来るのがすき。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/vt-elixir/ja_serializer"&gt;ja_serializer&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jsonapi.org/"&gt;JSON-API&lt;/a&gt;形式でAPIレスポンスを返すため&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/HashNuke/hound"&gt;hound&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;E2Eでのテストをするため。PhantomJSをバックエンドとして使っていたけどdeprecatedになってしまったのでそろそろHeadless Chromeに移行したい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/thoughtbot/ex_machina"&gt;ex_machina&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テストデータのFactoryに&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/cpjk/canary"&gt;canary&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authorizationに&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/getsentry/sentry-elixir"&gt;sentry&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt;公式でElixirのクライアントライブラリが提供されているのでエラートラッカーはこれを使っている&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/PragTob/benchee"&gt;benchee&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;実装に困ったらマイクロベンチマークで適宜ベンチマークを測って指標にする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/xerions/phoenix_swagger"&gt;phoenix_swagger&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt;形式でAPIドキュメントを出力するため。そろそろOpenAPI 3.0仕様に準拠したい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/navinpeiris/logster"&gt;logster&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;アクセスログをワンライナーでJSONで出力出来る&lt;/li&gt;
&lt;li&gt;アクセスログをCloudwatch LogsからKinesis, S3, Athenaなどに送り込むため最初からJSON形式でログを出力したかったのでこれを使っている&lt;/li&gt;
&lt;li&gt;ちなみにJSON形式でログを出力するとCloudWatch Logsのフィルタで&lt;code&gt;{ $.type = 'foo' }&lt;/code&gt;のような形で検索ワードを指定出来て便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/drewolson/scrivener"&gt;scrivener&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ページングライブラリ。最初自前でページャなどを書いたけど辛かったので早く知りたかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;最初は社内で自分一人だけだったElixir開発者も、実績がたまったおかげで他プロジェクトでも使われるようになって社内で5人ほど使うようになったり、周りで使われている会社も増えてきたりでなんだかんだゆるやかな成長を感じる。&lt;/p&gt;
&lt;p&gt;少し前はミーハーでHypeな感じもあったけど最近は落ち着いて実際使う人は粛々と使ってる感じで個人的には居心地がいいです。&lt;/p&gt;</content><category term="Elixir"></category><category term="programming"></category></entry><entry><title>Let's Split (レツプリ) を組み立てた</title><link href="https://shufo.github.io/build-lets-split.html" rel="alternate"></link><published>2018-01-08T00:00:00+09:00</published><updated>2018-01-08T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-01-08:/build-lets-split.html</id><summary type="html">&lt;p&gt;レツプリを組み立てた話&lt;/p&gt;</summary><content type="html">&lt;p&gt;昨今の自作キーボードブームと格子配列型で左右分割のキーボードを試してみたくなったので昨年よく見かけたレツプリを作ってみることにした&lt;/p&gt;
&lt;h2&gt;必要なもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Let's Split PCB x 2&lt;/li&gt;
&lt;li&gt;Pro micro x 2&lt;/li&gt;
&lt;li&gt;スイッチ x 48 &lt;a href="https://www.aliexpress.com/item/kailh-pro-switches-3pin-RGB-SMD-purple-light-green-teal-aqua-burgundy-MX-RGB-Swithes-For/32838033039.html?spm=a2g0s.9042311.0.0.lT90up"&gt;Kailh Pro Switche Burgundy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TRRS ジャック x 2&lt;/li&gt;
&lt;li&gt;TRRS ケーブル&lt;/li&gt;
&lt;li&gt;ダイオード x 48&lt;/li&gt;
&lt;li&gt;ケース(top プレートと bottom プレート)&lt;/li&gt;
&lt;li&gt;ネジとスタンド&lt;/li&gt;
&lt;li&gt;LED ケーブル x 1 [&lt;a href="https://www.switch-science.com/"&gt;Switch Science&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;タクトスイッチ x 2 [Switch Science]&lt;/li&gt;
&lt;li&gt;リード線 [Amazon]&lt;/li&gt;
&lt;li&gt;3M クッションゴム [Amazon]&lt;/li&gt;
&lt;li&gt;はんだごてセット [Amazon]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は&lt;a href="https://mehkee.com/"&gt;Mehkee&lt;/a&gt;でレツプリの&lt;a href="https://mehkee.com/collections/keyboards/products/lets-split-acrylic-cases-kits?variant=46981199311"&gt;セット&lt;/a&gt;が売っていたので最初に必用なパーツはある程度揃える事が出来た&lt;/p&gt;
&lt;p&gt;クッションゴム, タクトスイッチ, リード線、LED ケーブルはなかったので別途買った&lt;/p&gt;
&lt;h2&gt;組み立て&lt;/h2&gt;
&lt;p&gt;幸い先人たちのビルドログが結構な数あったので途中で詰まることはあまりなかった&lt;/p&gt;
&lt;h3&gt;ダイオードハンダ付け&lt;/h3&gt;
&lt;p&gt;それぞれ+-の方向だけ気をつけてハンダ付け。ダイオードの黒い方のリード線が四角い穴に入るようにする。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gaaasw.ch.files.1drv.com/y4m1jARiYKevuzhzusO6jJ8wPdIbbNPbzkkYZHw0pu-tl8cFUlVv1Vrbu0KbQ1ERLsMbeTdPnjUyN9DVr8XMqkmAIRmiOp6mFGe7mLyfPRK5sMsTRBYQHpjEZrj2KkT7a2TArf8chzK33vnxI9PrhaMXI9ym7TGHdMVP-QnbWZQcDUHTJRysWbRqY6ggMCWr2_9Oaxvyi9z4C3WLNiB1ivlPA?width=1440&amp;height=1080&amp;cropmode=none" width="1440" height="1080" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://iqbl1g.ch.files.1drv.com/y4m7Fs5CBMUaGnv8q3IisbBbepE1D4AbrEc296TJdNPqJEOWYy9p2G4CVJNjGrUhRXDUASDHZcv-sIUoHvL9XbqeN786dSDReb890_bOu4N1zGbn8lLnJTPCmsVSQjEV85bBkyQ2nelmSI12gsXDNLQkpQl_r_g9SwRPNwmSJodHPJSwO-cjz2wNKp7-dUVOVrxlFA4aSk_7Zzut3YK9TTW1A?width=1440&amp;height=1080&amp;cropmode=none" width="1440" height="1080" /&gt;&lt;/p&gt;
&lt;h3&gt;TRRS ジャック取り付け&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://gqaasw.ch.files.1drv.com/y4mxf1_q7YLEL3iYck7oRBTGC4PzSOwLRBfxe_g-j6k9P19EavN_yOB3x_9G_8zCeXobCrzFML70YLiXqN2pXkipsrYZmK4wk-3b4kjWCvvI453J3AbouwkY_4rKAAXS5Vvz3rJwhjmKv8Lx3SNyU5qBIYJ9CxduFoUY5T0iiIJDJWu4RtjJhxXb80LZgsokJJT2d6_PD8L7WyD8PqdqHB97w?width=1440&amp;height=1080&amp;cropmode=none" width="1440" height="1080" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://igaasw.ch.files.1drv.com/y4m8yzp4MEmVM-rBrQ7MbrdXfJI9C3koY5tRdBP98f4pnxV_gOIy8r2KHpUNimtJW_AiZdraMPTDmkVJ3Xk8xD99ab0Xqdf8g9Hk4_zy4JnypcFtxopwVHy5pUOZpGhe9N8FJYill3pQAj2uEI3qB_kDs5DsZUfnwHhm3VJ8MSzyt6eHuUetbTZbreTHnQBz2zKqm11JjtWBx6Ug86S_lcHlg?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;h3&gt;ジャンパー接続&lt;/h3&gt;
&lt;p&gt;公式から引用。以下の要領で PCB の TRRS ジャック下のに空いてる箇所をハンダで接続する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VCC [x]     [ ] VCC
    [x]     [x]
GND [ ]     [x] GND
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="https://jabl1g.ch.files.1drv.com/y4m_8f2vgBCB3MmpwtKz4wBRiYAoCtmQoqS0WiyLbEOsqX9x5dt5JeX0_56u2UfNtKmCJwsyz2lwskcKKigd1kcoXE3TGEBfWsMacPM0hG3RSSe5KJ4t-PnU4ku8hEh7DARKS6ptIJzGa44kma2nUwOwz-tAyCPspVnBg5b4RkW5-yCpqlINLKU9fwQid-riexK4lJpQ6hrbmlfIV--eIwdTg?width=1503&amp;height=1127&amp;cropmode=none" width="1503" height="1127" /&gt;&lt;/p&gt;
&lt;h3&gt;ヘッダーピン取り付け&lt;/h3&gt;
&lt;p&gt;Pro Micro 付属のヘッダーピンを取り付ける。足の長い方を TRRS ジャックと同じ側にして差し込む。足の短い表側をハンダ付けしておく。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jaaasw.ch.files.1drv.com/y4m7GJqIcbAhnM0nX8C96lB3Q2wb3XwbRC9gqN2kS-Q09ijWyW8sdoORQhLH07kAI_SR50sL6bjYtvih2otF3pdyPrHxKMQATL7ZIbEaxA9IDRwi1KA7lrM5EEKmKXmmKJnWjNMuEXRFjwLbw7URqrtfMMFLA8e0SgG7Q4878Lc_KW7LqJkdpDkRd4cDSqRbp2HiVldYpqeG8OEjgcxVS9BpQ?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;h3&gt;先に２つスイッチをつける&lt;/h3&gt;
&lt;p&gt;Pro Micro と位置が被るので Pro Micro の位置のスイッチ 2 つは先に実装する。&lt;/p&gt;
&lt;p&gt;上側のケースを挟みこむようにしてスイッチを取り付ける。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hgaasw.ch.files.1drv.com/y4mc2BP86AEgyrKSczYwuB2xd4eoBKNQ4KhquoY7mk4DPs-6cHcwDGOmpILzn0nfm7CVf0NTdEUt5cagf4D_lOhdOkKHuhMDtDhB80rMRNE-HTh4STIXGPEW_U_7cuQqxEAXY3pdp0LK_ZHKX5GNr6mmGLDHDlYhMyscJhDtjsZsOjiN1ji-4sUF2zkuIjG8QAxGZ_gsGnbIF4ajUBEToMcTQ?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;スイッチを差し込むと PCB のパンダの目のようなとこにスイッチの足が出るのでハンダ付け。ここがしっかり接続されていないとキーを押したのに反応しないというようなことが起こるので注意。特に Pro Micro を取り付けた後だとここのハンダは修正出来ないのでハンダがちゃんと浸透してるか見ておいた方がいい。&lt;/p&gt;
&lt;h3&gt;Pro Micro 取り付け&lt;/h3&gt;
&lt;p&gt;Pro Micro を実装する。それぞれ左右で表裏を変えないといけないので注意。&lt;/p&gt;
&lt;p&gt;左手側(TRRS ジャックが右に来る方)は実装面が上に来るようにして実装。Pro Micro から飛び出した長い足はニッパーで切ってハンダ付け。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://iqaasw.ch.files.1drv.com/y4mGkc4xtrqV5YE1GZz9Ot8be8M00g0_fwgRRlmHKfXRMsEEgosB20gxHUIV9AQzJ-bM_S_iqpu3jhgJlT9FcHLA7n5U80ZrGAzqp_AQzP8BftTr2PXzMRaeYR3idP1YvnkUmKsb2k8NbFb2CSdAokDNuCsY2Og1J7DPdpr6y6WZCEUQQUi1WApp7zAMmm8bWZKX8gv9Gs8KS2ak8UuqjQFrQ?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;右手側(TRRS ジャックが左に来る方)は裏側を表にして実装。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://iaaasw.ch.files.1drv.com/y4m9jLjzUJJawBh8NlfNBmwXRg-JofQmUFjHEOgXskkbaTKk6UlE_yonASXdL3oLKHHUDNZytGyKWxnRr39KXuuA7VXCLc3_q6x523ZLOCPPERRweTx_kCTRWHLOdeXKeOyPgAU1ZlBsz7iCpXwQRKIeTtav4tJEcctRsi5KwQloEU0W0HEI-G-CCGAG5LDRojAU5dFHN2jdw02o9qCri6fkg?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;h3&gt;スイッチ取り付け&lt;/h3&gt;
&lt;p&gt;残りのスイッチを全て取り付ける。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gaybwa.ch.files.1drv.com/y4mhwUF-UokW-i4HMxpXoACH1VMM8BqXjEKE0H4PaCd18Kiic9u7npca62IboQdXiUvNJp9Vp0mmnCxHcnWXju0lp42Cah5za_5PyPfSh6l47z4q6G2lDFLDM2zJoXEa_AmXu72GU4zGbNDVWTzYSSeXDRpMDHPBA-534Vlq3UuguTfxMwzYbd9kj-0KDyYEnD1lOnBtZlq9fnmG_-ph5QdIA?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;ハンダ付け後。同じくハンダ付けが甘いとキー押下時の認識が甘くなるのでちゃんとハンダ付けする。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://gqybwa.ch.files.1drv.com/y4mLN753LmIQu1V992WSp6VrK7ysOsc-VukF8zXCBVt-xiPPBOByJ0lyg6Uz7PxsPNO8cqY-g5_zRu7l6G84mLKfuRaWNzkMaoydb0bSUYdbOynM5f52beoyaiT7zWNGN65WPg6S4GjgVbOD0Rdk-EPcEXJWcDm_A7R2KYptZ6XLIcoIWP2M41wSHNwr0VJ1mG307GjJ0A3N7rZfrIOVK8B7Q?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;h3&gt;タクトスイッチ取り付け&lt;/h3&gt;
&lt;p&gt;ファームウェアを書き込む時に GNC と RST をショートさせる必要があるため、ボタン操作でリセット出来るようにタクトスイッチを取り付ける。それぞれ GND と RST をタクトスイッチの足にハンダ付け。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://iwybwa.ch.files.1drv.com/y4m5jLAqCvWcOQblxIMaTcd9knX-m2XqWKSG_duQ-fORXu0o3sDmdD_hC52x-xnWzBYo1N9JlQsbG_Y9YW8REIi8c3a70YzGwnxGgMn2X5ehzvbSVjt2Ew5pAziG0KPQzO5OZFJc1cv6wayFoxsIcM4Rx_D-Q_R6hozLbGq4aEGQO8c8j0BEm8EK1W4xQPs9sZAx8NaBGpwPha1L635N4hHkA?width=3120&amp;height=4160&amp;cropmode=none" width="3120" height="4160" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jaybwa.ch.files.1drv.com/y4mrmJWnLXTyVzF3vQW3WnTnEabbeofN-OBNcGjf3Ka2HO7WAUGzQT0TuHE7FBUtcQ4Od6GfthJWNctxtYjxVYzx8bC7O3eZImQ5c_REwInl00efvmpc1Hx-tktO97ncd3EyGICnPjl88IJ73bTk8UVd0xWSTi-CWV0rwpaM54wV-r67dA3wvjy-hTTLZYkEmeH5Pm09pu53KjYAw2Rplz3FA?width=3120&amp;height=4160&amp;cropmode=none" width="3120" height="4160" /&gt;&lt;/p&gt;
&lt;h3&gt;LED 実装&lt;/h3&gt;
&lt;p&gt;一応ここまでで既にキーボードは動作するが光の民ゆえ光らせたいので LED を実装する。光の民って何。&lt;/p&gt;
&lt;p&gt;Switch Science で買った LED（１７ｃｍ）をハサミで２つに切ってそれぞれ実装する。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://iaybwa.ch.files.1drv.com/y4mRKqpbFxku7gKCZhJghVjULduUSHpxFpK7PQ_ArX28a1Ghumaknc5iWxkSIdU-CZjQvAt4_b-MblTESka0_o83n3A0AOP_snyQFM_gqD57_swFg0O1ebbrGj_XbqzqsXJfW1qtkeE5ViNdCZKexYxI1hka6ahRHARrylt1hvMBIUSGQck9mnf6UdBQ4mTIccgzU4Qv-KrHjauJVVKrqlFcw?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;たぶんここが一番苦労した。リード線に予備ハンダをして線をメッキしてからハンダ付け箇所でリード線に付着したハンダを溶かして付着させると楽かもしれない。&lt;/p&gt;
&lt;p&gt;右手側は GND -&amp;gt; GND, +5V -&amp;gt; VCC, DI -&amp;gt; extra data で接続する。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://skixvg.ch.files.1drv.com/y4mrI_iwEgfR1VIiVU1DBj9TxeZdbQvlmicJijTASkPwx3cxz4ZsTFp0BZPoo419AVifnyHn0Aj0BezXXMERFReAZgILWcMqlgJu2VbsChdhDDnaoUheIXXEDm7n8c4VPbsYemwBCdOJ9-2I69HQeXLbZgTeweD1sh1T0E1qjuo1rZmkpOlZCf4flq4ajYlGR1BQoCWyXMhDW9QIaPK9bzvow?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;左手側はそれぞれ左は+5V -&amp;gt; VCC, DO -&amp;gt; extra data, GND -&amp;gt; GND. 右側は DIN -&amp;gt; TX0 pin, GND -&amp;gt; GND, +5V -&amp;gt; VCC で接続する。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://uaixvg.ch.files.1drv.com/y4mQKyOuuUal6JLuePdC_lM_Gb6561jeZRFFeSco83hq4iTx3shQTpEVyfT_M1xDtEVi7zTfG0Z-KDpAg7015xaHxMcl1X9ULUDf7jOAp1VTV88k6B5YAIuzyfeE_2cSv0p8CenMGfOQFmgBv3VhBqThdT7xKWWUkOlsxrR6MW-6lEmrqw759KGqvxcHNSl2_7Msye3lerFz4LXNJrNJJupVg?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;h2&gt;ファームウェア書き込み&lt;/h2&gt;
&lt;p&gt;リポジトリを clone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/qmk/qmk_firmware.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファームウェアのビルドに必要なパッケージ類をインストール(Linux)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install gcc unzip wget zip gcc-avr binutils-avr avr-libc dfu-programmer dfu-util gcc-arm-none-eabi binutils-arm-none-eabi libnewlib-arm-none-eabi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;デフォルトのレイアウトを書き込む&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make lets_split/rev2:default
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make lets_split/rev2:default:avrdude
QMK Firmware &lt;span class="m"&gt;0&lt;/span&gt;.5.207
Making lets_split/rev2 with keymap default and target avrdude

avr-gcc &lt;span class="o"&gt;(&lt;/span&gt;GCC&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;.9.2
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt; Free Software Foundation, Inc.
This is free software&lt;span class="p"&gt;;&lt;/span&gt; see the &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; copying conditions.  There is NO
warranty&lt;span class="p"&gt;;&lt;/span&gt; not even &lt;span class="k"&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Size before:
   text    data     bss     dec     hex filename
      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;18850&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;18850&lt;/span&gt;    49a2 ./.build/lets_split_rev2_default.hex

Compiling: ./tmk_core/common/command.c                                                              &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
Linking: .build/lets_split_rev2_default.elf                                                         &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
Creating load file &lt;span class="k"&gt;for&lt;/span&gt; flashing: .build/lets_split_rev2_default.hex                                 &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
Checking file size of lets_split_rev2_default.hex                                                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
 * File size is fine - &lt;span class="m"&gt;18850&lt;/span&gt;/28672
Detecting USB port, reset your controller now...........
Detected controller on USB port at /dev/ttyACM0

Connecting to programmer: .
Found programmer: &lt;span class="nv"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CATERIN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; S
    Software &lt;span class="nv"&gt;Version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.0&lt;span class="p"&gt;;&lt;/span&gt; No Hardware Version given.
Programmer supports auto addr increment.
Programmer supports buffered memory access with &lt;span class="nv"&gt;buffersize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; bytes.

Programmer supports the following devices:
    Device code: 0x44

avrdude: AVR device initialized and ready to accept instructions

Reading &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="c1"&gt;################################################## | 100% 0.00s&lt;/span&gt;

avrdude: Device &lt;span class="nv"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x1e9587 &lt;span class="o"&gt;(&lt;/span&gt;probably m32u4&lt;span class="o"&gt;)&lt;/span&gt;
avrdude: NOTE: &lt;span class="s2"&gt;&amp;quot;flash&amp;quot;&lt;/span&gt; memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file &lt;span class="s2"&gt;&amp;quot;./.build/lets_split_rev2_default.hex&amp;quot;&lt;/span&gt;
avrdude: input file ./.build/lets_split_rev2_default.hex auto detected as Intel Hex
avrdude: writing flash &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;18850&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;:

Writing &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="c1"&gt;################################################## | 100% 1.41s&lt;/span&gt;

avrdude: &lt;span class="m"&gt;18850&lt;/span&gt; bytes of flash written
avrdude: verifying flash memory against ./.build/lets_split_rev2_default.hex:
avrdude: load data flash data from input file ./.build/lets_split_rev2_default.hex:
avrdude: input file ./.build/lets_split_rev2_default.hex auto detected as Intel Hex
avrdude: input file ./.build/lets_split_rev2_default.hex contains &lt;span class="m"&gt;18850&lt;/span&gt; bytes
avrdude: reading on-chip flash data:

Reading &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="c1"&gt;################################################## | 100% 0.14s&lt;/span&gt;

avrdude: verifying ...
avrdude: &lt;span class="m"&gt;18850&lt;/span&gt; bytes of flash verified

avrdude: safemode: Fuses OK &lt;span class="o"&gt;(&lt;/span&gt;E:CB, H:D8, L:FF&lt;span class="o"&gt;)&lt;/span&gt;

avrdude &lt;span class="k"&gt;done&lt;/span&gt;.  Thank you.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;途中で&lt;code&gt;reset your controller now&lt;/code&gt;と出るので GND と RST をショートしたスイッチを押す。1 回で認識しない場合は何回か押す。&lt;/p&gt;
&lt;p&gt;書き込みが成功すると上記のようなログが出る。左手と右手両方とも書き込む。
USB 接続し、TRRS ソケットで繋げて全部のキーが動作するか確認。ハンダ付けが甘いと微妙に認識しづらいキーがあるので直しておく。&lt;/p&gt;
&lt;h3&gt;LED の設定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vim keyboards/lets_split/keymaps/default/rules.mk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rules.mk&lt;/code&gt;に以下の行を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RGBLIGHT_ENABLE = yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;キーマップを修正する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim keyboards/lets_split/keymaps/default/keymap.c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;UNDERGLOW 用のレイヤーを定義&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#define UNDERGLOW_LAYER 6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;キーマップを追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[UNDERGLOW_LAYER] = KEYMAP( \
  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______, \
  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______, \
  _______,  RGB_TOG,  RGB_MOD,  RGB_HUD,  RGB_HUI,  RGB_SAD,  RGB_SAI,  RGB_VAD,  RGB_VAI,  _______,  _______,  _______, \
  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______ \
),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;QWERTY レイヤーのどこかのキーに&lt;code&gt;MO(UNDERGLOW_LAYER)&lt;/code&gt;を割り当て&lt;/p&gt;
&lt;p&gt;再度ファームウェア書き込みの時と同じ手順でキーマップを Flash し&lt;code&gt;MO(UNDERGLOW_LAYER)&lt;/code&gt;でレイヤーを切り替えて&lt;code&gt;RGB_TOG&lt;/code&gt;で LED が光ることを確認する。また&lt;code&gt;RGB_MOD&lt;/code&gt;で発光パターンを色々切り替えられる。&lt;/p&gt;
&lt;p&gt;以降もキーマップを変えたい場合は&lt;code&gt;keymap.c&lt;/code&gt;を編集して変えることが出来る。&lt;/p&gt;
&lt;h2&gt;完成&lt;/h2&gt;
&lt;p&gt;こんな感じでなんとか完成。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://u6ixvg.ch.files.1drv.com/y4mLfKNMawH4ubEowYh-8FARCykY9b6eRKWdZ8hw_eEJcNoQT-yXqxYvspmdnUjZnJydyewy-7r6tOh2eBF7eT2971-Q1w9lGMJ4AU_ujoGQcUUSkbYehZXST-aJJFCBexTGC06YIosebBsTnmP0fGPmUb_lcxbQm-mIh-j9a2A4ywTrDKPF3n4uF3eWtMc-pFzYYk2WDYqogjASzkWcFoOrw?width=4160&amp;height=3120&amp;cropmode=none" width="4160" height="3120" /&gt;&lt;/p&gt;
&lt;p&gt;キーキャップは&lt;a href="http://www.mechsupply.co.uk/product/devlin-k-series-aurora-planck-keyset"&gt;DEVLIN K-SERIES AURORA&lt;/a&gt;にした。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;パーツが揃ったり揃わなかったり、10 数年ぶりのハンダ付けに苦労したりと結構時間かかったけど初自作キーボードなのでやっぱりなんとなく愛着が湧く。キーマップを色々いじって自分好みの配列にしてみたい。&lt;/p&gt;
&lt;h2&gt;参考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nicinabox/lets-split-guide/blob/master/assembly.md"&gt;lets-split-guide/assembly.md at master · nicinabox/lets-split-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pppurple.hatenablog.com/entry/2017/09/24/193635"&gt;Let's split を作る(製作編) - abcdefg.....&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kzmake/items/443478763cdeaedcfd0a"&gt;分離型のコンパクトなキーボード let's split(レツプリ)を組み立てた話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://riv-mk.hateblo.jp/entry/pro_micro_and_qmk"&gt;Pro Micro &amp;amp; QMK Firmware のセットアップガイド (Let's Split 編) - Voxel Highway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yhara.jp/LetsSplit"&gt;レツプリ他自作キーボードまとめ - yhara.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yushakobo.jp/pluis9/2017/07/lets-split-fes/"&gt;Let's Split を組み立てた話 | 遊舎工房&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.qmk.fm/getting_started_build_tools.html"&gt;Install Build Tools · QMK Firmware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="DIY"></category><category term="keyboard"></category><category term="自作キーボード"></category></entry><entry><title>ダイエットしてる</title><link href="https://shufo.github.io/dieting.html" rel="alternate"></link><published>2018-01-08T00:00:00+09:00</published><updated>2018-01-08T00:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2018-01-08:/dieting.html</id><summary type="html"></summary><content type="html">&lt;p&gt;最近ダイエットをしている。というのもここ 1 年で急に太ったからだ。
65kg → 69kg になった。ギリギリ標準体重辺りをキープしていたのに完全に軽肥満だ。仮にこのままのペースで行けば 20 年後には 140kg だ。生まれて 5 ヶ月の牛の体重だ。いや牛ではないけど。&lt;/p&gt;
&lt;p&gt;思い返してみれば食後に気絶寝するという牛にならざるを得ないことをけっこう繰り返していたので当然とも言える。あと間食も結構とっていた。しかもまったく運動をしない。逆になんで太らないと思えたのか ｺﾚｶﾞﾜｶﾗﾅｲ。&lt;/p&gt;</content><category term="dieting"></category></entry><entry><title>ニューヨーク一人旅 + Panorama NYC Festival 2017 その２</title><link href="https://shufo.github.io/-panorama-nyc-festival-2017-2.html" rel="alternate"></link><published>2017-08-06T09:18:00+09:00</published><updated>2017-08-06T09:18:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2017-08-06:/-panorama-nyc-festival-2017-2.html</id><summary type="html">&lt;p&gt;ニューヨーク一人旅その２&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://shufo.github.io/panorama-festival-2017-1.html"&gt;1日目&lt;/a&gt;に続きNew York一人旅2日目です。&lt;/p&gt;
&lt;p&gt;この日からPanorama NYCフェスティバルが3日間開催されます。&lt;/p&gt;
&lt;p&gt;ゲートオープンは正午でそれまではフリータイムなのでその間に観光とかします。&lt;/p&gt;
&lt;h3&gt;エンパイアステートビル&lt;/h3&gt;
&lt;p&gt;アドレナリンが出ているのか午前7時なんて健康的な時間に起床しました。
とりあえずGoogle Mapで調べたら&lt;a href="https://www.nypl.org/locations/schwarzman"&gt;NYPL&lt;/a&gt;(New York Public Library)が午前8時から開いているとのことだったので8時頃にホテルを出ます。&lt;/p&gt;
&lt;p&gt;ホテルからはNYPLまで徒歩5分くらいだったので徒歩で行ったところ、&lt;strong&gt;開いていない。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;おいどういうことだGoogle先生と思ったところ開いていたのは分館の&lt;a href="https://www.nypl.org/about/locations/mid-manhattan-library"&gt;ミッドマンハッタン図書館&lt;/a&gt;（こちらは8時から開いている）の方で本館の方のNYPLは10時開館でした。&lt;/p&gt;
&lt;p&gt;時間を持て余したので一旦図書館前のブライアントパークで休憩します。
ニューヨークは都会のど真ん中にも椅子とテーブルがいっぱいある公園があったり、休めるところが多いのがいいですね。日がな一日ぼーっとしていたい。&lt;/p&gt;
&lt;p&gt;近くに何かいいとこないかGoogle Mapで調べてみたところ近くにエンパイアステートビルがあったので行ってみることにしました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="O9Tb1bN"&gt;&lt;a href="//imgur.com/O9Tb1bN"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;他にも回りたいとこあったので&lt;a href="http://www.citypass.com/new-york-c3"&gt;City Pass C3&lt;/a&gt;をその場でスマホからポチります。
このパスを買うと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンパイアステートビル&lt;/li&gt;
&lt;li&gt;トップオブザロック展望台&lt;/li&gt;
&lt;li&gt;アメリカ自然史博物館&lt;/li&gt;
&lt;li&gt;911メモリアルミュージアム&lt;/li&gt;
&lt;li&gt;自由の女神＆エリー島&lt;/li&gt;
&lt;li&gt;メトロポリタン美術館&lt;/li&gt;
&lt;li&gt;グッゲンハイム美術館&lt;/li&gt;
&lt;li&gt;サークルライン観光クルーズ&lt;/li&gt;
&lt;li&gt;イントレピッド海上航空宇宙博物館&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;から3つ好きなとこに行くことが出来ます。通常のCity Passだと6箇所回れるけどフェスも行きつつだと回れる気がしなかったので今回はC3パスにしました。
6箇所だと122ドルだけど3箇所だと76ドルです。割引率は下がりますが観光名所中心の滞在じゃない場合はこっちでもいいと思います。&lt;/p&gt;
&lt;p&gt;セキュリティチェックを受けて、パスを係員に見せると先に進めます。
色んな言語の案内板の混ざったエレベータで展望台まで上がりました。&lt;/p&gt;
&lt;p&gt;OasisのStanding on the Shoulder of Giantsのジャケットのビルに立ってるなーとかよく分からないことを思いつつ景色を眺めてました。
あいにく天気はあまり良くないものの早朝のニューヨークの町並みもいいですね。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="GmQi2lT"&gt;&lt;a href="//imgur.com/GmQi2lT"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="dzz5ZkM"&gt;&lt;a href="//imgur.com/dzz5ZkM"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="dJDeq3m"&gt;&lt;a href="//imgur.com/dJDeq3m"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="oju5fiM"&gt;&lt;a href="//imgur.com/oju5fiM"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;見終わると時間もちょうどよくなったのでNYPLに向かいました。&lt;/p&gt;
&lt;h3&gt;NYPL&lt;/h3&gt;
&lt;p&gt;エンパイアステートビルから徒歩で数分で着きます。&lt;/p&gt;
&lt;p&gt;こちらもグランドセントラル駅と同じくボザール様式の建築物でギリシャの神殿のような荘厳さがあります。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="eSWeW1R"&gt;&lt;a href="//imgur.com/eSWeW1R"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;もはや図書館？というようなレベルですが、図書館です。美術館ではありません。公共施設なのでもちろん無料で入れますし、普段は市民が資料を調査したり、コンピューター関係の受講クラスを開催していたりニューヨーク市民の教育レベルの底上げを担う役目も担っています。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="kqESn3C"&gt;&lt;a href="//imgur.com/kqESn3C"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;入館する市民の安全を見守るライオン。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="u9XubKV"&gt;&lt;a href="//imgur.com/u9XubKV"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;やばい
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="69hJRoZ"&gt;&lt;a href="//imgur.com/69hJRoZ"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="zlme9Hp"&gt;&lt;a href="//imgur.com/zlme9Hp"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;天井にすらありえないくらい細かい装飾が施されていて無限に眺められます。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="5vbKPDg"&gt;&lt;a href="//imgur.com/5vbKPDg"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;高級ホテルかな？&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="Kn95d1e"&gt;&lt;a href="//imgur.com/Kn95d1e"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ただの階段。（Lv.100）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="7Fbo2jK"&gt;&lt;a href="//imgur.com/7Fbo2jK"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Reading Room。ハリーポッターみたいだぁ（直喩）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="3DZs1rs"&gt;&lt;a href="//imgur.com/3DZs1rs"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;適当に撮ってもフィルター加工したかのような存在感。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="UAxKXRB"&gt;&lt;a href="//imgur.com/UAxKXRB"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="oFoeAKD"&gt;&lt;a href="//imgur.com/oFoeAKD"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;基本的には寄付で成り立っているため寄付者の名前が記されてる（最近は併設されているショップやカフェでも利益を出している）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="7vzxWyo"&gt;&lt;a href="//imgur.com/7vzxWyo"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ブランチの図書館の歴史など。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="exVXzhs"&gt;&lt;a href="//imgur.com/exVXzhs"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;図書館カードがあればオンラインでの受講コースも受けれるそう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プログラミング&lt;/li&gt;
&lt;li&gt;ビジネススキル&lt;/li&gt;
&lt;li&gt;デザインテクニック&lt;/li&gt;
&lt;li&gt;DTP/3D Animation&lt;/li&gt;
&lt;li&gt;Web開発&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="zBrV5aO"&gt;&lt;a href="//imgur.com/zBrV5aO"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ブランチ図書館ごとに特化したコースなどもあってほんとNYPLが市民の生活に根ざしたものなんだなぁと。
図書館好きにはたまらないですね。&lt;/p&gt;
&lt;h3&gt;Panorama NYC Festival 1日目へ&lt;/h3&gt;
&lt;p&gt;そぞろ歩いていたところ時刻も12時を周りいい時刻になってきたのでそろそろ本命のPanorama NYCへ向かいます。&lt;/p&gt;
&lt;p&gt;図書館を出てグランドセントラルへ。
地下鉄6線のUptown行きに乗って125st.で降ります。
125st駅からずっと東に歩くとロバート・F・ケネディ橋が見えてくるのでそれを渡るとフェス開催地のランドールズ島へ着きます。&lt;/p&gt;
&lt;iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d6040.491150538052!2d-73.93527602245476!3d40.80059703890567!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e2!4m5!1s0x89c2f60badae191f%3A0xfe047c422f1adb6b!2zSGFybGVtLTEyNXRoIFN0cmVldCBTdGF0aW9uLCBOZXcgWW9yaywgTlkgMTAwMzUg44Ki44Oh44Oq44Kr5ZCI6KGG5Zu9!3m2!1d40.8051454!2d-73.93907349999999!4m5!1s0x89c2f5fad0d08567%3A0x4ada181916f32de3!2sRandall&amp;#39;s+Island+Park%2C+New+York%2C+NY%2C+United+States!3m2!1d40.7960326!2d-73.9227238!5e0!3m2!1sja!2sjp!4v1501986754987" width="600" height="450" frameborder="0" style="border:0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="q4HX3wK"&gt;&lt;a href="//imgur.com/q4HX3wK"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;フェスに行くっぽい軽装の女子達がEDMをかけながら小躍りで同じく橋に向かって歩いてたので流れに乗って歩いていきました。
125st辺りからバスも出ているけど有料だからか行きは歩きで橋を渡って来ている人が多かったです。
バスで変なところ行くと怖いから自分も行きは結局3日間徒歩で橋を渡りました。歩きでも大体20分くらいだったので。&lt;/p&gt;
&lt;p&gt;125stから橋へ行くまではブロックごとにNYPD（ニューヨーク市警察）の車両とか警察官が配置されていたり、橋の途中にも警察官が何人かいたりけっこうニューヨーク市自身もフェスの警備に力を入れてるようでここは特に昼間は危険な感じはしませんでした。&lt;/p&gt;
&lt;p&gt;といいつつイーストハーレムでアジア系は少なく結構目立つのであまりキョロキョロしないで足早に橋まで向かいました。&lt;/p&gt;
&lt;p&gt;橋からダウンタウンの方を見る。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="996DXCf"&gt;&lt;a href="//imgur.com/996DXCf"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ブロンクスの方へも橋がかかってる。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="xIUvaXG"&gt;&lt;a href="//imgur.com/xIUvaXG"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;そんなこんなで流れに乗ってたらいつのまにか到着。&lt;/p&gt;
&lt;p&gt;ロッカーとかある。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="PkoW196"&gt;&lt;a href="//imgur.com/PkoW196"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;チケットはWill Callで現地受け取りになっていたのでBox Officeに行き、パスポートとクレジットカードを見せてリストバンドをもらいます。チケット申し込みが早い場合は郵送で届くみたいですけど、今回は1週間前とかにチケット買ったのでWill Callしか選択肢がありませんでした。&lt;/p&gt;
&lt;p&gt;リストバンドは公式サイトかアプリでリストバンド裏に書かれた数字を入力してアクティベート。&lt;/p&gt;
&lt;p&gt;初日はセキュリティチェックがなぜかめちゃくちゃ並んでいて30分くらい待ちました。と思ったら一気に列が進んだので入場規制でもしていたのか。
VIPレーンががらがらだったのでなぜかGAだけどそっちに流してもらって早く進めたり。&lt;/p&gt;
&lt;p&gt;入場はリストバンドに埋め込められたICチップをゲートにタッチして入る形式でした。&lt;/p&gt;
&lt;p&gt;そして入場！&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="E1otYa1"&gt;&lt;a href="//imgur.com/E1otYa1"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;どのフェスでもゲート入ったあとの解放感というかフェスに来たぞ感はわくわくしますね。&lt;/p&gt;
&lt;p&gt;遠くから聞こえるステージの音に小走りで向かってる人を見て思わず自分も高揚したり。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="3FnFArE"&gt;&lt;a href="//imgur.com/3FnFArE"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="I5HCZDq"&gt;&lt;a href="//imgur.com/I5HCZDq"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;けっこう会場はこじんまりとしていてコンパクトな中にメイン、サブメイン、テント型屋内ステージがある感じで各ステージへのアクセスはすぐに出来るので移動は苦にならなかったです。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="KNcj75i"&gt;&lt;a href="//imgur.com/KNcj75i"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="kvjOsqX"&gt;&lt;a href="//imgur.com/kvjOsqX"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Frank Oceanの専用merch！&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="9y4tHEV"&gt;&lt;a href="//imgur.com/9y4tHEV"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;並ぶかーと思ったら既に長蛇の列で泣く泣く断念。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;Frank Oceanのmerchがありえないくらい並んでる &lt;a href="https://t.co/c6xWjoGi66"&gt;pic.twitter.com/c6xWjoGi66&lt;/a&gt;&lt;/p&gt;&amp;mdash; 実質 (@shufo_) &lt;a href="https://twitter.com/shufo_/status/890988644990820353"&gt;2017年7月28日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h3&gt;昼食&lt;/h3&gt;
&lt;p&gt;まだそういえば朝から何も食べてなかったので今日初食事。
ニューヨーク市内にもよく走ってる屋台が会場内にもあったのでZEN Burger（禅バーガー？）と抹茶ラテを頂く。
禅バーガーはマッシュルームに大振りのパティでアメリカ感あった。味はアメリカって感じだった（雑）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="RoUzYVx"&gt;&lt;a href="//imgur.com/RoUzYVx"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="CRhnGVR"&gt;&lt;a href="//imgur.com/CRhnGVR"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;蒸し暑くて喉が乾いたのでRenegade Lemonadeを飲む。めっちゃ甘いけどおいしい。
支払いはクレカで払うとiPadみたいな端末でチップの金額を15％/20％/25％とか1$/2$/3$とかから選べるようになってた。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="LFiMtGV"&gt;&lt;a href="//imgur.com/LFiMtGV"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h3&gt;HONNE&lt;/h3&gt;
&lt;p&gt;最初はメインステージでHONNEを観賞。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="fh7HF91"&gt;&lt;a href="//imgur.com/fh7HF91"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ステージ前まで芝生なのでピクニックシート敷いて座ってる人とかいます。&lt;/p&gt;
&lt;p&gt;HONNEは今年のサマソニにも来るけど海外での様子がどんなんかなと思って見てみたところ、けっこう女性人気が高いです。前の人がバラをもってたのが印象的でした。
Warm on a cold nightで締め。&lt;/p&gt;
&lt;p&gt;Honneを見た後少し休憩。適当にそこら辺で寝っ転がる。&lt;/p&gt;
&lt;p&gt;会場全体が芝生なのでみんな適当にごろごろしてだめな空間が広がってて最高です。&lt;/p&gt;
&lt;p&gt;少し露がついて服が濡れるけど既にだめになってるので気にしない。&lt;/p&gt;
&lt;h3&gt;They.&lt;/h3&gt;
&lt;p&gt;次は屋内ステージのParlorでThey.を見ました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="kBqhNfo"&gt;&lt;a href="//imgur.com/kBqhNfo"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;日本に中々こないブラック・ミュージック勢は今回パノラマでなるべく見ておきたいというのがあって見たけどかっこいい。盛り上がり方もすごい。日本でここまでRapミュージックが盛り上がるかと言われるとうーんとなるのでこういうのは海外行くしかないのか…と思うとつらみだ。&lt;/p&gt;
&lt;h3&gt;MGMT&lt;/h3&gt;
&lt;p&gt;日本に来ると思ってなかなか来ないので念願という感じでした。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;MGMT - Kids &lt;a href="https://t.co/QG03NaVaB1"&gt;pic.twitter.com/QG03NaVaB1&lt;/a&gt;&lt;/p&gt;&amp;mdash; 実質 (@shufo_) &lt;a href="https://twitter.com/shufo_/status/894050476710256640"&gt;2017年8月6日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ただ演奏がヨレヨレでこんな曲だったっけ？笑と思いつつElectric FeelとかThe youthとかKidsとか合唱はすごい起きていたのでおー海外フェスだと感動しました。&lt;/p&gt;
&lt;p&gt;Frank OceanがNostalgia UltraでMGMTのElectric FeelをほぼそのままサンプリングしていたけどFrank OceanもMGMT見ていたんだろうか。&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xTIaZSWZxtM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Solange&lt;/h3&gt;
&lt;p&gt;日本国旗みたいのが出てきたけどあれは日本国旗だったのか…&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="wRb1i2L"&gt;&lt;a href="//imgur.com/wRb1i2L"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ステージのクオリティは高くて一種のパフォーマンス・アートのようでした。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="f27y6TU"&gt;&lt;a href="//imgur.com/f27y6TU"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="mOExpJj"&gt;&lt;a href="//imgur.com/mOExpJj"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;笑ってはいけないSolange24時。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="VhVFOXB"&gt;&lt;a href="//imgur.com/VhVFOXB"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h3&gt;Frank Ocean&lt;/h3&gt;
&lt;p&gt;そしてフランク・オーシャン。&lt;/p&gt;
&lt;p&gt;最初にChannel Orangeを聴いたのは確か2014年頃でリリースで騒がれた頃から大分遅かった気がします。
またPitchforkのhypeだろ？とか思ってたりしたのを若干後悔してます。&lt;/p&gt;
&lt;iframe src="https://open.spotify.com/embed/album/6vzH59tobnxE5WXMiqvBIx" width="300" height="380" frameborder="0" allowtransparency="true"&gt;&lt;/iframe&gt;

&lt;p&gt;それまでR＆Bとかブラック・ミュージックに大して傾倒していなかったので軽く衝撃を受けたのは覚えてます。
ブラック・ミュージックというとひたすら陽気なものやゴリゴリのラップ・ミュージックだったり俺はビッグになるぜみたいなマッチョ思想のものばかりだと思っていたので。&lt;/p&gt;
&lt;p&gt;2016年のBlondeとかいう大傑作で完全に手の届かない世界の人になってしまった。&lt;/p&gt;
&lt;iframe src="https://open.spotify.com/embed/album/3mH6qwIy9crq0I9YQbOuDf" width="300" height="380" frameborder="0" allowtransparency="true"&gt;&lt;/iframe&gt;

&lt;p&gt;ステージ前の花道エリアに専用の機器が運びだされてくる。&lt;/p&gt;
&lt;p&gt;そこに出てくるのかーとみんなそっちを向く。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="2nRGIOt"&gt;&lt;a href="//imgur.com/2nRGIOt"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;始まるまで人が多すぎて完全に通勤ラッシュの乗車率200％が何時間も続いていて、気分が悪くなった人が何人もバッタバッタ倒れて運びだされててそこかしこから「へーーーールプ！」って声が鳴り響いていてすごかった。&lt;/p&gt;
&lt;p&gt;そういう自分もフランクの途中辺りからフラフラしてきてあ、やばいと思ってちょっとしゃがんで休憩したりしました。&lt;/p&gt;
&lt;p&gt;少し押して登場したフランクは全く気取らない感じで普段通りという感じでした。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="Y19VlZM"&gt;&lt;a href="//imgur.com/Y19VlZM"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ショウビズな感じはせずツイッターで誰かが呟いていたが、友達の部屋で歌っているような感じ。&lt;/p&gt;
&lt;p&gt;実際フランクはこんな大観衆に囲まれつつもどこか孤独な感じで、ステージから伸びている花道とステージを行ったり来たり、たまに椅子に座りながら歌ったり、しゃがみながらキーボードを弾きながら歌ったりしていた。
視線もまっすぐ前を向くということはあまりせず淡々と歌い上げる感じでした。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="FXHI0Wg"&gt;&lt;a href="//imgur.com/FXHI0Wg"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;特別なことは何もしてないけどしばらくして振り返るとじわじわと余韻が出てくる不思議なライブでした。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="Q5BklUY"&gt;&lt;a href="//imgur.com/Q5BklUY"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;神々しさもあるけど友達が歌っているのを聴いているようなパーソナルな感じもある。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;Frank Ocean - Lens &lt;a href="https://t.co/rlYFIwdv2i"&gt;pic.twitter.com/rlYFIwdv2i&lt;/a&gt;&lt;/p&gt;&amp;mdash; 実質 (@shufo_) &lt;a href="https://twitter.com/shufo_/status/894083371927654400"&gt;2017年8月6日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;フランクのBeats1のラジオショウのBlonded Radioではフランクが影響を受けた音楽などを紹介しているんですが、このプレイリストなどを見るとほんと色々な音楽を聴いていてフランクの音楽オタクっぷりが分かります。&lt;/p&gt;
&lt;p&gt;Blondeは一見掴みどころのない作品だけどBlonded Radioを聴いてから改めて聞くとルーツ・ミュージックからラップミュージック、ポップ、ダンスミュージックまで様々な影響を受けていることが伺えて、それも含めて意外とハイコンテクストな作品に仕上がっているのが一見ふわっとした作品に思える原因かもしれない。&lt;/p&gt;
&lt;p&gt;KendrickのTPABのようなブラックミュージックの総決算みたいな作品とは少し方向性は違うけどBlondeは間違いなく同時代性という点において10年代を代表するアルバムだと思います。&lt;/p&gt;
&lt;p&gt;旅行から帰ってきてもFrank Ocean - Self Controlの余韻がまだ続いています。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;Frank Ocean - Self Control &lt;a href="https://t.co/DNUgepeBll"&gt;pic.twitter.com/DNUgepeBll&lt;/a&gt;&lt;/p&gt;&amp;mdash; 実質 (@shufo_) &lt;a href="https://twitter.com/shufo_/status/891289051059433477"&gt;2017年7月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;なんとなく「今」が一番フランク・オーシャンというアーティストを見るベストなタイミングだと思って居ても立ってもいられずニューヨークに行ったけど、ほんと行ってよかった。&lt;/p&gt;
&lt;h3&gt;帰宅&lt;/h3&gt;
&lt;p&gt;フランクの熱気も冷めやらない中11時を周った辺りに1日目が終了しました。&lt;/p&gt;
&lt;p&gt;帰りは会場から無料のシャトルバスが125st.に向かってピストン輸送しているのでそれに乗ります。
地下鉄6線125st.駅付近に止まるので降りて6線でグランドセントラルまで向かい、ホテルに戻ります。&lt;/p&gt;
&lt;p&gt;さすがに深夜のイースト・ハーレムは雰囲気的にけっこう怪しいものがあるものの、同じくフェス帰りの人がいっぱいいたり警官もブロック毎に辻に立ってるのであまり危険な感じはしませんでした。&lt;/p&gt;
&lt;p&gt;グランドセントラルに着くころにはもう12時になって周りのレストランも閉まっていたので何か夕飯買う場所ないかと物色したところ、ベンダー（屋台）がまだけっこうな数開いていたのでチキンオーバーライスを買いました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="0opaL2r"&gt;&lt;a href="//imgur.com/0opaL2r"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ホワイトソースとホットソースがサフラン米の上のチキンと絡まり絶妙にうまい。
量が多いので夕飯に半分、翌日の朝に半分で余裕でした。&lt;/p&gt;
&lt;p&gt;シャワーを浴びて朝から歩き通しでボロボロの足を労るために&lt;a href="http://www.voltaren-ex.jp/"&gt;ボルタレンローション&lt;/a&gt;を塗って、気絶するように就寝。&lt;/p&gt;
&lt;p&gt;そんなこんなでPanorama1日目（NY2日目）を終了しました。&lt;/p&gt;
&lt;p&gt;3日目へ続く…&lt;/p&gt;</content><category term="vacation"></category></entry><entry><title>ニューヨーク一人旅 + Panorama NYC Festival 2017 その１</title><link href="https://shufo.github.io/panorama-festival-2017-1.html" rel="alternate"></link><published>2017-08-04T02:33:00+09:00</published><updated>2017-08-04T02:33:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2017-08-04:/panorama-festival-2017-1.html</id><summary type="html">&lt;p&gt;ニューヨーク旅行 + Panorama Nyc Festivalその１&lt;/p&gt;</summary><content type="html">&lt;p&gt;もう先々月の話で大分期間が空いてしまいあれですが、2017 7/28〜7/30 New Yorkで開催されていた&lt;a href="http://www.panorama.nyc/"&gt;Panorama NYC Festival&lt;/a&gt; 2017に行ってきました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="memcYRR"&gt;&lt;a href="//imgur.com/memcYRR"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Panorama Festivalはアメリカ3大フェスの一つである&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%81%E3%82%A7%E3%83%A9%E3%83%BB%E3%83%95%E3%82%A7%E3%82%B9%E3%83%86%E3%82%A3%E3%83%90%E3%83%AB"&gt;Coachella Festival&lt;/a&gt;の運営元であるGoldenvoiceが2016年からニューヨークで開催している新鋭のフェスです。&lt;/p&gt;
&lt;p&gt;兼ねてから海外フェスには興味があったものの、いざ行こうと思うと移動の面倒さ、旅費、その他もろもろの壁が頭に浮かんでまた今度にしようまた今度にしようと思っていたのですが、今回は違いました。&lt;/p&gt;
&lt;p&gt;そう、Panorama NYC 2017にはなんと&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%83%A9%E3%83%B3%E3%82%AF%E3%83%BB%E3%82%AA%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%B3"&gt;Frank Ocean&lt;/a&gt;が出演していたのです。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="EeBjmpf"&gt;&lt;a href="//imgur.com/EeBjmpf"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Frank Oceanとは何者かというとことを説明すると5000兆字必要なので省略するとして、Frank Oceanなくして行っていなかったことは間違いないです。&lt;/p&gt;
&lt;p&gt;ちなみに今年のPanorama Music FestivalはFrank Oceanが出演した日のみSold Out。恐るべしFrank Ocean効果。&lt;/p&gt;
&lt;h2&gt;出発準備&lt;/h2&gt;
&lt;p&gt;1ヶ月くらい前に職場に休暇申請していたものの実際行くかどうかなんとなく迷っていて結局1週間ぐらい前になってバタバタとチケットとホテルの予約をしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.expedia.co.jp/"&gt;Expedia&lt;/a&gt;で飛行機とホテルの予約&lt;/li&gt;
&lt;li&gt;チケットを&lt;a href="http://www.panorama.nyc/"&gt;Panorama公式サイト&lt;/a&gt;で購入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;チケットは買うのが遅すぎて郵送では間に合わなくなっていたので現地のBox OfficeでWill Callでチケット受け取りになりました。&lt;/p&gt;
&lt;h2&gt;1日目&lt;/h2&gt;
&lt;h3&gt;出国+機内&lt;/h3&gt;
&lt;p&gt;そんなこんなでだらだら過ごしてたら出発当日に。&lt;/p&gt;
&lt;p&gt;当日になると行きたくなくなる病を発揮しているのかなかなか眠れず結局AM7時頃に就寝してAM10時頃に起床。&lt;/p&gt;
&lt;p&gt;GitHubにPRのレビューが溜まってるけど放置。PCといったな、あいつは置いてきた。&lt;/p&gt;
&lt;p&gt;出国するわくわく感とめんどくささもあいまってだらだら過ごしつつ2時間前ぐらいに成田空港着予定で出発。&lt;/p&gt;
&lt;p&gt;京王新線本八幡行きの乗り換えがよく分からず鈍行に乗ってしまい+20分遅れた。京王線の新宿以降の乗り換えがいまだによく分からない。&lt;/p&gt;
&lt;p&gt;荷物は一人旅ということもあって20Lくらいのバックパック1個に収めました。&lt;/p&gt;
&lt;p&gt;荷物が少なくても現地の都市の機能を活用するか金で殴れば解決する問題は金で解決すればいいのです。&lt;/p&gt;
&lt;p&gt;連日不規則な生活をしてたのがたたってか早速行きの電車で眠くなりつつも成田空港に到着。&lt;/p&gt;
&lt;p&gt;オンラインチェックインを済ませていたのでそのまま保安検査場に。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="bLMJJ4o"&gt;&lt;a href="//imgur.com/bLMJJ4o"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;バックパック1個とは言えそこそこ詰めてたので機内持ち込みサイズにひっかからないかちょっと心配だったけど問題なし。そのまま出国審査でパスポートとモバイル搭乗券を見せて搭乗口へ。&lt;/p&gt;
&lt;p&gt;搭乗時間までしばらく時間があったのでフードコートでラーメン食べてたら英語でこの席空いてますかーと聞かれておかしいまだ日本なのに英語だーとか思いながらどうぞのジェスチャーをした。&lt;/p&gt;
&lt;p&gt;だらだら過ごしてたら搭乗時間になったので搭乗ゲートへ。成田空港-&amp;gt;JFK国際空港で約12時間のフライトです。&lt;/p&gt;
&lt;p&gt;乗り継ぎが面倒だったので安定のANAの直行便。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="qDBUe8A"&gt;&lt;a href="//imgur.com/qDBUe8A"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;出発後2時間ぐらいで機内食が出てきた。和風洋風選べたので和風の牛すき焼き丼にした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;牛すき焼き丼&lt;/li&gt;
&lt;li&gt;そうめん&lt;/li&gt;
&lt;li&gt;サラダゆずポン酢ドレッシング&lt;/li&gt;
&lt;li&gt;ポテサラ+ハム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結構ご飯にボリュームあったのでお腹いっぱいに。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="5kcqufl"&gt;&lt;a href="//imgur.com/5kcqufl"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;食後に出てきたハーゲンダッツは親でも殺されたのかってくらい硬かったから3分くらい放置してから食べました。あずきバーか。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="TGQc40K"&gt;&lt;a href="//imgur.com/TGQc40K"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;機内での暇つぶしは主にフェスの予習とガイドブックを読んで観光の予習、旅行記を読んで旅情気分に浸ることにしました。&lt;/p&gt;
&lt;p&gt;フェスの予習にはSpotifyでPanorama NYC用のプレイリストを作ってローカルダウンロードしてBGMに。
ただ歌詞予習するぞ！と意気込んでいたもののオンラインじゃないと歌詞を表示出来ないらしいので歌詞は諦めました。&lt;/p&gt;
&lt;iframe src="https://open.spotify.com/embed/user/1163671554/playlist/1C6QYgf9BNWyONe0Pa8VYH" width="300" height="380" frameborder="0" allowtransparency="true"&gt;&lt;/iframe&gt;

&lt;p&gt;ガイドブックはKindleで色々探してみたもののいわゆる大手出版社が出しているようなものは似たり寄ったりなのでそういうのは一冊のみで個人でKDPで出版しているガイドブックを入れるのがおすすめです。
ニューヨーク在住の日本人が書いたものや現地の人が使うようなローカル施設の紹介とかおもしろいです。
機内で読んだNYPL紹介ガイドが面白かったので急遽予定にNYPLの観光を入れたくらいです。&lt;/p&gt;
&lt;p&gt;今回の旅の目的の一つにニューヨークの普段の暮らしに近いところも見たいというのもあって、実際の暮らしを見てまぁこんなもんだよなというか、これならニューヨークでも暮らせそうだなというレベルを見たいというのがあってスーパーとか現地で普通に暮らしてる人が普通に行ってそうなところに行きたかったのでそういう意味でNYPLなどの図書館はよかったです。&lt;/p&gt;
&lt;iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=koukouseidesu-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00DK2GKX6&amp;linkId=d7129d0abecfb0a91667da6a7227b375"&gt;&lt;/iframe&gt;

&lt;iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=koukouseidesu-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01BQZ7Y38&amp;linkId=fb5e7cd1a5e0de6aea71815f9623afb7"&gt;&lt;/iframe&gt;

&lt;p&gt;あとは深夜特急をKindleに入れるなどして旅情気分を高めてました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="1B3Nfq8"&gt;&lt;a href="//imgur.com/1B3Nfq8"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;到着前にもう一度朝食的な食事があって洋風と和風のがあったので洋風をオーダー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;イングリッシュマフィン（おいしい）&lt;/li&gt;
&lt;li&gt;筑波ヨーグルト&lt;/li&gt;
&lt;li&gt;フルーツ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。&lt;/p&gt;
&lt;p&gt;東京-NYの時差は13時間なので機内でも普段通り眠ると単純計算で昼夜逆転生活なるので機内ではあまり眠らずにうとうとして過ごしました。
さすがに12時間にもなるとお尻とヘッドレストに当たる頭の部分が痛くなってきて後半はあまりうとうと出来ませんでしたが。&lt;/p&gt;
&lt;p&gt;そんなこんなでNY到着。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="Z5DTi2X"&gt;&lt;a href="//imgur.com/Z5DTi2X"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h3&gt;入国審査&lt;/h3&gt;
&lt;p&gt;入国審査でスキンヘッドの強面の審査官の人に当たり、しかもその人の英語が早口で聞き取れない問題があったものの、聞きなおしたりジェスチャーをしてもらったりしつつ指紋採取と写真取ってなんとか通過。強面だったけど審査終わった時に「アリガトウー」と片言の日本語をいってくれたりしたので悪い人ではなかったと思う。&lt;/p&gt;
&lt;p&gt;バックパック1個だけだったので税関のとこで「荷物それだけ？」って聞かれたのでそうだよと言ったら特に問題なく通過出来た。そんなこんなで無事空港を脱出。&lt;/p&gt;
&lt;p&gt;到着したターミナルは割りとこじんまりとしていて到着口を出るとすぐエアトレインへの案内があったのでその案内通りに進行。&lt;/p&gt;
&lt;h3&gt;マンハッタン市内へ&lt;/h3&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="UBFWYMN"&gt;&lt;a href="//imgur.com/UBFWYMN"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;JFK空港からマンハッタン市内に行くまでは地下鉄、バス、タクシーなどの方法がありますが今後3日間のメインの移動方法にもなる予定の地下鉄に慣れておこうと思い地下鉄で行くことにしました。&lt;/p&gt;
&lt;p&gt;案内板に沿って進むとエアトレイン（ターミナル間を周回している電車）の駅があるのでそれに入ります。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="xjOidof"&gt;&lt;a href="//imgur.com/xjOidof"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;しばらく待ってたらエアトレインが来たので乗ってジャマイカステーションで降ります。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="KHadzZQ"&gt;&lt;a href="//imgur.com/KHadzZQ"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;同じような旅行客が多いので降りて流れに乗って進んだらNY地下鉄メトロカードの自販機があるのでそこでエアトレイン5$ + メトロカードの代金分を払います。
一応メニューに日本語があるのでなんとなく操作は出来るはずです。&lt;/p&gt;
&lt;p&gt;が、早速ここで問題が発生しました。結果から言うと10ドル飲まれました。支払い方法で「Cash（現金）」があったので出国前に両替した紙幣入れたら入れたあとにCashは使えません（！？）みたいなこと言われて返ってきませんでした。今考えても謎でしたが、もうこの時点で頭の中は？でボタン連打していたら後ろから係員っぽい人が「分からなければ誰かに聞いてください（お前はわからないんかーい）」と言ってきたので一旦仕切りなおし。&lt;/p&gt;
&lt;p&gt;聞いてもなんか解決しなさそうな雰囲気があったのでクレカを使ったらあっさり支払い完了。
「AirTrain + Subway」というやつです。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="DBRDlp0"&gt;&lt;a href="//imgur.com/DBRDlp0"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;金で殴って解決する問題は金で解決すればええんや…と思いつつ今後もニューヨーク地下鉄には何回か苦しめられます。&lt;/p&gt;
&lt;p&gt;無事（？）メトロカードを購入し改札を通ったあと案内板にそってSubway Eのとこまで進みます。
途中エレベータがあるので地下3階に降りるときに隣の旅行者っぽい人に「この階地下鉄？」とか聞かれたりしたけどもちろん知らないのでごめん知らないって言ったらボタン前にいる人が地下鉄は3階だよ！みたいなこと言ってくれて助かった。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="4RczvBV"&gt;&lt;a href="//imgur.com/4RczvBV"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;地下鉄乗る時もチャージ金額が足りなくて通れなかったんだけど移民っぽいおじさんが助けてくれました。ぶっちゃけ3割くらいしか言ってること分からなかったけどチャージ金額が足りないからあっちで買ってこいとのことだったのでOKといいチャージしに向かう。&lt;/p&gt;
&lt;p&gt;このチャージ方法もなんか順番が分かりづらく、日本のPASMOとかSUICAのチャージみたいにいきなりカードを入れることは出来ません。
まず「Start」ボタンを押して所定のチャージの前の画面まで進んだらメトロカードの挿入口が開いてメトロカードを入れることが出来ます。&lt;/p&gt;
&lt;p&gt;そしてメトロカード自体もただの磁気テープがついた薄っぺらいカードなので改札でスワイプするときの認識率も低く、スワイプするスピードが早すぎても遅すぎてもだめで方向も決まってたりで面倒です。&lt;/p&gt;
&lt;p&gt;メトロカード券売機周りにも一人専用で係員がついていたりしてシステムの不備をマンパワーで割りきって運用してる感ありありでした。
結構な旅行者がエアトレインと地下鉄で詰まっていたのでやっぱ普通に難しいんだと思います。&lt;/p&gt;
&lt;p&gt;ここらへんは手順が面倒なので荷物が多ければバスで一発でマンハッタン行ったほうが楽だとは思います。&lt;/p&gt;
&lt;p&gt;改札を抜けるとマンハッタン行きのE線の電車があるのでこれに乗ります。
とりあえず乗ったら一安心ですが、地下鉄車内のアナウンスもなんか音質悪くて今どこだよみたいな感じになるのでGoogle MapとにらめっこしつつLexington Av/53 Stまで移動しました。&lt;/p&gt;
&lt;h3&gt;ホテル到着&lt;/h3&gt;
&lt;p&gt;Lexington Av/53 St駅に着いたら地上に出てホテルまで向かいます。&lt;/p&gt;
&lt;p&gt;地下鉄を降りて手で回す回転式のゲートを通って地上に出るとそこはもうニューヨークです。&lt;/p&gt;
&lt;p&gt;その日は若干天気が悪く湿度が高かったので東京ほどではないけど蒸し暑く異国のにおいがむわっとしました。&lt;/p&gt;
&lt;p&gt;今回取ったホテルはグランドセントラル近くの&lt;a href="https://www.expedia.co.jp/New-York-Hotels-Club-Quarters-Hotel.h533993.Hotel-Information?regionId=178293&amp;amp;langid=1041&amp;amp;semcid=JP.UB.GOOGLE.SEARCH.HOTEL&amp;amp;kword=New_York_hotels_dsa!e.ZzZz.4960000002717.0.196019895264..new_york_hotels_dsa&amp;amp;semdtl=a1340001235.b126405954715.d1196019895264.e1c.f11t1.g1aud-168216763754:dsa-193199260155.h1b.i1.j11009307.k1.l1g.m1.n1&amp;amp;gclid=Cj0KCQjwtpDMBRC4ARIsADhz5O4gS9gxpS_2KYN4qQaQ6qT9kSwJ4hruYRs9CCV0_xNt-bFO_Q195_oaAoFLEALw_wcB"&gt;Club Quarters Hotel&lt;/a&gt;というところでした。
毎日ランドール島のフェスに行くのと、ついでに出来れば観光をしたかったので各種施設にアクセスの良いところと夜遅く帰っても治安的に問題なさそうなとこにしたかったのでここにしました。
グランドセントラルまで徒歩2分くらいの駅近なので割りと何をするにも便利なとこだとは思います。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="JqSuRX2"&gt;&lt;a href="//imgur.com/JqSuRX2"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;チェックインも最低限の英語で余計な英語は使いません（使えません）&lt;/p&gt;
&lt;p&gt;「ハロー、チェックインプリーズ」これでOKです。&lt;/p&gt;
&lt;p&gt;携帯でエクスペディアで予約した時のバウチャーを見せつつ、同時にクレジットカードとパスポートも出します。
ガバ英語力では英語を聞き取れない可能性が高いためなるべくやり取りをしないため必要な書類は予め先手を打って出します。&lt;/p&gt;
&lt;p&gt;「27〜31日で間違いないですね？」みたいなことを言われたので「Yes」と答えカードキーを渡されてなんかそれっぽい説明を一通り受けたので「サンキュー（よく分かっていない）」といい、エレベーターに乗ります。
このホテルはエレベーターもカードキーを渡さないと動かない仕組みっぽくまずカードキーをボタンパネルの読み取り機にかざしてから行きたい階のボタンを押します。&lt;/p&gt;
&lt;p&gt;目的の階に到着しやっと部屋に到着。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="NtiNNim"&gt;&lt;a href="//imgur.com/NtiNNim"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;部屋からの眺めはこんな感じ。
ニューヨークだー。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="lZbkQwz"&gt;&lt;a href="//imgur.com/lZbkQwz"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;このホテルはどちらかというとビジネスユース寄りなのか割りとこじんまりとした部屋で必要最低限の設備が備わっているという感じでした。
無駄におしゃれすぎず立地といい機能性を優先してる感じで一人旅にはいいかもしれない。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="uc5psB9"&gt;&lt;a href="//imgur.com/uc5psB9"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;バスタブがないので3日目くらいに湯船に浸かりたくなって「ニューヨーク　入浴」（？）とかググったけどニューヨークには銭湯らしい銭湯はない（スパっぽいのはある）らしくちょっとがっかりした。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="UyX8UsA"&gt;&lt;a href="//imgur.com/UyX8UsA"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;当たり前だけどテレビをつけるとトランプ政権のニュースとかやっているのでアメリカだーと思ったりした。
テレビのチャンネルもニュースチャンネルが多くメディアの街ニューヨークっぽいなーと。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="QFSs937"&gt;&lt;a href="//imgur.com/QFSs937"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;無料WiFiはアクセスポイントに接続したらルームナンバーとチェックインした時の氏名を入れると繋ぐことが出来る方式だった。たぶん受付でそんな説明を受けていたんだろうけどよく分からずも勘でつなぐことが出来た。&lt;/p&gt;
&lt;p&gt;あと各階に空のペットボトルがあって無料でウォーターサーバーからミネラルウォーターを入れることが出来たので飲み物には困らなかったのがよかった。
コーヒーメーカーが部屋に備え付けられていたので朝はミネラルウォーターを使ってコーヒーを入れたりした。&lt;/p&gt;
&lt;p&gt;とりあえずシャワーを浴びて1時間休憩したらまだ20時くらいだったので近場にぶらぶら散歩に行った。&lt;/p&gt;
&lt;h3&gt;グランドセントラル&lt;/h3&gt;
&lt;p&gt;ホテルから2分くらいだったのでまずグランドセントラルに行った。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%9C%E3%82%B6%E3%83%BC%E3%83%AB%E6%A7%98%E5%BC%8F"&gt;ボザール様式&lt;/a&gt;の建築様式が美しいニューヨーク市内の中心になるハブ駅です。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="aIL6AXI"&gt;&lt;a href="//imgur.com/aIL6AXI"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="AKee9NS"&gt;&lt;a href="//imgur.com/AKee9NS"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="Q0z3dqp"&gt;&lt;a href="//imgur.com/Q0z3dqp"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;なんか広いので広いです（語彙の喪失）&lt;/p&gt;
&lt;p&gt;NYPLも同じボザール様式で天井が広くダイナミックな感じがするので無限に眺めてられます。無限に眺められる景色はいいですね。&lt;/p&gt;
&lt;p&gt;ニューヨークはこういう古典様式な建築物からグッゲンハイム美術館のようなモダン建築様式まで一つの都市に共存しているのがおもしろいです。&lt;/p&gt;
&lt;h3&gt;タイムズスクエア&lt;/h3&gt;
&lt;p&gt;次はグランドセントラルから歩いて7分くらいのとこにタイムズスクエアがあるのでそこまで散歩しに行きました。&lt;/p&gt;
&lt;p&gt;碁盤目都市なので交差点が多く信号もいっぱいあるので割りとそこら中で信号無視して横断していて最初は戸惑ったものの3日目ぐらいには自分も適当なタイミングで横断するようになりました。&lt;/p&gt;
&lt;p&gt;あと道がけっこうな勢いで汚いしドブくさかったりしました。日本でいうと渋谷に雰囲気が近いなと。&lt;/p&gt;
&lt;p&gt;近づくにつれて建物のライティングが派手に。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="tVXtmP3"&gt;&lt;a href="//imgur.com/tVXtmP3"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;21時くらいだとまだまだ観光客ばっかです。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="3SVImkX"&gt;&lt;a href="//imgur.com/3SVImkX"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="6BAzPT3"&gt;&lt;a href="//imgur.com/6BAzPT3"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;情報量〜&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="fl4R478"&gt;&lt;a href="//imgur.com/fl4R478"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;情報量〜&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="La5Kp2Q"&gt;&lt;a href="//imgur.com/La5Kp2Q"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;情報量〜&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="UN4CgfB"&gt;&lt;a href="//imgur.com/UN4CgfB"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;MMMM&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="p2US4wK"&gt;&lt;a href="//imgur.com/p2US4wK"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;あっ、ここなんかのあれで見た風景だ！（うろ覚え）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="MEum86l"&gt;&lt;a href="//imgur.com/MEum86l"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;いい位置の銅像
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="ELxQv3O"&gt;&lt;a href="//imgur.com/ELxQv3O"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;例の風景&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="6rQcppW"&gt;&lt;a href="//imgur.com/6rQcppW"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;LINEのポップアップショップがありました。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="OjrrACp"&gt;&lt;a href="//imgur.com/OjrrACp"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="imgur-embed-pub" lang="en" data-id="4iMVznW"&gt;&lt;a href="//imgur.com/4iMVznW"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ユニクロのポップアップストアも（あまり人は入っていなかった）&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="XMTx8zJ"&gt;&lt;a href="//imgur.com/XMTx8zJ"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;特に変な人に絡まれることもなくよかったです。&lt;/p&gt;
&lt;p&gt;タイムズスクエア付近を歩くとブロードウェイとかあそこらへんの通りのエンターテインメントへの貪欲さとか情報量の多さで若干疲れます。&lt;/p&gt;
&lt;h3&gt;Whole Foods Market&lt;/h3&gt;
&lt;p&gt;タイムズスクエアは軽く歩いて満足したのでそろそろホテルに帰ります。
帰りついでにアメリカ来たら行ってみたかったスーパーのWholeフーズに行きます。
Amazonが最近買収して生鮮食品業界にも参入したことで有名ですね。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="nbc7dIR"&gt;&lt;a href="//imgur.com/nbc7dIR"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;おーいお茶とか売ってます。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="S0thoHP"&gt;&lt;a href="//imgur.com/S0thoHP"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;旅行の時はその土地のスーパーとかデパ地下みたいの行くとその土地の生活感とかなんとなく分かったりあんま自分達のとこと変わらないなーとか思って安心したりするので好きです。
立派な観光地やレストランがあってもスーパーはほぼ世界中どこでも共通規格だし日常のための場所という感じが落ち着きます。&lt;/p&gt;
&lt;p&gt;量り売りのデリが1ポンド（453g）9ドルくらいで売っているので夕食用に買って帰りました。&lt;/p&gt;
&lt;p&gt;bakedパイナップル、ブルーベリー、メロン、野菜、骨なしチキン、ジャガイモって感じ。
少食だから大体1ポンドぐらいで割りと十分でした。&lt;/p&gt;
&lt;p&gt;箱のサイズミスったのでホテルに持ち帰った頃に悲惨なことになってました。三角コーナーかな？&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="UVUmOfe"&gt;&lt;a href="//imgur.com/UVUmOfe"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;見た目が残飯ですが普通においしいので食べ物は偉い。&lt;/p&gt;
&lt;p&gt;持ち帰る時にスプーンをつけてくれなかったので自分で買うかイートインスペースのスプーン持ち帰った方がいいのかもしれません。イートインスペース探してうろうろしたけど結局どこにあるか分からなくてMPも少なくなって聞く気力も無くなっていたので箱を折って簡易スプーンっぽくして食べました。マイ箸とか持って行った方が便利かもしれない。&lt;/p&gt;
&lt;p&gt;あと無糖（Unsweetened）のジンジャエールティーも買った。おいしい。あと量が多い。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="69cQlyC"&gt;&lt;a href="//imgur.com/69cQlyC"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;日本人が普通に食べる量なら1ポンドくらいでも十分な気はするので食費抑えるならスーパーのデリとか使えば結構安く抑えられると思います。
アメリカらしい食事ではないけどニューヨークみたいな意識高めの都会だとこういうのも流行ってるんだなーという雰囲気が感じられてよかったです。&lt;/p&gt;
&lt;p&gt;あと日本のスーパーとかと違うのはレジめっちゃ並んでるのに品出ししてる人は絶対ヘルプとかせずに自分の仕事やっていたりIt's not my businessなとこですかね。給料は決まってるから給料分以外の仕事は絶対にしないぞという意思（重要）&lt;/p&gt;
&lt;p&gt;あとホールフーズの帰りにDJ mixを配ってる謎の兄ちゃんに強制的にCDを渡されてチップを要求されるということもありました。&lt;/p&gt;
&lt;p&gt;対応が面倒だったから結局1ドルだけチップあげたけど。&lt;/p&gt;
&lt;p&gt;渡された謎のDJ mix。CD再生機器がなかったので結局聞けず。&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="uSJmb0L"&gt;&lt;a href="//imgur.com/uSJmb0L"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;ホテルに帰ってとりあえず夕飯を済ませてシャワー浴びたらもうどっと疲れが出て眠くなったので12時くらいに就寝。
こんな感じで1日目を終えました。&lt;/p&gt;
&lt;p&gt;何気なく過ごしてるけど普通に聞き取れないこと多くて何回も聞き直してたりしつつなんとか過ごせたので面倒でも対応してくれた人には感謝です。&lt;/p&gt;
&lt;p&gt;本来の目的のフェスは2日目からになります。&lt;/p&gt;
&lt;p&gt;その2へ続く...&lt;/p&gt;</content><category term="vacation"></category><category term="panorama"></category></entry><entry><title>MacBook Proを捨ててThinkpad X220を買った</title><link href="https://shufo.github.io/alternative_to_mac.html" rel="alternate"></link><published>2016-11-28T20:00:00+09:00</published><updated>2016-11-28T20:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2016-11-28:/alternative_to_mac.html</id><summary type="html">&lt;p&gt;Macbook Proを捨ててThinkpad X220を買った話&lt;/p&gt;</summary><content type="html">&lt;p&gt;関連: &lt;a href="http://d.hatena.ne.jp/joker1007/20161125/1480069437"&gt;MacBook Proを捨ててThinkpad T460sを買ってgentooを入れた - joker1007の日記&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正確にいうとMBP Late 2016を買おうと思っていたのだけど結局Thinkpad X220を買った話です&lt;/p&gt;
&lt;p&gt;今年10月の&lt;a href="http://www.apple.com/apple-events/october-2016/"&gt;例のイベント&lt;/a&gt;で発表されたMBPは本当に楽しみにしていたし、MBP費用も貯めていたのだけど&lt;br&gt;
やっぱり欲しくなくなってしまった理由としてAppleがもう開発者の方向を向いてないかもしれない、というのをあのイベントを見て強く感じたからです。&lt;br&gt;
Appleの方向性に共感していたら買ったかもしれないけどTouchBarの方向性はちょっと支持出来なかったので…&lt;/p&gt;
&lt;p&gt;あと最近Docker for Windowsを久しぶりに使ったらmount周りもちゃんと動いたのでWindows環境でも自分の場合は普段の開発にほとんど問題なくなったというのもあります。
自分で作ったアプリは全てDockerizeするDockerオタクなのでこういうときはさすがに恩恵を感じます。
Linuxデスクトップを導入することも考えたけどドライバ周りや普段使い、会社での相互運用性を考えると常用するには少しハードルが高いなと思いWindowsにしています。&lt;/p&gt;
&lt;h2&gt;ThinkPad X220&lt;/h2&gt;
&lt;h3&gt;スペック&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Core i5-2660M&lt;/li&gt;
&lt;li&gt;Mem: 4G&lt;/li&gt;
&lt;li&gt;Disk: HDD 480GB&lt;/li&gt;
&lt;li&gt;ディスプレイ解像度: 1366x768&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MBPとの比較&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ESCがデカい&lt;/li&gt;
&lt;li&gt;キーボードが最高&lt;/li&gt;
&lt;li&gt;トラックポイントはいいぞ&lt;/li&gt;
&lt;li&gt;2～3万で買える&lt;/li&gt;
&lt;li&gt;バッテリ持ちは悪い&lt;/li&gt;
&lt;li&gt;1.5kgぐらいあるので若干重い&lt;/li&gt;
&lt;li&gt;パーツが大量に出回って分解も簡単なので直しやすい&lt;/li&gt;
&lt;li&gt;~~スタバでMacを威嚇出来る~~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ThinkPad X220は2011年発売のモデルで、アイソレーションキーボードになる前のクラシック型のキーボードとしては最後のold ThinkPadです。
Sandy Bridge世代のCPUと高い拡張性で2016年現在でもパーツの換装を行えば十分使用可能ながら、企業からのリース品が大量に出回って中古市場で2～3万でとこなれて来てるので購入するには丁度いい頃だと思います。&lt;br&gt;
Sandy Bridgeと最新のSkylake世代のCPUを比較しても性能差は&lt;a href="http://www.cpubenchmark.net/compare.php?cmp%5B%5D=2556&amp;amp;cmp%5B%5D=812"&gt;ほぼない&lt;/a&gt;のでCPUバウンドな処理を行わなければSSDとメモリ換装で最新ノートPCと比べてもほぼ遜色ないんじゃないでしょうか。&lt;br&gt;
さすがにPCIe-NVMeディスクを搭載出来るような機種にはSATA SSDに換装してもディスクI/Oで劣るけれども割り切って使うにはありだと思います。&lt;/p&gt;
&lt;p&gt;今回は英字キーボードが国内の中古市場には見つからなかったのでeBayから輸入しましたが
日本語キーボードでよければ国内の中古市場にも十分流通してるのでそちらの方が早いと思います。&lt;/p&gt;
&lt;h3&gt;注文&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2050601.m570.l1313.TR0.TRC0.H0.XX220.TRS0&amp;amp;_nkw=X220&amp;amp;_sacat=0"&gt;eBay&lt;/a&gt;からThinkPad X220を検索しそこそこ状態のよさそうな品かつリース品を綺麗にしたようなものをDyminという業者から購入。&lt;/p&gt;
&lt;p&gt;X220にはタッチパネルモデルもあるみたいだけど無駄に重くなるので普通のモデルにした。&lt;/p&gt;
&lt;h3&gt;配送から届くまで&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注文後1日: 業者から発送&lt;/li&gt;
&lt;li&gt;4日: eBayのGlobal集荷センターに到着(ここから長い)&lt;/li&gt;
&lt;li&gt;5～14日: 海外配送&lt;/li&gt;
&lt;li&gt;14～15日: 国内配送&lt;/li&gt;
&lt;li&gt;16日: 到着&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パーツも結構流通してるっぽいので国内中古市場で買った日本語キーボード版を英字キーボードに換装したほうが早かったかなと思いました。&lt;/p&gt;
&lt;h3&gt;到着&lt;/h3&gt;
&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="ja" dir="ltr"&gt;MacBook Pro届いた &lt;a href="https://t.co/A3lKMTUrYT"&gt;pic.twitter.com/A3lKMTUrYT&lt;/a&gt;&lt;/p&gt;&amp;mdash; shufo (@shufo_) &lt;a href="https://twitter.com/shufo_/status/802768934432743424"&gt;November 27, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;(ThinkPad X220です)&lt;/p&gt;
&lt;p&gt;海外発送の送料込でちょうど3万程でした。&lt;br&gt;
全体的に使用感はほとんどなく綺麗だったけどキーボードには気にならないレベルだけどわずかに使用感あり。
ThinkPadを買うのは初めてですがこの時代のold ThinkPadは雰囲気があっていいですね。個人的にはキーボードは薄い方が好きですがちゃんとした深さがあるので無駄にガチャガチャやりたくなります。&lt;/p&gt;
&lt;h3&gt;SSD・メモリ換装&lt;/h3&gt;
&lt;p&gt;SSDとメモリを以下に換装。
パーツ費用含めても全体で大体5万くらいでした。&lt;br&gt;
換装済みの中古品もあるけど高くつく割には容量が少なかったりするので手間をかけられるなら自分で換装した方が安く高スペックに出来ます。&lt;/p&gt;
&lt;h4&gt;SSD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Crusial MX300 525GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交換手順参照: &lt;a href="http://003sh.ou-net.com/blog/?p=1114"&gt;ThinkPad x220 SSD交換(Apacer/SanDisk) | 003SH 解体新書&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;メモリ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Transcend PC3L-12800 DDR3L 1600 8GB×2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交換手順参照: &lt;a href="http://kimamatech.blog.fc2.com/blog-entry-49.html"&gt;ThinkPad X220 増強作戦 その１ ： 1万円でメモリを16GBに増設 - きままテック&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;MBPの代替としてThinkPad X220を買った。&lt;br&gt;
モバイル出来るUnixとしてMacは好きなのだけど最近のAppleの方向性からロックインが強くなることの懸念も含めてノートPCから変えてみました。(まだiPhoneは使ってる)&lt;/p&gt;
&lt;p&gt;最近のWindows開発環境としてはbabun + Docker for Windowsがあれば個人的に困ることはほぼなくなって来たのであとはWSLのbashの完成度がより高まればいよいよWindowsでも十分だなと思います。&lt;br&gt;
Linuxデスクトップは&lt;a href="https://elementary.io/ja/"&gt;elementary OS&lt;/a&gt;が気になっているのでmSATA SSDを追加してデュアルブートにでもしてみようかなと思います。&lt;/p&gt;
&lt;h2&gt;他候補&lt;/h2&gt;
&lt;p&gt;MBPオルタナティブのノートPCとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.razerzone.com/gaming-systems/razer-blade-stealth"&gt;Razer Blade Stealth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dell.com/jp/p/xps-13-9360-laptop/pd"&gt;Dell XPS 13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がスペックと価格のバランスがよかったので検討していたのだけど自分のノートPCの使用頻度に対してはオーバースペックすぎたので候補から外れました。&lt;/p&gt;
&lt;h2&gt;追記 2016-12-01&lt;/h2&gt;
&lt;p&gt;到着後Windows7からWindows10 Proにアップグレードしバッテリーのファームウェアをアップグレードしようとしたらバッテリーが死にました…
ファームウェアをアップデートする前はバッテリーを認識していたので恐らくファームウェアの書き換えに失敗したようです。&lt;/p&gt;
&lt;h3&gt;バッテリー追加&lt;/h3&gt;
&lt;p&gt;結局以下の互換バッテリーをAmazonでポチりました&lt;br&gt;
元は9セルでX220本体からバッテリーがはみ出していたのが筐体の枠にちょうど収まりました&lt;br&gt;
公式じゃないですけど今のとこ問題ないです&lt;br&gt;
安いし物理的に取り外しし易いからバッテリーが心配な時は何本か持ち歩くってのもありですね&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="a/wiq4p"&gt;&lt;a href="//imgur.com/wiq4p"&gt;&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://amzn.asia/bjrtGpW"&gt;WorldPlus バッテリー LENOVO ThinkPad X230 X230i X220 X220i X220s 対応 6セル&lt;/a&gt;&lt;/p&gt;</content><category term="Mac"></category><category term="PC"></category></entry><entry><title>Pelican + codeanywhere + Github Pagesでシンクライアントなブログ作成</title><link href="https://shufo.github.io/site_building.html" rel="alternate"></link><published>2015-11-23T13:00:00+09:00</published><updated>2015-11-23T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-11-23:/site_building.html</id><summary type="html">&lt;p&gt;Pelican + codeanywhere + Github Pagesで非環境依存なブログ構築&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;このブログは&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で書いているけどいわゆるサイトジェネレータにありがちな問題なのがいちいち開発環境を開いたりするのが面倒というのがある。&lt;br&gt;
WebUI管理画面をサイトジェネレータ自体が持っている&lt;a href="http://hubpress.io/"&gt;HubPress&lt;/a&gt;は気軽に記事を投稿出来るもののGithub APIを使うためGithub Pages専用アプリという色が強く他の環境に移す場合を考慮して使ってはいない。&lt;br&gt;
2015年11月現在主なサイトジェネレータは&lt;a href="https://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt;でGitHub Starの多い順で&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, &lt;a href="http://octopress.org/"&gt;OctoPress&lt;/a&gt;, &lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt;, &lt;a href="http://gohugo.io/"&gt;Hugo&lt;/a&gt;, &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;がよく使われている。&lt;br&gt;
それぞれWebベースの管理画面はないもののシンプルな構成で一度生成してしまえば特定のランタイムやDBに依存しないで静的コンテンツを配信出来る。&lt;/p&gt;
&lt;h2&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特定のマシン(PC, Mac, タブレット)に依存しないサイトジェネレータ環境の構築&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やったこと&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で静的コンテンツの生成、&lt;a href="https://codeanywhere.com/"&gt;codeanywhere&lt;/a&gt;でWebベースでのファイルの編集とサイトジェネレータ用ランタイムの構築、GitHub Pagesでサイトの公開を行った。&lt;/p&gt;
&lt;h2&gt;Pelican とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/pelican.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt;はPython製の静的サイトジェネレータでMarkdown形式で記事を書くことが出来る。&lt;/p&gt;
&lt;p&gt;主な機能としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記事の作成&lt;/li&gt;
&lt;li&gt;RSS フィードの作成&lt;/li&gt;
&lt;li&gt;テーマ機能&lt;/li&gt;
&lt;li&gt;プラグイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;があり、ここら辺は類似のサイトジェネレータと特に変わりなし。&lt;/p&gt;
&lt;h2&gt;Github Pages とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/githubpages.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; で静的なページをホスティングすることが出来るサービス。
独自ドメインの割当も出来る。&lt;/p&gt;
&lt;h2&gt;codeanywhere とは&lt;/h2&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codeanywhere.com/"&gt;codeanywhere&lt;/a&gt;は Web上でコードの編集や実行が出来るクラウドIDE。&lt;br&gt;
プロジェクトごとにコンテナが作成されランタイム等は自由にインストール出来る。&lt;br&gt;
ちなみにこの記事もcodeanywhereで作成から公開まで行っている。&lt;/p&gt;
&lt;p&gt;主な機能としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub, BitBucketからのコードの取得・編集&lt;/li&gt;
&lt;li&gt;コンテナ内での任意のコマンドの実行&lt;/li&gt;
&lt;li&gt;FTPアップロード&lt;/li&gt;
&lt;li&gt;SSH接続&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;がある。今回はPython製ツールを使うのでコンテナのテンプレートにPythonを使いプロジェクトを作成してみる。&lt;/p&gt;
&lt;h2&gt;やってみる&lt;/h2&gt;
&lt;p&gt;まず&lt;a href="https://github.com/new"&gt;GitHub&lt;/a&gt;で「&lt;code&gt;ユーザ名.github.io&lt;/code&gt;」という名前で空のリポジトリを作る。
自分の場合GitHubユーザ名は&lt;code&gt;shufo&lt;/code&gt;なので&lt;code&gt;shufo.github.io&lt;/code&gt;を作成。&lt;/p&gt;
&lt;p&gt;作成出来たらcodeanywhereの&lt;a href="https://codeanywhere.com/dashboard#project"&gt;プロジェクトページ&lt;/a&gt;から適当に新規プロジェクトを作成する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;先ほど作成したユーザ名.github.ioを選び、コンテナのテンプレートとしてpythonを選択する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nextボタンをクリックししばらく待つとプロジェクト編集画面が開きファイルを編集出来るようになるので&lt;br&gt;
左のファイルツリーからレポジトリ名を右クリックし「SSH Terminal」をクリックする。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ターミナルが開くのでPelicanのインストールをする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pelican Markdown mdx_linkify mdx_del_ins ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にサイトの初期化。設定するパラメータを色々質問されるので必要に応じてyまたはnを押して進める。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Please answer the following questions so this script can generate the files                                                                                                                                                                                                           
needed by Pelican.                                                                                                                                                                                                                                                                    


&amp;gt; Where do you want to create your new web site? [.]                                                                                                                                                                                                                                  
&amp;gt; What will be the title of this web site? test                                                                                                                                                                                                                                       
&amp;gt; Who will be the author of this web site? shufo                                                                                                                                                                                                                                      
&amp;gt; What will be the default language of this web site? [en] ja                                                                                                                                                                                                                         
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) y                                                                                                                                                                                                             
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://shufo.github.io                                                                                                                                                                                              
&amp;gt; Do you want to enable article pagination? (Y/n) y                                                                                                                                                                                                                                   
&amp;gt; How many articles per page do you want? [10]                                                                                                                                                                                                                                        
&amp;gt; What is your time zone? [Europe/Paris] Asia/Tokyo                                                                                                                                                                                                                                   
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y                                                                                                                                                                                           
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) y                                                                                                                                                                                   
&amp;gt; Do you want to upload your website using FTP? (y/N) n                                                                                                                                                                                                                               
&amp;gt; Do you want to upload your website using SSH? (y/N) n                                                                                                                                                                                                                               
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n                                                                                                                                                                                                                           
&amp;gt; Do you want to upload your website using S3? (y/N) n                                                                                                                                                                                                                                
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n                                                                                                                                                                                                             
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y                                                                                                                                                                                                                      
&amp;gt; Is this your personal page (username.github.io)? (y/N) y                                                                                                                                                                                                                            
Done. Your new project is available at /home/cabox/workspace
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初期化が完了したので記事を書いていく。&lt;code&gt;content&lt;/code&gt;ディレクトリ以下に拡張子を&lt;code&gt;.md&lt;/code&gt;で保存したファイルが記事の対象となる。
基本的な記事のフォーマットは以下の様になる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codeanywhere&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="err"&gt;でブラウザのみでブログ構築&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;site_building&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shufo&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codeanywhere&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Github&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="err"&gt;での非環境依存なブログ構築&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="err"&gt;とは&lt;/span&gt;
&lt;span class="err"&gt;以下本文&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーマを適用。テーマは公式の&lt;a href="https://github.com/getpelican/pelican-themes"&gt;テーマ一覧&lt;/a&gt;から適当に。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir pelican-themes
git clone https://github.com/lucachr/pelican-mg.git pelican-themes/pelican-mg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelicanconf.pyを編集。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;#39;./pelican-themes/pelican-mg&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;記事の出力とサーバの起動を実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./develop_server.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;確認用のサーバURLは画面左のファイルツリーのリポジトリを右クリックし「Info」から表示出来る。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ファイルビューに環境情報が表示される。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere5.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先ほど起動したHTTPサーバはデフォルトで8000番でListenするので&lt;/p&gt;
&lt;p&gt;http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com:8000 をブラウザで開いてみる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="画像" src="/images/codeanywhere6.jpg"&gt;&lt;/p&gt;
&lt;p&gt;確認出来た。&lt;/p&gt;
&lt;p&gt;記事に問題がなければ公開を実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このコマンドを実行すると&lt;code&gt;ghp-import&lt;/code&gt;で&lt;code&gt;output&lt;/code&gt;ディレクトリの内容が&lt;code&gt;master&lt;/code&gt;ブランチにコミットされ、同時に&lt;code&gt;master&lt;/code&gt;ブランチがGitHubへpushされ公開される。&lt;br&gt;
pushから反映までは10分ほど時間かかるのでしばらく待ち反映されたのを確認出来たら完了。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;PelicanとcodeanywhereとGitHub Pagesで意識低めのブログ構築をした。&lt;br&gt;
ローカルの環境に依存しないためいつでも気が向いたときに書けるというのがブログ作成に当たっては大きいメリットだと思う。&lt;/p&gt;</content><category term="pelican"></category></entry><entry><title>マルチホストdocker環境でのBlueGreenなデプロイメント</title><link href="https://shufo.github.io/weave_swarm_compose.html" rel="alternate"></link><published>2015-03-19T13:00:00+09:00</published><updated>2015-03-19T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-03-19:/weave_swarm_compose.html</id><summary type="html">&lt;p&gt;Weave / Swarm / Compose / Consulでdockerのクラスタリング&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;dockerをそれなりに扱おうと思うと直面するのがマルチホスト環境でのdockerの構成。&lt;br&gt;
大抵シングルホストのプリミティブな環境では問題無かったL3/L4の扱い、IPアドレス、ポート等のメタデータのリソース管理が問題になってくる。&lt;br&gt;
前者に関しては、ルーティングコンテナ経由でのパケット交換、cgroup/namespaced、Open vSwtichなどでSDNを実装、 &lt;br&gt;
L3/L4を抽象化し仮想的に１つのネットワークとして扱えるようにすることで解決をしようという動きがある。
代表的なソリューションとしては&lt;a href="https://github.com/socketplane/socketplane"&gt;socketplane&lt;/a&gt;, &lt;a href="https://github.com/zettio/weave"&gt;weave&lt;/a&gt;, &lt;a href="https://github.com/jpetazzo/pipework"&gt;pipework&lt;/a&gt;, &lt;a href="https://github.com/coreos/flannel"&gt;flannel&lt;/a&gt;, Open vSwitch等のソリューションがある。  &lt;/p&gt;
&lt;p&gt;後者に関して分散Key Valueストアにコンテナのメタデータを登録し必要に応じてクラスタの構成情報を読み出す&lt;br&gt;
ことで解決しようとする動きがある。
代表的なソリューションとしては&lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt;、&lt;a href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt;、&lt;a href="http://zookeeper.apache.org/"&gt;zookeeper&lt;/a&gt;等がある。  &lt;/p&gt;
&lt;h2&gt;マルチホストdocker環境で辛いところ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;L3/L4管理&lt;/li&gt;
&lt;li&gt;コンテナの配置スケジューリング&lt;/li&gt;
&lt;li&gt;マルチホストでのメタデータ管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;L3/L4の自動管理&lt;/li&gt;
&lt;li&gt;スケジューリングの自動化&lt;/li&gt;
&lt;li&gt;コンテナライフサイクル管理の自動化&lt;/li&gt;
&lt;li&gt;configのdynamicな書き換え&lt;/li&gt;
&lt;li&gt;BlueGreenなデプロイメント&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やったこと&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;weave&lt;/code&gt;でホストごとに存在するdockerのプライベートネットワークをL3レベルで抽象化、複数のホストにまたがるdockerネットワークを一つのネットワークとして扱えるようにし、&lt;code&gt;Consul&lt;/code&gt;/&lt;code&gt;consul-template&lt;/code&gt;/&lt;code&gt;registrator&lt;/code&gt;でメタデータの管理/configの自動書き換え及びBlueGreenなクラスタの切り替え、またコンテナのスケジューリング/ライフサイクル管理に&lt;code&gt;docker-swarm&lt;/code&gt;/&lt;code&gt;docker-compose&lt;/code&gt;を使用しクラスタ全体を透過的に管理出来るようにした。&lt;br&gt;
それぞれの構成要素は単体で落ちても他の構成要素には影響しないものとし、ホスト障害があってもクラスタ全体としては可用性を存続出来るようにする。
なお前提として各構成要素は全てコンテナのためOSは便宜的に&lt;code&gt;CoreOS&lt;/code&gt;を使用しているがホストでdockerさえ動作すればどんな環境でも動作するようになっている。&lt;/p&gt;
&lt;h3&gt;構成イメージ&lt;/h3&gt;
&lt;p&gt;&lt;img alt="docker-weave-swarm" src="/images/docker-weave-swarm.gif" title="構成"&gt;&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; (Tested on 557.2.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; (Tested on 1.4.1)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zettio/weave"&gt;Weave&lt;/a&gt; (Tested on 0.9.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/swarm/"&gt;docker-swarm&lt;/a&gt; (Tested on 0.1.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/compose"&gt;docker-compose&lt;/a&gt; (Tested on 1.1.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.consul.io/"&gt;Consul&lt;/a&gt; (Tested on 0.5.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hashicorp/consul-template"&gt;Consul-template&lt;/a&gt; (Tested on 0.7.0)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gliderlabs/registrator"&gt;registrator&lt;/a&gt; (Tested on v5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Weave&lt;/h2&gt;
&lt;p&gt;dockerネットワークの抽象化には&lt;a href="https://github.com/zettio/weave"&gt;Weave&lt;/a&gt;を使う。&lt;br&gt;
Weaveは各ホストに存在するローカルなdockerネットワークを抽象化し、１つのネットワークとして扱うことを可能にする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/install-weave.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docker.service
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Install Weave
&lt;span class="nv"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://zettio.github.io/weave/
&lt;span class="nv"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network-online.target
&lt;span class="nv"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docker.service

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;oneshot
&lt;span class="nv"&gt;RemainAfterExit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/wget -N -P /opt/bin &lt;span class="se"&gt;\&lt;/span&gt;
    https://raw.github.com/zettio/weave/master/weave 
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/chmod +x /opt/bin/weave
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/docker pull zettio/weave:latest
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/echo Wave Installed
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weave用ブリッジインターフェースUnitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/network/10-weave.network
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Match]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;weave*&lt;/span&gt;

&lt;span class="k"&gt;[Network]&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;10.0.0.1/8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/network/10-weave.netdev
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[NetDev]&lt;/span&gt;
&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;weave&lt;/span&gt;
&lt;span class="na"&gt;Kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bridge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weave service用Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/weave.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;install-weave.service&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Weave Network&lt;/span&gt;
&lt;span class="na"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://zettio.github.io/weave/&lt;/span&gt;
&lt;span class="na"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;install-weave.service&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/bin/weave launch&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/docker attach weave&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ネットワーク再起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart systemd-networkd
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;weaveインストール・起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start install-weave.service
sudo systemctl start weave.service
sudo /opt/bin/weave create-bridge
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Docker&lt;/h2&gt;
&lt;p&gt;docker用の管理ポートを開ける。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unitファイル作成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/systemd/system/docker-tcp.socket
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Docker Socket for the API&lt;/span&gt;

&lt;span class="k"&gt;[Socket]&lt;/span&gt;
&lt;span class="na"&gt;ListenStream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2375&lt;/span&gt;
&lt;span class="na"&gt;BindIPv6Only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;both&lt;/span&gt;
&lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;docker.service&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sockets.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dockerのデフォルトブリッジをweaveし、dockerから透過的にweaveネットワークを扱えるようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /usr/lib/systemd/system/docker.service /etc/systemd/system/
sudo vim /etc/systemd/system/docker.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Environment=DOCKER_OPTS=&amp;#39;--bridge=weave --fixed-cidr=&amp;quot;10.0.0.0/8&amp;quot; --insecure-registry=&amp;quot;0.0.0.0/0&amp;quot;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;socketを起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl enable docker-tcp.socket
sudo systemctl stop docker
sudo systemctl start docker-tcp.socket
sudo systemctl start docker
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;適宜iptables等でListenする相手を制限。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Accept a manage node&lt;/span&gt;
sudo iptables -A INPUT -s &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1 -m tcp -p tcp --dport &lt;span class="m"&gt;2375&lt;/span&gt; -j ACCEPT
&lt;span class="c1"&gt;# Drop other nodes&lt;/span&gt;
sudo iptables -A INPUT -s &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0/0 -m tcp -p tcp --dport &lt;span class="m"&gt;2375&lt;/span&gt; -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参照: &lt;a href="https://coreos.com/docs/launching-containers/building/customizing-docker/"&gt;https://coreos.com/docs/launching-containers/building/customizing-docker/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Swarm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;クラスタIDを取得&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm swarm create
6856663cdefdec325839a4b7e1de38e8
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm agentを起動(各ノード)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name swarm_agent swarm join --addr=&amp;lt;node_ip:2375&amp;gt; token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm managerを起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name swarm_manager -p &amp;lt;swarm_port&amp;gt;:2375 swarm manage token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --rm swarm list token://&amp;lt;cluster_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;終了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker kill swarm_agent
docker kill swarm_manager
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実行ファイルをDL&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;docker-compose.ymlにコンテナの定義を書く&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir nodes
cd nodes
vim docker-compose.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;consul&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--name consul -server -bootstrap -ui-dir /ui -data-dir ./data&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;progrium/consul:latest&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8300&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8400&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8500&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8600/udp&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_consul_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;net&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;registrator&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-internal consul://127.0.0.1:8500&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sttts/registrator:latest&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;volumes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/run/docker.sock:/tmp/docker.sock&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_registrator_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;net&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;haproxy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;shayashibara/docker-consul-template-haproxy&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;affinity:container!=nodes_haproxy_*&amp;quot;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;consul:consul&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apache&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SERVICE_TAGS=production&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Swarm経由でComposeを実行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose scale &lt;span class="nv"&gt;consul&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;registrator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;haproxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose ps
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Consul / consul-template&lt;/h2&gt;
&lt;p&gt;Consulでコンテナのメタデータを管理し、Consul-templateでHAProxy配下のbackendを切り替える。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shayashibara/docker-consul-template-haproxy&lt;/code&gt;で起動するhaproxy用のconsul-templateのテンプレート。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;global&lt;/span&gt;
&lt;span class="x"&gt;  log 127.0.0.1 local0&lt;/span&gt;
&lt;span class="x"&gt;  log 127.0.0.1 local1 notice&lt;/span&gt;
&lt;span class="x"&gt;  user haproxy&lt;/span&gt;
&lt;span class="x"&gt;  group haproxy&lt;/span&gt;

&lt;span class="x"&gt;defaults&lt;/span&gt;
&lt;span class="x"&gt;  log global&lt;/span&gt;
&lt;span class="x"&gt;  mode http&lt;/span&gt;
&lt;span class="x"&gt;  option httplog&lt;/span&gt;
&lt;span class="x"&gt;  option dontlognull&lt;/span&gt;
&lt;span class="x"&gt;  balance roundrobin&lt;/span&gt;
&lt;span class="x"&gt;  timeout connect 5000&lt;/span&gt;
&lt;span class="x"&gt;  timeout client 50000&lt;/span&gt;
&lt;span class="x"&gt;  timeout server 50000&lt;/span&gt;

&lt;span class="x"&gt;listen stats&lt;/span&gt;
&lt;span class="x"&gt;  bind *:8001&lt;/span&gt;
&lt;span class="x"&gt;  option httpclose&lt;/span&gt;
&lt;span class="x"&gt;  option forwardfor&lt;/span&gt;
&lt;span class="x"&gt;  stats enable&lt;/span&gt;
&lt;span class="x"&gt;  stats uri /haproxy?stats&lt;/span&gt;
&lt;span class="x"&gt;  stats auth admin:123123q&lt;/span&gt;
&lt;span class="x"&gt;  stats realm HAProxy\ Statistics&lt;/span&gt;

&lt;span class="x"&gt;frontend web-app&lt;/span&gt;
&lt;span class="x"&gt;  bind *:80&lt;/span&gt;
&lt;span class="x"&gt;  default_backend &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;backend/current&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;backend default&lt;/span&gt;
&lt;span class="x"&gt;  server s1 localhost:8080&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;services&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apache-80&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;byTag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;backend &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; balance roundrobin&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;services&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; server &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.ID&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.Address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;.Port&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}{{&lt;/span&gt;&lt;span class="nv"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gmr/consulate"&gt;consulate&lt;/a&gt;(Consulのpythonクライアント)で現在のクラスタのタグをsetし切り替える。&lt;br&gt;
要件によるけど任意のタイミングでBlueGreenなクラスタの切り替えを行いたかったのでこのような構成にした。&lt;br&gt;
実作業に落としこむ場合はJenkins等で切り替えをタスク化しWebUIから操作することになると思う。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install consulate
consulate --api-host 172.17.42.1:8500 kv set backend/current production
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker exec -it nodes_haproxy_1 cat /etc/haproxy/haproxy.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;クラスタの終了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose &lt;span class="nb"&gt;kill&lt;/span&gt;
&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://localhost:2375 docker-compose rm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;マルチホストDocker環境でBlueGreenなデプロイを実現するためweaveでL3の抽象化とConsulによる分散Key-ValueストアでL3/L4リソースの管理、consul-templateで設定ファイルの動的書き換え、docker-swarm/composeによるコンテナのスケジューリング、ライフサイクル管理、BlueGreenなクラスタの切り替えを行った。&lt;br&gt;
構成要素は多いものの各要素は疎結合でそれぞれ代替可能なツールが多い(weaveはpipeworkやflannel、Consulはetcdやzookeeper、consul-templateはconfd等ある)ので、要件に応じて構成要素は変えることが出来る。&lt;br&gt;
dokkuやflynn、deis等のマイクロPaaSやCloud-FoundryやOpenShift等のフルスタックPaaSは単体で上記ツールチェインのほとんどの機能を備えている一方ロックインされやすいという面もあるため今回は既存の技術の組み合わせのみで構成した。  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.docker.com/2015/03/dockers-2nd-birthday-wishes-qa-with-solomon-hykes-founder-of-docker/"&gt;Docker誕生から２年&lt;/a&gt;を迎え牧歌的なシングルホストでのdon't recommend in productionな状態からプロダクションでのマルチホスト環境を見据えたオーケストレーションツール群も大分整理統合されてきた感がある。&lt;br&gt;
依然レポジトリの扱いやセキュリティ面等、実運用面で辛い箇所は残るものの徐々にプロダクション環境での現実的な解が見えてきたように思える。今年はdocker in productionの飛躍の年になることを願いたい。&lt;/p&gt;
&lt;h3&gt;解決していない課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;プライベートなイメージの扱い&lt;br&gt;
  OSイメージ + アプリケーションでそれなりの容量になる。&lt;br&gt;
  また何をするにもdocker-registry専用のプロトコルが必要なためイメージの配信方法の選択肢が少ない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ログの扱い&lt;br&gt;
  各コンテナが生成するログをどこに送るか。またログ送信の冗長性の担保をどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ステートフルなコンテナの扱い&lt;br&gt;
  主にRedis, MySQL, PostgreSQLといった状態を持ったアプリケーションをどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;セキュリティ面&lt;br&gt;
  dockerデーモン自体の脆弱性、コンテナの脆弱性、ホストOSの脆弱性をどうするか&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;課題解決への布石&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;プライベートなイメージの扱い&lt;br&gt;
  レポジトリ自体の冗長化、容量コスト等考えると&lt;a href="http://quay.io/"&gt;quay.io&lt;/a&gt;, &lt;a href="https://cloud.google.com/tools/container-registry/"&gt;Google Container Registry&lt;/a&gt;等のRegistry as a Serviceという選択肢もある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ログの扱い&lt;br&gt;
&lt;a href="https://github.com/gliderlabs/logspout"&gt;logsoutput&lt;/a&gt;, journalctl, fluentd等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ステートフルなコンテナの扱い&lt;br&gt;
  ホスト側にマウント、data volume container、または&lt;a href="https://clusterhq.com/"&gt;flocker&lt;/a&gt;、そもそもDockerizeしない等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;セキュリティ面&lt;br&gt;
  Docker層だけで対応するのは難しいのでDockerを乗せるIaaSレベルでのコントロール。
  ホスト側をなるべく薄く保つという意味でCoreOSやAtomic host等のコンテナ向け軽量OSやCoreOSの自動アップデート機能を使う。  &lt;br&gt;
  またCoreOSによるコンテナ実装の&lt;a href="https://github.com/coreos/rocket"&gt;Rocket&lt;/a&gt;からのセキュリティ面でのフィードバックを今後期待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sttts.github.io/docker/weave/mesos/2015/01/22/weave.html"&gt;Adventures with Weave and Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/zERobYTe/items/dd9b2365c93da2638221"&gt;docker - ELB+Swarm+Compose+Consul+Registratorで夢は叶うのか(1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeeet.com/writing/2014/05/14/logspout/"&gt;logspoutでDockerコンテナのログの集約・ルーティング | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="weave"></category><category term="swarm"></category><category term="compose"></category><category term="consul"></category></entry><entry><title>Hello world</title><link href="https://shufo.github.io/hello-world.html" rel="alternate"></link><published>2015-01-09T13:00:00+09:00</published><updated>2015-01-09T13:00:00+09:00</updated><author><name>shufo</name></author><id>tag:shufo.github.io,2015-01-09:/hello-world.html</id><summary type="html">&lt;p&gt;このブログについて&lt;/p&gt;</summary><content type="html">&lt;p&gt;DevとOpsを行ったり来たりしているウェブ系エンジニアのブログです。&lt;br&gt;
&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で生成した静的サイトを&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;でホスティングしています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="意識の高い画像" src="/images/71.jpg" title="意識の高い画像"&gt;&lt;/p&gt;
&lt;p&gt;※このブログでの発言は個人の見解であり、所属する組織の公式の見解ではありません。&lt;/p&gt;</content><category term="about"></category></entry></feed>