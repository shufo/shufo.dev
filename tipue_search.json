{
    "pages": [
        {
            "title": "ニューヨーク一人旅 + Panorama NYC Festival 2017 その２", 
            "text":"1日目に続きNew York一人旅2日目です。 この日からPanorama NYCフェスティバルが3日間開催されます。 ゲートオープンは正午でそれまではフリータイムなのでその間に観光とかします。 エンパイアステートビル アドレナリンが出ているのか午前7時なんて健康的な時間に起床しました。 とりあえずGoogle Mapで調べたらNYPL(New York Public Library)が午前8時から開いているとのことだったので8時頃にホテルを出ます。 ホテルからはNYPLまで徒歩5分くらいだったので徒歩で行ったところ、開いていない。 おいどういうことだGoogle先生と思ったところ開いていたのは分館のミッドマンハッタン図書館（こちらは8時から開いている）の方で本館の方のNYPLは10時開館でした。 時間を持て余したので一旦図書館前のブライアントパークで休憩します。 ニューヨークは都会のど真ん中にも椅子とテーブルがいっぱいある公園があったり、休めるところが多いのがいいですね。日がな一日ぼーっとしていたい。 近くに何かいいとこないかGoogle Mapで調べてみたところ近くにエンパイアステートビルがあったので行ってみることにしました。 View post on imgur.com 他にも回りたいとこあったのでCity Pass C3をその場でスマホからポチります。 このパスを買うと エンパイアステートビル トップオブザロック展望台 アメリカ自然史博物館 911メモリアルミュージアム 自由の女神＆エリー島 メトロポリタン美術館 グッゲンハイム美術館 サークルライン観光クルーズ イントレピッド海上航空宇宙博物館 から3つ好きなとこに行くことが出来ます。通常のCity Passだと6箇所回れるけどフェスも行きつつだと回れる気がしなかったので今回はC3パスにしました。 6箇所だと122ドルだけど3箇所だと76ドルです。割引率は下がりますが観光名所中心の滞在じゃない場合はこっちでもいいと思います。 セキュリティチェックを受けて、パスを係員に見せると先に進めます。 色んな言語の案内板の混ざったエレベータで展望台まで上がりました。 OasisのStanding on the Shoulder of Giantsのジャケットのビルに立ってるなーとかよく分からないことを思いつつ景色を眺めてました。 あいにく天気はあまり良くないものの早朝のニューヨークの町並みもいいですね。 View post on imgur.com View post on imgur.com View post on imgur.com View post on imgur.com 見終わると時間もちょうどよくなったのでNYPLに向かいました。 NYPL エンパイアステートビルから徒歩で数分で着きます。 こちらもグランドセントラル駅と同じくボザール様式の建築物でギリシャの神殿のような荘厳さがあります。 View post on imgur.com もはや図書館？というようなレベルですが、図書館です。美術館ではありません。公共施設なのでもちろん無料で入れますし、普段は市民が資料を調査したり、コンピューター関係の受講クラスを開催していたりニューヨーク市民の教育レベルの底上げを担う役目も担っています。 View post on imgur.com 入館する市民の安全を見守るライオン。 View post on imgur.com やばい View post on imgur.com View post on imgur.com 天井にすらありえないくらい細かい装飾が施されていて無限に眺められます。 View post on imgur.com 高級ホテルかな？ View post on imgur.com ただの階段。（Lv.100） View post on imgur.com Reading Room。ハリーポッターみたいだぁ（直喩） View post on imgur.com 適当に撮ってもフィルター加工したかのような存在感。 View post on imgur.com View post on imgur.com 基本的には寄付で成り立っているため寄付者の名前が記されてる（最近は併設されているショップやカフェでも利益を出している） View post on imgur.com ブランチの図書館の歴史など。 View post on imgur.com 図書館カードがあればオンラインでの受講コースも受けれるそう。 プログラミング ビジネススキル デザインテクニック DTP/3D Animation Web開発 etc... View post on imgur.com ブランチ図書館ごとに特化したコースなどもあってほんとNYPLが市民の生活に根ざしたものなんだなぁと。 図書館好きにはたまらないですね。 Panorama NYC Festival 1日目へ そぞろ歩いていたところ時刻も12時を周りいい時刻になってきたのでそろそろ本命のPanorama NYCへ向かいます。 図書館を出てグランドセントラルへ。 地下鉄6線のUptown行きに乗って125st.で降ります。 125st駅からずっと東に歩くとロバート・F・ケネディ橋が見えてくるのでそれを渡るとフェス開催地のランドールズ島へ着きます。 View post on imgur.com フェスに行くっぽい軽装の女子達がEDMをかけながら小躍りで同じく橋に向かって歩いてたので流れに乗って歩いていきました。 125st辺りからバスも出ているけど有料だからか行きは歩きで橋を渡って来ている人が多かったです。 バスで変なところ行くと怖いから自分も行きは結局3日間徒歩で橋を渡りました。歩きでも大体20分くらいだったので。 125stから橋へ行くまではブロックごとにNYPD（ニューヨーク市警察）の車両とか警察官が配置されていたり、橋の途中にも警察官が何人かいたりけっこうニューヨーク市自身もフェスの警備に力を入れてるようでここは特に昼間は危険な感じはしませんでした。 といいつつイーストハーレムでアジア系は少なく結構目立つのであまりキョロキョロしないで足早に橋まで向かいました。 橋からダウンタウンの方を見る。 View post on imgur.com ブロンクスの方へも橋がかかってる。 View post on imgur.com そんなこんなで流れに乗ってたらいつのまにか到着。 ロッカーとかある。 View post on imgur.com チケットはWill Callで現地受け取りになっていたのでBox Officeに行き、パスポートとクレジットカードを見せてリストバンドをもらいます。チケット申し込みが早い場合は郵送で届くみたいですけど、今回は1週間前とかにチケット買ったのでWill Callしか選択肢がありませんでした。 リストバンドは公式サイトかアプリでリストバンド裏に書かれた数字を入力してアクティベート。 初日はセキュリティチェックがなぜかめちゃくちゃ並んでいて30分くらい待ちました。と思ったら一気に列が進んだので入場規制でもしていたのか。 VIPレーンががらがらだったのでなぜかGAだけどそっちに流してもらって早く進めたり。 入場はリストバンドに埋め込められたICチップをゲートにタッチして入る形式でした。 そして入場！ View post on imgur.com どのフェスでもゲート入ったあとの解放感というかフェスに来たぞ感はわくわくしますね。 遠くから聞こえるステージの音に小走りで向かってる人を見て思わず自分も高揚したり。 View post on imgur.com View post on imgur.com けっこう会場はこじんまりとしていてコンパクトな中にメイン、サブメイン、テント型屋内ステージがある感じで各ステージへのアクセスはすぐに出来るので移動は苦にならなかったです。 View post on imgur.com View post on imgur.com Frank Oceanの専用merch！ View post on imgur.com 並ぶかーと思ったら既に長蛇の列で泣く泣く断念。 Frank Oceanのmerchがありえないくらい並んでる pic.twitter.com/c6xWjoGi66— 実質 (@shufo_) 2017年7月28日 昼食 まだそういえば朝から何も食べてなかったので今日初食事。 ニューヨーク市内にもよく走ってる屋台が会場内にもあったのでZEN Burger（禅バーガー？）と抹茶ラテを頂く。 禅バーガーはマッシュルームに大振りのパティでアメリカ感あった。味はアメリカって感じだった（雑） View post on imgur.com View post on imgur.com 蒸し暑くて喉が乾いたのでRenegade Lemonadeを飲む。めっちゃ甘いけどおいしい。 支払いはクレカで払うとiPadみたいな端末でチップの金額を15％/20％/25％とか1$/2$/3$とかから選べるようになってた。 View post on imgur.com HONNE 最初はメインステージでHONNEを観賞。 View post on imgur.com ステージ前まで芝生なのでピクニックシート敷いて座ってる人とかいます。 HONNEは今年のサマソニにも来るけど海外での様子がどんなんかなと思って見てみたところ、けっこう女性人気が高いです。前の人がバラをもってたのが印象的でした。 Warm on a cold nightで締め。 Honneを見た後少し休憩。適当にそこら辺で寝っ転がる。 会場全体が芝生なのでみんな適当にごろごろしてだめな空間が広がってて最高です。 少し露がついて服が濡れるけど既にだめになってるので気にしない。 They. 次は屋内ステージのParlorでThey.を見ました。 View post on imgur.com 日本に中々こないブラック・ミュージック勢は今回パノラマでなるべく見ておきたいというのがあって見たけどかっこいい。盛り上がり方もすごい。日本でここまでRapミュージックが盛り上がるかと言われるとうーんとなるのでこういうのは海外行くしかないのか…と思うとつらみだ。 MGMT 日本に来ると思ってなかなか来ないので念願という感じでした。 MGMT - Kids pic.twitter.com/QG03NaVaB1— 実質 (@shufo_) 2017年8月6日 ただ演奏がヨレヨレでこんな曲だったっけ？笑と思いつつElectric FeelとかThe youthとかKidsとか合唱はすごい起きていたのでおー海外フェスだと感動しました。 Frank OceanがNostalgia UltraでMGMTのElectric FeelをほぼそのままサンプリングしていたけどFrank OceanもMGMT見ていたんだろうか。 Solange 日本国旗みたいのが出てきたけどあれは日本国旗だったのか… View post on imgur.com ステージのクオリティは高くて一種のパフォーマンス・アートのようでした。 View post on imgur.com View post on imgur.com 笑ってはいけないSolange24時。 View post on imgur.com Frank Ocean そしてフランク・オーシャン。 最初にChannel Orangeを聴いたのは確か2014年頃でリリースで騒がれた頃から大分遅かった気がします。 またPitchforkのhypeだろ？とか思ってたりしたのを若干後悔してます。 それまでR＆Bとかブラック・ミュージックに大して傾倒していなかったので軽く衝撃を受けたのは覚えてます。 ブラック・ミュージックというとひたすら陽気なものやゴリゴリのラップ・ミュージックだったり俺はビッグになるぜみたいなマッチョ思想のものばかりだと思っていたので。 2016年のBlondeとかいう大傑作で完全に手の届かない世界の人になってしまった。 ステージ前の花道エリアに専用の機器が運びだされてくる。 そこに出てくるのかーとみんなそっちを向く。 View post on imgur.com 始まるまで人が多すぎて完全に通勤ラッシュの乗車率200％が何時間も続いていて、気分が悪くなった人が何人もバッタバッタ倒れて運びだされててそこかしこから「へーーーールプ！」って声が鳴り響いていてすごかった。 そういう自分もフランクの途中辺りからフラフラしてきてあ、やばいと思ってちょっとしゃがんで休憩したりしました。 少し押して登場したフランクは全く気取らない感じで普段通りという感じでした。 View post on imgur.com ショウビズな感じはせずツイッターで誰かが呟いていたが、友達の部屋で歌っているような感じ。 実際フランクはこんな大観衆に囲まれつつもどこか孤独な感じで、ステージから伸びている花道とステージを行ったり来たり、たまに椅子に座りながら歌ったり、しゃがみながらキーボードを弾きながら歌ったりしていた。 視線もまっすぐ前を向くということはあまりせず淡々と歌い上げる感じでした。 View post on imgur.com 特別なことは何もしてないけどしばらくして振り返るとじわじわと余韻が出てくる不思議なライブでした。 View post on imgur.com 神々しさもあるけど友達が歌っているのを聴いているようなパーソナルな感じもある。 Frank Ocean - Lens pic.twitter.com/rlYFIwdv2i— 実質 (@shufo_) 2017年8月6日 フランクのBeats1のラジオショウのBlonded Radioではフランクが影響を受けた音楽などを紹介しているんですが、このプレイリストなどを見るとほんと色々な音楽を聴いていてフランクの音楽オタクっぷりが分かります。 Blondeは一見掴みどころのない作品だけどBlonded Radioを聴いてから改めて聞くとルーツ・ミュージックからラップミュージック、ポップ、ダンスミュージックまで様々な影響を受けていることが伺えて、それも含めて意外とハイコンテクストな作品に仕上がっているのが一見ふわっとした作品に思える原因かもしれない。 KendrickのTPABのようなブラックミュージックの総決算みたいな作品とは少し方向性は違うけどBlondeは間違いなく同時代性という点において10年代を代表するアルバムだと思います。 旅行から帰ってきてもFrank Ocean - Self Controlの余韻がまだ続いています。 Frank Ocean - Self Control pic.twitter.com/DNUgepeBll— 実質 (@shufo_) 2017年7月29日 なんとなく「今」が一番フランク・オーシャンというアーティストを見るベストなタイミングだと思って居ても立ってもいられずニューヨークに行ったけど、ほんと行ってよかった。 帰宅 フランクの熱気も冷めやらない中11時を周った辺りに1日目が終了しました。 帰りは会場から無料のシャトルバスが125st.に向かってピストン輸送しているのでそれに乗ります。 地下鉄6線125st.駅付近に止まるので降りて6線でグランドセントラルまで向かい、ホテルに戻ります。 さすがに深夜のイースト・ハーレムは雰囲気的にけっこう怪しいものがあるものの、同じくフェス帰りの人がいっぱいいたり警官もブロック毎に辻に立ってるのであまり危険な感じはしませんでした。 グランドセントラルに着くころにはもう12時になって周りのレストランも閉まっていたので何か夕飯買う場所ないかと物色したところ、ベンダー（屋台）がまだけっこうな数開いていたのでチキンオーバーライスを買いました。 View post on imgur.com ホワイトソースとホットソースがサフラン米の上のチキンと絡まり絶妙にうまい。 量が多いので夕飯に半分、翌日の朝に半分で余裕でした。 シャワーを浴びて朝から歩き通しでボロボロの足を労るためにボルタレンローションを塗って、気絶するように就寝。 そんなこんなでPanorama1日目（NY2日目）を終了しました。 3日目へ続く…", 
            "tags": "vacation", 
            "loc": "http://shufo.github.io/-panorama-nyc-festival-2017-2.html"
        },
        {
            "title": "ニューヨーク一人旅 + Panorama NYC Festival 2017 その１", 
            "text":"もう先々月の話で大分期間が空いてしまいあれですが、2017 7/28〜7/30 New Yorkで開催されていたPanorama NYC Festival 2017に行ってきました。 View post on imgur.com Panorama Festivalはアメリカ3大フェスの一つであるCoachella Festivalの運営元であるGoldenvoiceが2016年からニューヨークで開催している新鋭のフェスです。 兼ねてから海外フェスには興味があったものの、いざ行こうと思うと移動の面倒さ、旅費、その他もろもろの壁が頭に浮かんでまた今度にしようまた今度にしようと思っていたのですが、今回は違いました。 そう、Panorama NYC 2017にはなんとFrank Oceanが出演していたのです。 View post on imgur.com Frank Oceanとは何者かというとことを説明すると5000兆字必要なので省略するとして、Frank Oceanなくして行っていなかったことは間違いないです。 ちなみに今年のPanorama Music FestivalはFrank Oceanが出演した日のみSold Out。恐るべしFrank Ocean効果。 出発準備 1ヶ月くらい前に職場に休暇申請していたものの実際行くかどうかなんとなく迷っていて結局1週間ぐらい前になってバタバタとチケットとホテルの予約をしました。 Expediaで飛行機とホテルの予約 チケットをPanorama公式サイトで購入 チケットは買うのが遅すぎて郵送では間に合わなくなっていたので現地のBox OfficeでWill Callでチケット受け取りになりました。 1日目 出国+機内 そんなこんなでだらだら過ごしてたら出発当日に。 当日になると行きたくなくなる病を発揮しているのかなかなか眠れず結局AM7時頃に就寝してAM10時頃に起床。 GitHubにPRのレビューが溜まってるけど放置。PCといったな、あいつは置いてきた。 出国するわくわく感とめんどくささもあいまってだらだら過ごしつつ2時間前ぐらいに成田空港着予定で出発。 京王新線本八幡行きの乗り換えがよく分からず鈍行に乗ってしまい+20分遅れた。京王線の新宿以降の乗り換えがいまだによく分からない。 荷物は一人旅ということもあって20Lくらいのバックパック1個に収めました。 荷物が少なくても現地の都市の機能を活用するか金で殴れば解決する問題は金で解決すればいいのです。 連日不規則な生活をしてたのがたたってか早速行きの電車で眠くなりつつも成田空港に到着。 オンラインチェックインを済ませていたのでそのまま保安検査場に。 View post on imgur.com バックパック1個とは言えそこそこ詰めてたので機内持ち込みサイズにひっかからないかちょっと心配だったけど問題なし。そのまま出国審査でパスポートとモバイル搭乗券を見せて搭乗口へ。 搭乗時間までしばらく時間があったのでフードコートでラーメン食べてたら英語でこの席空いてますかーと聞かれておかしいまだ日本なのに英語だーとか思いながらどうぞのジェスチャーをした。 だらだら過ごしてたら搭乗時間になったので搭乗ゲートへ。成田空港-&gt;JFK国際空港で約12時間のフライトです。 乗り継ぎが面倒だったので安定のANAの直行便。 View post on imgur.com 出発後2時間ぐらいで機内食が出てきた。和風洋風選べたので和風の牛すき焼き丼にした。 牛すき焼き丼 そうめん サラダゆずポン酢ドレッシング ポテサラ+ハム 結構ご飯にボリュームあったのでお腹いっぱいに。 View post on imgur.com 食後に出てきたハーゲンダッツは親でも殺されたのかってくらい硬かったから3分くらい放置してから食べました。あずきバーか。 View post on imgur.com 機内での暇つぶしは主にフェスの予習とガイドブックを読んで観光の予習、旅行記を読んで旅情気分に浸ることにしました。 フェスの予習にはSpotifyでPanorama NYC用のプレイリストを作ってローカルダウンロードしてBGMに。 ただ歌詞予習するぞ！と意気込んでいたもののオンラインじゃないと歌詞を表示出来ないらしいので歌詞は諦めました。 ガイドブックはKindleで色々探してみたもののいわゆる大手出版社が出しているようなものは似たり寄ったりなのでそういうのは一冊のみで個人でKDPで出版しているガイドブックを入れるのがおすすめです。 ニューヨーク在住の日本人が書いたものや現地の人が使うようなローカル施設の紹介とかおもしろいです。 機内で読んだNYPL紹介ガイドが面白かったので急遽予定にNYPLの観光を入れたくらいです。 今回の旅の目的の一つにニューヨークの普段の暮らしに近いところも見たいというのもあって、実際の暮らしを見てまぁこんなもんだよなというか、これならニューヨークでも暮らせそうだなというレベルを見たいというのがあってスーパーとか現地で普通に暮らしてる人が普通に行ってそうなところに行きたかったのでそういう意味でNYPLなどの図書館はよかったです。 あとは深夜特急をKindleに入れるなどして旅情気分を高めてました。 View post on imgur.com 到着前にもう一度朝食的な食事があって洋風と和風のがあったので洋風をオーダー。 イングリッシュマフィン（おいしい） 筑波ヨーグルト フルーツ でした。 東京-NYの時差は13時間なので機内でも普段通り眠ると単純計算で昼夜逆転生活なるので機内ではあまり眠らずにうとうとして過ごしました。 さすがに12時間にもなるとお尻とヘッドレストに当たる頭の部分が痛くなってきて後半はあまりうとうと出来ませんでしたが。 そんなこんなでNY到着。 View post on imgur.com 入国審査 入国審査でスキンヘッドの強面の審査官の人に当たり、しかもその人の英語が早口で聞き取れない問題があったものの、聞きなおしたりジェスチャーをしてもらったりしつつ指紋採取と写真取ってなんとか通過。強面だったけど審査終わった時に「アリガトウー」と片言の日本語をいってくれたりしたので悪い人ではなかったと思う。 バックパック1個だけだったので税関のとこで「荷物それだけ？」って聞かれたのでそうだよと言ったら特に問題なく通過出来た。そんなこんなで無事空港を脱出。 到着したターミナルは割りとこじんまりとしていて到着口を出るとすぐエアトレインへの案内があったのでその案内通りに進行。 マンハッタン市内へ View post on imgur.com JFK空港からマンハッタン市内に行くまでは地下鉄、バス、タクシーなどの方法がありますが今後3日間のメインの移動方法にもなる予定の地下鉄に慣れておこうと思い地下鉄で行くことにしました。 案内板に沿って進むとエアトレイン（ターミナル間を周回している電車）の駅があるのでそれに入ります。 View post on imgur.com しばらく待ってたらエアトレインが来たので乗ってジャマイカステーションで降ります。 View post on imgur.com 同じような旅行客が多いので降りて流れに乗って進んだらNY地下鉄メトロカードの自販機があるのでそこでエアトレイン5$ + メトロカードの代金分を払います。 一応メニューに日本語があるのでなんとなく操作は出来るはずです。 が、早速ここで問題が発生しました。結果から言うと10ドル飲まれました。支払い方法で「Cash（現金）」があったので出国前に両替した紙幣入れたら入れたあとにCashは使えません（！？）みたいなこと言われて返ってきませんでした。今考えても謎でしたが、もうこの時点で頭の中は？でボタン連打していたら後ろから係員っぽい人が「分からなければ誰かに聞いてください（お前はわからないんかーい）」と言ってきたので一旦仕切りなおし。 聞いてもなんか解決しなさそうな雰囲気があったのでクレカを使ったらあっさり支払い完了。 「AirTrain + Subway」というやつです。 View post on imgur.com 金で殴って解決する問題は金で解決すればええんや…と思いつつ今後もニューヨーク地下鉄には何回か苦しめられます。 無事（？）メトロカードを購入し改札を通ったあと案内板にそってSubway Eのとこまで進みます。 途中エレベータがあるので地下3階に降りるときに隣の旅行者っぽい人に「この階地下鉄？」とか聞かれたりしたけどもちろん知らないのでごめん知らないって言ったらボタン前にいる人が地下鉄は3階だよ！みたいなこと言ってくれて助かった。 View post on imgur.com 地下鉄乗る時もチャージ金額が足りなくて通れなかったんだけど移民っぽいおじさんが助けてくれました。ぶっちゃけ3割くらいしか言ってること分からなかったけどチャージ金額が足りないからあっちで買ってこいとのことだったのでOKといいチャージしに向かう。 このチャージ方法もなんか順番が分かりづらく、日本のPASMOとかSUICAのチャージみたいにいきなりカードを入れることは出来ません。 まず「Start」ボタンを押して所定のチャージの前の画面まで進んだらメトロカードの挿入口が開いてメトロカードを入れることが出来ます。 そしてメトロカード自体もただの磁気テープがついた薄っぺらいカードなので改札でスワイプするときの認識率も低く、スワイプするスピードが早すぎても遅すぎてもだめで方向も決まってたりで面倒です。 メトロカード券売機周りにも一人専用で係員がついていたりしてシステムの不備をマンパワーで割りきって運用してる感ありありでした。 結構な旅行者がエアトレインと地下鉄で詰まっていたのでやっぱ普通に難しいんだと思います。 ここらへんは手順が面倒なので荷物が多ければバスで一発でマンハッタン行ったほうが楽だとは思います。 改札を抜けるとマンハッタン行きのE線の電車があるのでこれに乗ります。 とりあえず乗ったら一安心ですが、地下鉄車内のアナウンスもなんか音質悪くて今どこだよみたいな感じになるのでGoogle MapとにらめっこしつつLexington Av/53 Stまで移動しました。 ホテル到着 Lexington Av/53 St駅に着いたら地上に出てホテルまで向かいます。 地下鉄を降りて手で回す回転式のゲートを通って地上に出るとそこはもうニューヨークです。 その日は若干天気が悪く湿度が高かったので東京ほどではないけど蒸し暑く異国のにおいがむわっとしました。 今回取ったホテルはグランドセントラル近くのClub Quarters Hotelというところでした。 毎日ランドール島のフェスに行くのと、ついでに出来れば観光をしたかったので各種施設にアクセスの良いところと夜遅く帰っても治安的に問題なさそうなとこにしたかったのでここにしました。 グランドセントラルまで徒歩2分くらいの駅近なので割りと何をするにも便利なとこだとは思います。 View post on imgur.com チェックインも最低限の英語で余計な英語は使いません（使えません） 「ハロー、チェックインプリーズ」これでOKです。 携帯でエクスペディアで予約した時のバウチャーを見せつつ、同時にクレジットカードとパスポートも出します。 ガバ英語力では英語を聞き取れない可能性が高いためなるべくやり取りをしないため必要な書類は予め先手を打って出します。 「27〜31日で間違いないですね？」みたいなことを言われたので「Yes」と答えカードキーを渡されてなんかそれっぽい説明を一通り受けたので「サンキュー（よく分かっていない）」といい、エレベーターに乗ります。 このホテルはエレベーターもカードキーを渡さないと動かない仕組みっぽくまずカードキーをボタンパネルの読み取り機にかざしてから行きたい階のボタンを押します。 目的の階に到着しやっと部屋に到着。 View post on imgur.com 部屋からの眺めはこんな感じ。 ニューヨークだー。 View post on imgur.com このホテルはどちらかというとビジネスユース寄りなのか割りとこじんまりとした部屋で必要最低限の設備が備わっているという感じでした。 無駄におしゃれすぎず立地といい機能性を優先してる感じで一人旅にはいいかもしれない。 View post on imgur.com バスタブがないので3日目くらいに湯船に浸かりたくなって「ニューヨーク 入浴」（？）とかググったけどニューヨークには銭湯らしい銭湯はない（スパっぽいのはある）らしくちょっとがっかりした。 View post on imgur.com 当たり前だけどテレビをつけるとトランプ政権のニュースとかやっているのでアメリカだーと思ったりした。 テレビのチャンネルもニュースチャンネルが多くメディアの街ニューヨークっぽいなーと。 View post on imgur.com 無料WiFiはアクセスポイントに接続したらルームナンバーとチェックインした時の氏名を入れると繋ぐことが出来る方式だった。たぶん受付でそんな説明を受けていたんだろうけどよく分からずも勘でつなぐことが出来た。 あと各階に空のペットボトルがあって無料でウォーターサーバーからミネラルウォーターを入れることが出来たので飲み物には困らなかったのがよかった。 コーヒーメーカーが部屋に備え付けられていたので朝はミネラルウォーターを使ってコーヒーを入れたりした。 とりあえずシャワーを浴びて1時間休憩したらまだ20時くらいだったので近場にぶらぶら散歩に行った。 グランドセントラル ホテルから2分くらいだったのでまずグランドセントラルに行った。 ボザール様式の建築様式が美しいニューヨーク市内の中心になるハブ駅です。 View post on imgur.com View post on imgur.com View post on imgur.com なんか広いので広いです（語彙の喪失） NYPLも同じボザール様式で天井が広くダイナミックな感じがするので無限に眺めてられます。無限に眺められる景色はいいですね。 ニューヨークはこういう古典様式な建築物からグッゲンハイム美術館のようなモダン建築様式まで一つの都市に共存しているのがおもしろいです。 タイムズスクエア 次はグランドセントラルから歩いて7分くらいのとこにタイムズスクエアがあるのでそこまで散歩しに行きました。 碁盤目都市なので交差点が多く信号もいっぱいあるので割りとそこら中で信号無視して横断していて最初は戸惑ったものの3日目ぐらいには自分も適当なタイミングで横断するようになりました。 あと道がけっこうな勢いで汚いしドブくさかったりしました。日本でいうと渋谷に雰囲気が近いなと。 近づくにつれて建物のライティングが派手に。 View post on imgur.com 21時くらいだとまだまだ観光客ばっかです。 View post on imgur.com View post on imgur.com 情報量〜 View post on imgur.com 情報量〜 View post on imgur.com 情報量〜 View post on imgur.com MMMM View post on imgur.com あっ、ここなんかのあれで見た風景だ！（うろ覚え） View post on imgur.com いい位置の銅像 View post on imgur.com 例の風景 View post on imgur.com LINEのポップアップショップがありました。 View post on imgur.com View post on imgur.com ユニクロのポップアップストアも（あまり人は入っていなかった） View post on imgur.com 特に変な人に絡まれることもなくよかったです。 タイムズスクエア付近を歩くとブロードウェイとかあそこらへんの通りのエンターテインメントへの貪欲さとか情報量の多さで若干疲れます。 Whole Foods Market タイムズスクエアは軽く歩いて満足したのでそろそろホテルに帰ります。 帰りついでにアメリカ来たら行ってみたかったスーパーのWholeフーズに行きます。 Amazonが最近買収して生鮮食品業界にも参入したことで有名ですね。 View post on imgur.com おーいお茶とか売ってます。 View post on imgur.com 旅行の時はその土地のスーパーとかデパ地下みたいの行くとその土地の生活感とかなんとなく分かったりあんま自分達のとこと変わらないなーとか思って安心したりするので好きです。 立派な観光地やレストランがあってもスーパーはほぼ世界中どこでも共通規格だし日常のための場所という感じが落ち着きます。 量り売りのデリが1ポンド（453g）9ドルくらいで売っているので夕食用に買って帰りました。 bakedパイナップル、ブルーベリー、メロン、野菜、骨なしチキン、ジャガイモって感じ。 少食だから大体1ポンドぐらいで割りと十分でした。 箱のサイズミスったのでホテルに持ち帰った頃に悲惨なことになってました。三角コーナーかな？ View post on imgur.com 見た目が残飯ですが普通においしいので食べ物は偉い。 持ち帰る時にスプーンをつけてくれなかったので自分で買うかイートインスペースのスプーン持ち帰った方がいいのかもしれません。イートインスペース探してうろうろしたけど結局どこにあるか分からなくてMPも少なくなって聞く気力も無くなっていたので箱を折って簡易スプーンっぽくして食べました。マイ箸とか持って行った方が便利かもしれない。 あと無糖（Unsweetened）のジンジャエールティーも買った。おいしい。あと量が多い。 View post on imgur.com 日本人が普通に食べる量なら1ポンドくらいでも十分な気はするので食費抑えるならスーパーのデリとか使えば結構安く抑えられると思います。 アメリカらしい食事ではないけどニューヨークみたいな意識高めの都会だとこういうのも流行ってるんだなーという雰囲気が感じられてよかったです。 あと日本のスーパーとかと違うのはレジめっちゃ並んでるのに品出ししてる人は絶対ヘルプとかせずに自分の仕事やっていたりIt&#39;s not my businessなとこですかね。給料は決まってるから給料分以外の仕事は絶対にしないぞという意思（重要） あとホールフーズの帰りにDJ mixを配ってる謎の兄ちゃんに強制的にCDを渡されてチップを要求されるということもありました。 対応が面倒だったから結局1ドルだけチップあげたけど。 渡された謎のDJ mix。CD再生機器がなかったので結局聞けず。 View post on imgur.com ホテルに帰ってとりあえず夕飯を済ませてシャワー浴びたらもうどっと疲れが出て眠くなったので12時くらいに就寝。 こんな感じで1日目を終えました。 何気なく過ごしてるけど普通に聞き取れないこと多くて何回も聞き直してたりしつつなんとか過ごせたので面倒でも対応してくれた人には感謝です。 本来の目的のフェスは2日目からになります。 その2へ続く...", 
            "tags": "vacation", 
            "loc": "http://shufo.github.io/panorama-festival-2017-1.html"
        },
        {
            "title": "MacBook Proを捨ててThinkpad X220を買った", 
            "text":"関連: MacBook Proを捨ててThinkpad T460sを買ってgentooを入れた - joker1007の日記 概要 正確にいうとMBP Late 2016を買おうと思っていたのだけど結局Thinkpad X220を買った話です 今年10月の例のイベントで発表されたMBPは本当に楽しみにしていたし、MBP費用も貯めていたのだけど やっぱり欲しくなくなってしまった理由としてAppleがもう開発者の方向を向いてないかもしれない、というのをあのイベントを見て強く感じたからです。 Appleの方向性に共感していたら買ったかもしれないけどTouchBarの方向性はちょっと支持出来なかったので… あと最近Docker for Windowsを久しぶりに使ったらmount周りもちゃんと動いたのでWindows環境でも自分の場合は普段の開発にほとんど問題なくなったというのもあります。 自分で作ったアプリは全てDockerizeするDockerオタクなのでこういうときはさすがに恩恵を感じます。 Linuxデスクトップを導入することも考えたけどドライバ周りや普段使い、会社での相互運用性を考えると常用するには少しハードルが高いなと思いWindowsにしています。 ThinkPad X220 スペック Core i5-2660M Mem: 4G Disk: HDD 480GB ディスプレイ解像度: 1366x768 MBPとの比較 ESCがデカい キーボードが最高 トラックポイントはいいぞ 2～3万で買える バッテリ持ちは悪い 1.5kgぐらいあるので若干重い パーツが大量に出回って分解も簡単なので直しやすい ~~スタバでMacを威嚇出来る~~ ThinkPad X220は2011年発売のモデルで、アイソレーションキーボードになる前のクラシック型のキーボードとしては最後のold ThinkPadです。 Sandy Bridge世代のCPUと高い拡張性で2016年現在でもパーツの換装を行えば十分使用可能ながら、企業からのリース品が大量に出回って中古市場で2～3万でとこなれて来てるので購入するには丁度いい頃だと思います。 Sandy Bridgeと最新のSkylake世代のCPUを比較しても性能差はほぼないのでCPUバウンドな処理を行わなければSSDとメモリ換装で最新ノートPCと比べてもほぼ遜色ないんじゃないでしょうか。 さすがにPCIe-NVMeディスクを搭載出来るような機種にはSATA SSDに換装してもディスクI/Oで劣るけれども割り切って使うにはありだと思います。 今回は英字キーボードが国内の中古市場には見つからなかったのでeBayから輸入しましたが 日本語キーボードでよければ国内の中古市場にも十分流通してるのでそちらの方が早いと思います。 注文 eBayからThinkPad X220を検索しそこそこ状態のよさそうな品かつリース品を綺麗にしたようなものをDyminという業者から購入。 X220にはタッチパネルモデルもあるみたいだけど無駄に重くなるので普通のモデルにした。 配送から届くまで 注文後1日: 業者から発送 4日: eBayのGlobal集荷センターに到着(ここから長い) 5～14日: 海外配送 14～15日: 国内配送 16日: 到着 パーツも結構流通してるっぽいので国内中古市場で買った日本語キーボード版を英字キーボードに換装したほうが早かったかなと思いました。 到着 MacBook Pro届いた pic.twitter.com/A3lKMTUrYT— shufo (@shufo_) November 27, 2016 (ThinkPad X220です) 海外発送の送料込でちょうど3万程でした。 全体的に使用感はほとんどなく綺麗だったけどキーボードには気にならないレベルだけどわずかに使用感あり。 ThinkPadを買うのは初めてですがこの時代のold ThinkPadは雰囲気があっていいですね。個人的にはキーボードは薄い方が好きですがちゃんとした深さがあるので無駄にガチャガチャやりたくなります。 SSD・メモリ換装 SSDとメモリを以下に換装。 パーツ費用含めても全体で大体5万くらいでした。 換装済みの中古品もあるけど高くつく割には容量が少なかったりするので手間をかけられるなら自分で換装した方が安く高スペックに出来ます。 SSD Crusial MX300 525GB 交換手順参照: ThinkPad x220 SSD交換(Apacer/SanDisk) \| 003SH 解体新書 メモリ Transcend PC3L-12800 DDR3L 1600 8GB×2 交換手順参照: ThinkPad X220 増強作戦 その１ ： 1万円でメモリを16GBに増設 - きままテック まとめ MBPの代替としてThinkPad X220を買った。 モバイル出来るUnixとしてMacは好きなのだけど最近のAppleの方向性からロックインが強くなることの懸念も含めてノートPCから変えてみました。(まだiPhoneは使ってる) 最近のWindows開発環境としてはbabun + Docker for Windowsがあれば個人的に困ることはほぼなくなって来たのであとはWSLのbashの完成度がより高まればいよいよWindowsでも十分だなと思います。 Linuxデスクトップはelementary OSが気になっているのでmSATA SSDを追加してデュアルブートにでもしてみようかなと思います。 他候補 MBPオルタナティブのノートPCとしては Razer Blade Stealth Dell XPS 13 がスペックと価格のバランスがよかったので検討していたのだけど自分のノートPCの使用頻度に対してはオーバースペックすぎたので候補から外れました。 追記 2016-12-01 到着後Windows7からWindows10 Proにアップグレードしバッテリーのファームウェアをアップグレードしようとしたらバッテリーが死にました… ファームウェアをアップデートする前はバッテリーを認識していたので恐らくファームウェアの書き換えに失敗したようです。 バッテリー追加 結局以下の互換バッテリーをAmazonでポチりました 元は9セルでX220本体からバッテリーがはみ出していたのが筐体の枠にちょうど収まりました 公式じゃないですけど今のとこ問題ないです 安いし物理的に取り外しし易いからバッテリーが心配な時は何本か持ち歩くってのもありですね WorldPlus バッテリー LENOVO ThinkPad X230 X230i X220 X220i X220s 対応 6セル", 
            "tags": "PC", 
            "loc": "http://shufo.github.io/alternative_to_mac.html"
        },
        {
            "title": "Pelican + codeanywhere + Github Pagesでシンクライアントなブログ作成", 
            "text":"Overview このブログはPelicanで書いているけどいわゆるサイトジェネレータにありがちな問題なのがいちいち開発環境を開いたりするのが面倒というのがある。 WebUI管理画面をサイトジェネレータ自体が持っているHubPressは気軽に記事を投稿出来るもののGithub APIを使うためGithub Pages専用アプリという色が強く他の環境に移す場合を考慮して使ってはいない。 2015年11月現在主なサイトジェネレータはStatic Site GeneratorsでGitHub Starの多い順でJekyll, OctoPress, Hexo, Hugo, Pelicanがよく使われている。 それぞれWebベースの管理画面はないもののシンプルな構成で一度生成してしまえば特定のランタイムやDBに依存しないで静的コンテンツを配信出来る。 やりたいこと 特定のマシン(PC, Mac, タブレット)に依存しないサイトジェネレータ環境の構築 やったこと Pelicanで静的コンテンツの生成、codeanywhereでWebベースでのファイルの編集とサイトジェネレータ用ランタイムの構築、GitHub Pagesでサイトの公開を行った。 Pelican とは PelicanはPython製の静的サイトジェネレータでMarkdown形式で記事を書くことが出来る。 主な機能としては 記事の作成 RSS フィードの作成 テーマ機能 プラグイン があり、ここら辺は類似のサイトジェネレータと特に変わりなし。 Github Pages とは GitHub で静的なページをホスティングすることが出来るサービス。 独自ドメインの割当も出来る。 codeanywhere とは codeanywhereは Web上でコードの編集や実行が出来るクラウドIDE。 プロジェクトごとにコンテナが作成されランタイム等は自由にインストール出来る。 ちなみにこの記事もcodeanywhereで作成から公開まで行っている。 主な機能としては GitHub, BitBucketからのコードの取得・編集 コンテナ内での任意のコマンドの実行 FTPアップロード SSH接続 がある。今回はPython製ツールを使うのでコンテナのテンプレートにPythonを使いプロジェクトを作成してみる。 やってみる まずGitHubで「ユーザ名.github.io」という名前で空のリポジトリを作る。 自分の場合GitHubユーザ名はshufoなのでshufo.github.ioを作成。 作成出来たらcodeanywhereのプロジェクトページから適当に新規プロジェクトを作成する。 先ほど作成したユーザ名.github.ioを選び、コンテナのテンプレートとしてpythonを選択する。 Nextボタンをクリックししばらく待つとプロジェクト編集画面が開きファイルを編集出来るようになるので 左のファイルツリーからレポジトリ名を右クリックし「SSH Terminal」をクリックする。 ターミナルが開くのでPelicanのインストールをする。 sudo pip install pelican Markdown mdx_linkify mdx_del_ins ghp-import 次にサイトの初期化。設定するパラメータを色々質問されるので必要に応じてyまたはnを押して進める。 Please answer the following questions so this script can generate the files needed by Pelican. &gt; Where do you want to create your new web site? [.] &gt; What will be the title of this web site? test &gt; Who will be the author of this web site? shufo &gt; What will be the default language of this web site? [en] ja &gt; Do you want to specify a URL prefix? e.g., http://example.com (Y/n) y &gt; What is your URL prefix? (see above example; no trailing slash) http://shufo.github.io &gt; Do you want to enable article pagination? (Y/n) y &gt; How many articles per page do you want? [10] &gt; What is your time zone? [Europe/Paris] Asia/Tokyo &gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y &gt; Do you want an auto-reload &amp; simpleHTTP script to assist with theme and site development? (Y/n) y &gt; Do you want to upload your website using FTP? (y/N) n &gt; Do you want to upload your website using SSH? (y/N) n &gt; Do you want to upload your website using Dropbox? (y/N) n &gt; Do you want to upload your website using S3? (y/N) n &gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n &gt; Do you want to upload your website using GitHub Pages? (y/N) y &gt; Is this your personal page (username.github.io)? (y/N) y Done. Your new project is available at /home/cabox/workspace 初期化が完了したので記事を書いていく。contentディレクトリ以下に拡張子を.mdで保存したファイルが記事の対象となる。 基本的な記事のフォーマットは以下の様になる。 Title: Pelican + codeanywhere + Github Pagesでブラウザのみでブログ構築 Date: 2015-11-23 13:00 Category: Pelican Tags: pelican Slug: site_building Author: shufo Summary: Pelican + codeanywhere + Github Pagesでの非環境依存なブログ構築 ## Pelican とは 以下本文 テーマを適用。テーマは公式のテーマ一覧から適当に。 mkdir pelican-themes git clone https://github.com/lucachr/pelican-mg.git pelican-themes/pelican-mg pelicanconf.pyを編集。 THEME = &#39;./pelican-themes/pelican-mg&#39; 記事の出力とサーバの起動を実行。 ./develop_server.sh start 確認用のサーバURLは画面左のファイルツリーのリポジトリを右クリックし「Info」から表示出来る。 ファイルビューに環境情報が表示される。 http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com 先ほど起動したHTTPサーバはデフォルトで8000番でListenするので http://preview.ys2w6ouag0c0udid1stmdqerhrara4iot2p57l4efhzd7vi.box.codeanywhere.com:8000 をブラウザで開いてみる。 確認出来た。 記事に問題がなければ公開を実行。 make github このコマンドを実行するとghp-importでoutputディレクトリの内容がmasterブランチにコミットされ、同時にmasterブランチがGitHubへpushされ公開される。 pushから反映までは10分ほど時間かかるのでしばらく待ち反映されたのを確認出来たら完了。 まとめ PelicanとcodeanywhereとGitHub Pagesで意識低めのブログ構築をした。 ローカルの環境に依存しないためいつでも気が向いたときに書けるというのがブログ作成に当たっては大きいメリットだと思う。", 
            "tags": "Pelican", 
            "loc": "http://shufo.github.io/site_building.html"
        },
        {
            "title": "マルチホストdocker環境でのBlueGreenなデプロイメント", 
            "text":"Overview dockerをそれなりに扱おうと思うと直面するのがマルチホスト環境でのdockerの構成。 大抵シングルホストのプリミティブな環境では問題無かったL3/L4の扱い、IPアドレス、ポート等のメタデータのリソース管理が問題になってくる。 前者に関しては、ルーティングコンテナ経由でのパケット交換、cgroup/namespaced、Open vSwtichなどでSDNを実装、 L3/L4を抽象化し仮想的に１つのネットワークとして扱えるようにすることで解決をしようという動きがある。 代表的なソリューションとしてはsocketplane, weave, pipework, flannel, Open vSwitch等のソリューションがある。 後者に関して分散Key Valueストアにコンテナのメタデータを登録し必要に応じてクラスタの構成情報を読み出す ことで解決しようとする動きがある。 代表的なソリューションとしてはConsul、etcd、zookeeper等がある。 マルチホストdocker環境で辛いところ L3/L4管理 コンテナの配置スケジューリング マルチホストでのメタデータ管理 やりたいこと L3/L4の自動管理 スケジューリングの自動化 コンテナライフサイクル管理の自動化 configのdynamicな書き換え BlueGreenなデプロイメント やったこと weaveでホストごとに存在するdockerのプライベートネットワークをL3レベルで抽象化、複数のホストにまたがるdockerネットワークを一つのネットワークとして扱えるようにし、Consul/consul-template/registratorでメタデータの管理/configの自動書き換え及びBlueGreenなクラスタの切り替え、またコンテナのスケジューリング/ライフサイクル管理にdocker-swarm/docker-composeを使用しクラスタ全体を透過的に管理出来るようにした。 それぞれの構成要素は単体で落ちても他の構成要素には影響しないものとし、ホスト障害があってもクラスタ全体としては可用性を存続出来るようにする。 なお前提として各構成要素は全てコンテナのためOSは便宜的にCoreOSを使用しているがホストでdockerさえ動作すればどんな環境でも動作するようになっている。 構成イメージ Requirements CoreOS (Tested on 557.2.0) Docker (Tested on 1.4.1) Weave (Tested on 0.9.0) docker-swarm (Tested on 0.1.0) docker-compose (Tested on 1.1.0) Consul (Tested on 0.5.0) Consul-template (Tested on 0.7.0) registrator (Tested on v5) Weave dockerネットワークの抽象化にはWeaveを使う。 Weaveは各ホストに存在するローカルなdockerネットワークを抽象化し、１つのネットワークとして扱うことを可能にする。 Unitファイル作成 sudo vim /etc/systemd/system/install-weave.service [Unit] After=network-online.target After=docker.service Description=Install Weave Documentation=http://zettio.github.io/weave/ Requires=network-online.target Requires=docker.service [Service] Type=oneshot RemainAfterExit=yes ExecStartPre=/usr/bin/wget -N -P /opt/bin \ https://raw.github.com/zettio/weave/master/weave ExecStartPre=/usr/bin/chmod +x /opt/bin/weave ExecStartPre=/usr/bin/docker pull zettio/weave:latest ExecStart=/bin/echo Wave Installed weave用ブリッジインターフェースUnitファイル作成 sudo vim /etc/systemd/network/10-weave.network [Match] Type=bridge Name=weave* [Network] Address=10.0.0.1/8 sudo vim /etc/systemd/network/10-weave.netdev [NetDev] Name=weave Kind=bridge weave service用Unitファイル作成 sudo vim /etc/systemd/system/weave.service [Unit] After=install-weave.service Description=Weave Network Documentation=http://zettio.github.io/weave/ Requires=install-weave.service [Service] ExecStartPre=/opt/bin/weave launch ExecStart=/usr/bin/docker attach weave ネットワーク再起動 sudo systemctl restart systemd-networkd weaveインストール・起動 sudo systemctl start install-weave.service sudo systemctl start weave.service sudo /opt/bin/weave create-bridge Docker docker用の管理ポートを開ける。 Unitファイル作成 sudo vim /etc/systemd/system/docker-tcp.socket [Unit] Description=Docker Socket for the API [Socket] ListenStream=2375 BindIPv6Only=both Service=docker.service [Install] WantedBy=sockets.target dockerのデフォルトブリッジをweaveし、dockerから透過的にweaveネットワークを扱えるようにする。 sudo cp /usr/lib/systemd/system/docker.service /etc/systemd/system/ sudo vim /etc/systemd/system/docker.service Environment=DOCKER_OPTS=&#39;--bridge=weave --fixed-cidr=&#34;10.0.0.0/8&#34; --insecure-registry=&#34;0.0.0.0/0&#34;&#39; socketを起動 sudo systemctl enable docker-tcp.socket sudo systemctl stop docker sudo systemctl start docker-tcp.socket sudo systemctl start docker 適宜iptables等でListenする相手を制限。 # Accept a manage node sudo iptables -A INPUT -s 10.0.0.1 -m tcp -p tcp --dport 2375 -j ACCEPT # Drop other nodes sudo iptables -A INPUT -s 0.0.0.0/0 -m tcp -p tcp --dport 2375 -j DROP 参照: https://coreos.com/docs/launching-containers/building/customizing-docker/ Swarm クラスタIDを取得 docker run --rm swarm create 6856663cdefdec325839a4b7e1de38e8 Swarm agentを起動(各ノード) docker run -d --name swarm_agent swarm join --addr=&lt;node_ip:2375&gt; token://&lt;cluster_id&gt; Swarm managerを起動 docker run -d --name swarm_manager -p &lt;swarm_port&gt;:2375 swarm manage token://&lt;cluster_id&gt; 確認 docker run --rm swarm list token://&lt;cluster_id&gt; 終了 docker kill swarm_agent docker kill swarm_manager Compose 実行ファイルをDL curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-compose.ymlにコンテナの定義を書く mkdir nodes cd nodes vim docker-compose.yml consul: command: --name consul -server -bootstrap -ui-dir /ui -data-dir ./data image: progrium/consul:latest ports: - &#34;8300&#34; - &#34;8400&#34; - &#34;8500&#34; - &#34;8600/udp&#34; environment: - &#34;affinity:container!=nodes_consul_*&#34; net: &#34;host&#34; registrator: command: -internal consul://127.0.0.1:8500 image: sttts/registrator:latest volumes: - &#34;/var/run/docker.sock:/tmp/docker.sock&#34; environment: - &#34;affinity:container!=nodes_registrator_*&#34; net: &#34;host&#34; haproxy: image: shayashibara/docker-consul-template-haproxy environment: - &#34;affinity:container!=nodes_haproxy_*&#34; links: consul:consul ports: - &#34;80:80&#34; apache: image: httpd environment: - &#34;SERVICE_TAGS=production&#34; Swarm経由でComposeを実行 DOCKER_HOST=tcp://localhost:2375 docker-compose scale consul=3 registrator=3 haproxy=3 apache=6 確認 DOCKER_HOST=tcp://localhost:2375 docker-compose ps Consul / consul-template Consulでコンテナのメタデータを管理し、Consul-templateでHAProxy配下のbackendを切り替える。 shayashibara/docker-consul-template-haproxyで起動するhaproxy用のconsul-templateのテンプレート。 global log 127.0.0.1 local0 log 127.0.0.1 local1 notice user haproxy group haproxy defaults log global mode http option httplog option dontlognull balance roundrobin timeout connect 5000 timeout client 50000 timeout server 50000 listen stats bind *:8001 option httpclose option forwardfor stats enable stats uri /haproxy?stats stats auth admin:123123q stats realm HAProxy\ Statistics frontend web-app bind *:80 default_backend {{key &#34;backend/current&#34;}} backend default server s1 localhost:8080 {{range $tag, $services := service &#34;apache-80&#34; | byTag}}backend {{$tag}} balance roundrobin {{range $services}} server {{.ID}} {{.Address}}:{{.Port}} {{end}}{{end}} consulate(Consulのpythonクライアント)で現在のクラスタのタグをsetし切り替える。 要件によるけど任意のタイミングでBlueGreenなクラスタの切り替えを行いたかったのでこのような構成にした。 実作業に落としこむ場合はJenkins等で切り替えをタスク化しWebUIから操作することになると思う。 pip install consulate consulate --api-host 172.17.42.1:8500 kv set backend/current production 確認 docker exec -it nodes_haproxy_1 cat /etc/haproxy/haproxy.cfg クラスタの終了 DOCKER_HOST=tcp://localhost:2375 docker-compose kill DOCKER_HOST=tcp://localhost:2375 docker-compose rm Conclusion マルチホストDocker環境でBlueGreenなデプロイを実現するためweaveでL3の抽象化とConsulによる分散Key-ValueストアでL3/L4リソースの管理、consul-templateで設定ファイルの動的書き換え、docker-swarm/composeによるコンテナのスケジューリング、ライフサイクル管理、BlueGreenなクラスタの切り替えを行った。 構成要素は多いものの各要素は疎結合でそれぞれ代替可能なツールが多い(weaveはpipeworkやflannel、Consulはetcdやzookeeper、consul-templateはconfd等ある)ので、要件に応じて構成要素は変えることが出来る。 dokkuやflynn、deis等のマイクロPaaSやCloud-FoundryやOpenShift等のフルスタックPaaSは単体で上記ツールチェインのほとんどの機能を備えている一方ロックインされやすいという面もあるため今回は既存の技術の組み合わせのみで構成した。 Docker誕生から２年を迎え牧歌的なシングルホストでのdon&#39;t recommend in productionな状態からプロダクションでのマルチホスト環境を見据えたオーケストレーションツール群も大分整理統合されてきた感がある。 依然レポジトリの扱いやセキュリティ面等、実運用面で辛い箇所は残るものの徐々にプロダクション環境での現実的な解が見えてきたように思える。今年はdocker in productionの飛躍の年になることを願いたい。 解決していない課題 プライベートなイメージの扱い OSイメージ + アプリケーションでそれなりの容量になる。 また何をするにもdocker-registry専用のプロトコルが必要なためイメージの配信方法の選択肢が少ない。 ログの扱い 各コンテナが生成するログをどこに送るか。またログ送信の冗長性の担保をどうするか ステートフルなコンテナの扱い 主にRedis, MySQL, PostgreSQLといった状態を持ったアプリケーションをどうするか セキュリティ面 dockerデーモン自体の脆弱性、コンテナの脆弱性、ホストOSの脆弱性をどうするか 課題解決への布石 プライベートなイメージの扱い レポジトリ自体の冗長化、容量コスト等考えるとquay.io, Google Container Registry等のRegistry as a Serviceという選択肢もある。 ログの扱い logsoutput, journalctl, fluentd等 ステートフルなコンテナの扱い ホスト側にマウント、data volume container、またはflocker、そもそもDockerizeしない等 セキュリティ面 Docker層だけで対応するのは難しいのでDockerを乗せるIaaSレベルでのコントロール。 ホスト側をなるべく薄く保つという意味でCoreOSやAtomic host等のコンテナ向け軽量OSやCoreOSの自動アップデート機能を使う。 またCoreOSによるコンテナ実装のRocketからのセキュリティ面でのフィードバックを今後期待。 References Adventures with Weave and Docker docker - ELB+Swarm+Compose+Consul+Registratorで夢は叶うのか(1) - Qiita logspoutでDockerコンテナのログの集約・ルーティング | SOTA", 
            "tags": "Docker", 
            "loc": "http://shufo.github.io/weave_swarm_compose.html"
        },
        {
            "title": "Hello world", 
            "text":"DevとOpsを行ったり来たりしているウェブ系エンジニアのブログです。 Pelicanで生成した静的サイトをGithub Pagesでホスティングしています。 ※このブログでの発言は個人の見解であり、所属する組織の公式の見解ではありません。", 
            "tags": "about", 
            "loc": "http://shufo.github.io/hello-world.html"
        }        
    ]
}